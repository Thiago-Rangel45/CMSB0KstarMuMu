import FWCore.ParameterSet.Config as cms

process = cms.Process("NANO")

process.source = cms.Source("PoolSource",
    delayReadingEventProducts = cms.untracked.bool(False),
    fileNames = cms.untracked.vstring('root://cms-xrd-global.cern.ch//store/data/Run2022C/ParkingDoubleMuonLowMass0/MINIAOD/PromptReco-v1/000/355/872/00000/fc32f8ac-8ba1-498d-96b2-1925a4c825fa.root'),
    secondaryFileNames = cms.untracked.vstring()
)
process.AODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*' ) 
    )
)

process.AODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*' ) 
    ),
    overrideInputFileSplitLevels = cms.untracked.bool(True)
)

process.AnomalousCellParameters = cms.PSet(
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999)
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.CandVars = cms.PSet(
    charge = cms.PSet(
        doc = cms.string('electric charge'),
        expr = cms.string('charge'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(-1),
        type = cms.string('int')
    ),
    eta = cms.PSet(
        doc = cms.string('eta'),
        expr = cms.string('eta'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    mass = cms.PSet(
        doc = cms.string('mass'),
        expr = cms.string('mass'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(10),
        type = cms.string('float')
    ),
    pdgId = cms.PSet(
        doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
        expr = cms.string('pdgId'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(-1),
        type = cms.string('int')
    ),
    phi = cms.PSet(
        doc = cms.string('phi'),
        expr = cms.string('phi'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    pt = cms.PSet(
        doc = cms.string('pt'),
        expr = cms.string('pt'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(-1),
        type = cms.string('float')
    )
)

process.CommonEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_logErrorHarvester_*_*')
)

process.CondDB = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionTimeout = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    connect = cms.string('')
)

process.DATAMIXEREventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep CSCDetIdCSCALCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCALCTDigi_*',
        'keep CSCDetIdCSCCLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCLCTDigi_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_muonCSCDigis_MuonCSCComparatorDigi_*',
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_csctfDigis_*_*',
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCorrelatedLCTDigi_*',
        'keep CSCDetIdCSCRPCDigiMuonDigiCollection_muonCSCDigis_MuonCSCRPCDigi_*',
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_muonCSCDigis_MuonCSCStripDigi_*',
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_muonCSCDigis_MuonCSCWireDigi_*',
        'keep DTLayerIdDTDigiMuonDigiCollection_muonDTDigis_*_*',
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*',
        'keep SiStripDigiedmDetSetVector_siStripDigis_*_*',
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*',
        'keep HBHEDataFramesSorted_hcalDigis_*_*',
        'keep HFDataFramesSorted_hcalDigis_*_*',
        'keep HODataFramesSorted_hcalDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_*_*',
        'keep QIE11DataFrameHcalDataFrameContainer_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep CastorDataFramesSorted_castorDigis_*_*',
        'keep EBDigiCollection_ecalDigis_*_*',
        'keep EEDigiCollection_ecalDigis_*_*',
        'keep ESDigiCollection_ecalPreshowerDigis_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.DQMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_MEtoEDMConverter_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*'
    )
)

process.EmptyCutBased_wp = cms.PSet(
    Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
    Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*'
    )
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*'
    )
)

process.FASTPUEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_fastSimProducer_*_*',
        'keep *_MuonSimHits_*_*',
        'drop *_fastSimProducer_VertexTypes_*',
        'keep *_generalTracksBeforeMixing_*_*',
        'drop *_generalTracksBeforeMixing_MVAValues_*',
        'drop *_generalTracksBeforeMixing_QualityMasks_*',
        'keep edmHepMCProduct_generatorSmeared_*_*'
    )
)

process.FEVTDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_simCscTriggerPrimitiveDigis_*_*',
        'keep *_simDtTriggerPrimitiveDigis_*_*',
        'keep *_simRpcTriggerDigis_*_*',
        'keep *_simRctDigis_*_*',
        'keep *_simCsctfDigis_*_*',
        'keep *_simCsctfTrackDigis_*_*',
        'keep *_simDttfDigis_*_*',
        'keep *_simGctDigis_*_*',
        'keep *_simCaloStage1Digis_*_*',
        'keep *_simCaloStage1FinalDigis_*_*',
        'keep *_simCaloStage2Layer1Digis_*_*',
        'keep *_simCaloStage2Digis_*_*',
        'keep *_simGmtDigis_*_*',
        'keep *_simBmtfDigis_*_*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_simOmtfDigis_*_*',
        'keep *_simEmtfDigis_*_*',
        'keep *_simGmtStage2Digis_*_*',
        'keep *_simGtDigis_*_*',
        'keep *_simGtStage2Digis_*_*',
        'keep *_cscTriggerPrimitiveDigis_*_*',
        'keep *_dtTriggerPrimitiveDigis_*_*',
        'keep *_rpcTriggerDigis_*_*',
        'keep *_rctDigis_*_*',
        'keep *_csctfDigis_*_*',
        'keep *_csctfTrackDigis_*_*',
        'keep *_dttfDigis_*_*',
        'keep *_gctDigis_*_*',
        'keep *_gmtDigis_*_*',
        'keep *_gtDigis_*_*',
        'keep *_gtEvmDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'keep *_simEmtfShowers_*_*',
        'keep *_simGmtShowerDigis_*_*',
        'keep *_simMuonGEMPadDigis_*_*',
        'keep *_simMuonGEMPadDigiClusters_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_trackingParticleRecoTrackAsssociation_*_*',
        'keep *_assoc2secStepTk_*_*',
        'keep *_assoc2thStepTk_*_*',
        'keep *_assoc2GsfTracks_*_*',
        'keep *_assocOutInConversionTracks_*_*',
        'keep *_assocInOutConversionTracks_*_*',
        'keep *_TTClusterAssociatorFromPixelDigis_*_*',
        'keep *_TTStubAssociatorFromPixelDigis_*_*',
        'keep *_simHitTPAssocProducer_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonDTDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *_simMuonGEMDigis_*_*',
        'keep *_simEcalDigis_*_*',
        'keep *_simEcalPreshowerDigis_*_*',
        'keep *_simEcalTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitivePhase2Digis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*',
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*',
        'keep *_simHcalTriggerPrimitiveDigis_*_*',
        'keep *_mix_HcalSamples_*',
        'keep *_mixData_HcalSamples_*',
        'keep *_mix_HcalHits_*',
        'keep *_mixData_HcalHits_*',
        'keep *_DMHcalTriggerPrimitiveDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTDEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_simCscTriggerPrimitiveDigis_*_*',
        'keep *_simDtTriggerPrimitiveDigis_*_*',
        'keep *_simRpcTriggerDigis_*_*',
        'keep *_simRctDigis_*_*',
        'keep *_simCsctfDigis_*_*',
        'keep *_simCsctfTrackDigis_*_*',
        'keep *_simDttfDigis_*_*',
        'keep *_simGctDigis_*_*',
        'keep *_simCaloStage1Digis_*_*',
        'keep *_simCaloStage1FinalDigis_*_*',
        'keep *_simCaloStage2Layer1Digis_*_*',
        'keep *_simCaloStage2Digis_*_*',
        'keep *_simGmtDigis_*_*',
        'keep *_simBmtfDigis_*_*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_simOmtfDigis_*_*',
        'keep *_simEmtfDigis_*_*',
        'keep *_simGmtStage2Digis_*_*',
        'keep *_simGtDigis_*_*',
        'keep *_simGtStage2Digis_*_*',
        'keep *_cscTriggerPrimitiveDigis_*_*',
        'keep *_dtTriggerPrimitiveDigis_*_*',
        'keep *_rpcTriggerDigis_*_*',
        'keep *_rctDigis_*_*',
        'keep *_csctfDigis_*_*',
        'keep *_csctfTrackDigis_*_*',
        'keep *_dttfDigis_*_*',
        'keep *_gctDigis_*_*',
        'keep *_gmtDigis_*_*',
        'keep *_gtDigis_*_*',
        'keep *_gtEvmDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'keep *_simEmtfShowers_*_*',
        'keep *_simGmtShowerDigis_*_*',
        'keep *_simMuonGEMPadDigis_*_*',
        'keep *_simMuonGEMPadDigiClusters_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_trackingParticleRecoTrackAsssociation_*_*',
        'keep *_assoc2secStepTk_*_*',
        'keep *_assoc2thStepTk_*_*',
        'keep *_assoc2GsfTracks_*_*',
        'keep *_assocOutInConversionTracks_*_*',
        'keep *_assocInOutConversionTracks_*_*',
        'keep *_TTClusterAssociatorFromPixelDigis_*_*',
        'keep *_TTStubAssociatorFromPixelDigis_*_*',
        'keep *_simHitTPAssocProducer_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonDTDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *_simMuonGEMDigis_*_*',
        'keep *_simEcalDigis_*_*',
        'keep *_simEcalPreshowerDigis_*_*',
        'keep *_simEcalTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitivePhase2Digis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*',
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*',
        'keep *_simHcalTriggerPrimitiveDigis_*_*',
        'keep *_mix_HcalSamples_*',
        'keep *_mixData_HcalSamples_*',
        'keep *_mix_HcalHits_*',
        'keep *_mixData_HcalHits_*',
        'keep *_DMHcalTriggerPrimitiveDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep *_*_MergedTrackTruth_*',
        'keep *_*_StripDigiSimLink_*',
        'keep *_*_PixelDigiSimLink_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_muonGEMDigis_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTHLTALLEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_*_*_HLT' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep *_muonGEMDigis_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.GENEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep *_externalLHEProducer_LHEScriptOutput_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_randomEngineStateProducer_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.GENRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep recoGenMETs_*_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_logErrorHarvester_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.GeneratorInterfaceLHE = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep *_externalLHEProducer_LHEScriptOutput_*'
    )
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.HFRecalParameterBlock = cms.PSet(
    HFdepthOneParameterA = cms.vdouble(
        0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
        0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
        0.058939, 0.125497
    ),
    HFdepthOneParameterB = cms.vdouble(
        -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
        2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
        0.000425, 0.000209
    ),
    HFdepthTwoParameterA = cms.vdouble(
        0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
        0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
        0.051579, 0.086593
    ),
    HFdepthTwoParameterB = cms.vdouble(
        -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
        1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
        0.000157, -3e-06
    )
)

process.HLTDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_logErrorHarvester_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTONLYEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop  FEDRawDataCollection_rawDataCollector_*_*',
        'drop  FEDRawDataCollection_source_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTONLYSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop  FEDRawDataCollection_rawDataCollector_*_*',
        'drop  FEDRawDataCollection_source_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTSCOUTEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTScouting = cms.PSet(
    outputCommands = cms.vstring(
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTScoutingAll = cms.PSet(
    outputCommands = cms.vstring(
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.HLTriggerMINIAOD = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    )
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring(
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.L1SCOUTEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    )
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simCscTriggerPrimitiveDigis_*_*',
        'keep *_simDtTriggerPrimitiveDigis_*_*',
        'keep *_simRpcTriggerDigis_*_*',
        'keep *_simRctDigis_*_*',
        'keep *_simCsctfDigis_*_*',
        'keep *_simCsctfTrackDigis_*_*',
        'keep *_simDttfDigis_*_*',
        'keep *_simGctDigis_*_*',
        'keep *_simCaloStage1Digis_*_*',
        'keep *_simCaloStage1FinalDigis_*_*',
        'keep *_simCaloStage2Layer1Digis_*_*',
        'keep *_simCaloStage2Digis_*_*',
        'keep *_simGmtDigis_*_*',
        'keep *_simBmtfDigis_*_*',
        'keep *_simKBmtfDigis_*_*',
        'keep *_simOmtfDigis_*_*',
        'keep *_simEmtfDigis_*_*',
        'keep *_simGmtStage2Digis_*_*',
        'keep *_simGtDigis_*_*',
        'keep *_simGtStage2Digis_*_*',
        'keep *_cscTriggerPrimitiveDigis_*_*',
        'keep *_dtTriggerPrimitiveDigis_*_*',
        'keep *_rpcTriggerDigis_*_*',
        'keep *_rctDigis_*_*',
        'keep *_csctfDigis_*_*',
        'keep *_csctfTrackDigis_*_*',
        'keep *_dttfDigis_*_*',
        'keep *_gctDigis_*_*',
        'keep *_gmtDigis_*_*',
        'keep *_gtDigis_*_*',
        'keep *_gtEvmDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'keep *_simEmtfShowers_*_*',
        'keep *_simGmtShowerDigis_*_*',
        'keep *_simMuonGEMPadDigis_*_*',
        'keep *_simMuonGEMPadDigiClusters_*_*'
    )
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*'
    )
)

process.L1TriggerRAWDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    )
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    )
)

process.LHEEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep *_externalLHEProducer_LHEScriptOutput_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.METSignificanceParams = cms.PSet(
    dRMatch = cms.double(0.4),
    jetThreshold = cms.double(15),
    jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
    jpar = cms.vdouble(1.39, 1.26, 1.21, 1.23, 1.28),
    pjpar = cms.vdouble(-0.2586, 0.6173)
)

process.METSignificance_params = cms.PSet(
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EE_PhiResPar = cms.vdouble(0.02511),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    HB_PhiResPar = cms.vdouble(0.02511),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    HE_PhiResPar = cms.vdouble(0.02511),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    HF_PhiResPar = cms.vdouble(0.05022),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    HO_PhiResPar = cms.vdouble(0.02511),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    jdphi0 = cms.vdouble(
        0.034, 0.034, 0.034, 0.034, 0.032,
        0.031, 0.028, 0.027, 0.027, 0.027
    ),
    jdphi1 = cms.vdouble(
        0.034, 0.035, 0.035, 0.035, 0.035,
        0.034, 0.031, 0.03, 0.029, 0.027
    ),
    jdphi2 = cms.vdouble(
        0.04, 0.04, 0.04, 0.04, 0.04,
        0.038, 0.036, 0.035, 0.034, 0.033
    ),
    jdphi3 = cms.vdouble(
        0.042, 0.043, 0.044, 0.043, 0.041,
        0.039, 0.039, 0.036, 0.034, 0.031
    ),
    jdphi4 = cms.vdouble(
        0.042, 0.042, 0.043, 0.042, 0.038,
        0.036, 0.036, 0.033, 0.031, 0.031
    ),
    jdphi5 = cms.vdouble(
        0.069, 0.069, 0.064, 0.058, 0.053,
        0.049, 0.049, 0.043, 0.039, 0.04
    ),
    jdphi6 = cms.vdouble(
        0.084, 0.08, 0.072, 0.065, 0.066,
        0.06, 0.051, 0.049, 0.045, 0.045
    ),
    jdphi7 = cms.vdouble(
        0.077, 0.072, 0.059, 0.05, 0.045,
        0.042, 0.039, 0.039, 0.037, 0.031
    ),
    jdphi8 = cms.vdouble(
        0.059, 0.057, 0.051, 0.044, 0.038,
        0.035, 0.037, 0.032, 0.028, 0.028
    ),
    jdphi9 = cms.vdouble(
        0.062, 0.059, 0.053, 0.047, 0.042,
        0.045, 0.036, 0.032, 0.034, 0.044
    ),
    jdpt0 = cms.vdouble(
        0.749, 0.829, 1.099, 1.355, 1.584,
        1.807, 2.035, 2.217, 2.378, 2.591
    ),
    jdpt1 = cms.vdouble(
        0.718, 0.813, 1.133, 1.384, 1.588,
        1.841, 2.115, 2.379, 2.508, 2.772
    ),
    jdpt2 = cms.vdouble(
        0.841, 0.937, 1.316, 1.605, 1.919,
        2.295, 2.562, 2.722, 2.943, 3.293
    ),
    jdpt3 = cms.vdouble(
        0.929, 1.04, 1.46, 1.74, 2.042,
        2.289, 2.639, 2.837, 2.946, 2.971
    ),
    jdpt4 = cms.vdouble(
        0.85, 0.961, 1.337, 1.593, 1.854,
        2.005, 2.209, 2.533, 2.812, 3.047
    ),
    jdpt5 = cms.vdouble(
        1.049, 1.149, 1.607, 1.869, 2.012,
        2.219, 2.289, 2.412, 2.695, 2.865
    ),
    jdpt6 = cms.vdouble(
        1.213, 1.298, 1.716, 2.015, 2.191,
        2.612, 2.863, 2.879, 2.925, 2.902
    ),
    jdpt7 = cms.vdouble(
        1.094, 1.139, 1.436, 1.672, 1.831,
        2.05, 2.267, 2.549, 2.785, 2.86
    ),
    jdpt8 = cms.vdouble(
        0.889, 0.939, 1.166, 1.365, 1.553,
        1.805, 2.06, 2.22, 2.268, 2.247
    ),
    jdpt9 = cms.vdouble(
        0.843, 0.885, 1.245, 1.665, 1.944,
        1.981, 1.972, 2.875, 3.923, 7.51
    ),
    ptresolthreshold = cms.double(10.0),
    resolutionsAlgo = cms.string('AK5PF'),
    resolutionsEra = cms.string('Spring10')
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(-900),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_hlt*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.MINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(-900),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*',
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*',
        'drop *_hlt*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*'
    )
)

process.MINIGENEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*'
    )
)

process.MIXINGMODULEEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_cfWriter_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.MicroEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*'
    )
)

process.MicroEventContentGEN = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*'
    )
)

process.MicroEventContentMC = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*',
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*'
    )
)

process.NANOAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.NANOAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.NanoAODEDMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)

process.OnlineMetaDataContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*'
    )
)

process.P3Vars = cms.PSet(
    eta = cms.PSet(
        doc = cms.string('eta'),
        expr = cms.string('eta'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    phi = cms.PSet(
        doc = cms.string('phi'),
        expr = cms.string('phi'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    pt = cms.PSet(
        doc = cms.string('pt'),
        expr = cms.string('pt'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(-1),
        type = cms.string('float')
    )
)

process.P4Vars = cms.PSet(
    eta = cms.PSet(
        doc = cms.string('eta'),
        expr = cms.string('eta'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    mass = cms.PSet(
        doc = cms.string('mass'),
        expr = cms.string('mass'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(10),
        type = cms.string('float')
    ),
    phi = cms.PSet(
        doc = cms.string('phi'),
        expr = cms.string('phi'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    pt = cms.PSet(
        doc = cms.string('pt'),
        expr = cms.string('pt'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(-1),
        type = cms.string('float')
    )
)

process.PFJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.PREMIXEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_ZeroSuppressed_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'keep *_mix_AffectedAPVList_*',
        'keep EBDigiCollection_simEcalDigis_*_*',
        'keep EEDigiCollection_simEcalDigis_*_*',
        'keep ESDigiCollection_simEcalUnsuppressedDigis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep *_mix_g4SimHitsMuonDTHits_*',
        'keep *_mix_g4SimHitsMuonCSCHits_*',
        'keep *_mix_g4SimHitsMuonRPCHits_*',
        'keep *_mix_g4SimHitsMuonGEMHits_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.PREMIXRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'drop CrossingFramePlaybackInfoNew_mix_*_*',
        'keep *_*_MergedTrackTruth_*',
        'keep *_*_StripDigiSimLink_*',
        'keep *_*_PixelDigiSimLink_*',
        'keep *_*_MuonCSCStripDigiSimLinks_*',
        'keep *_*_MuonCSCWireDigiSimLinks_*',
        'keep *_*_RPCDigiSimLink_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.PTVars = cms.PSet(
    phi = cms.PSet(
        doc = cms.string('phi'),
        expr = cms.string('phi'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(12),
        type = cms.string('float')
    ),
    pt = cms.PSet(
        doc = cms.string('pt'),
        expr = cms.string('pt'),
        lazyEval = cms.untracked.bool(False),
        precision = cms.int32(-1),
        type = cms.string('float')
    )
)

process.RAWAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(31457280),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*' ) 
    )
)

process.RAWAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep SimVertexs_g4SimHits_*_*' ) 
    )
)

process.RAWDEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWDEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWMINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*'
    )
)

process.RAWMINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep *_slimmedPhotons_*_*',
        'keep *_slimmedOOTPhotons_*_*',
        'keep *_slimmedElectrons_*_*',
        'keep *_slimmedMuons_*_*',
        'keep recoTrackExtras_slimmedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedMuonTrackExtras_*_*',
        'keep *_slimmedTaus_*_*',
        'keep *_slimmedTausBoosted_*_*',
        'keep *_slimmedCaloJets_*_*',
        'keep *_slimmedJPTJets_*_*',
        'keep *_slimmedJets_*_*',
        'keep recoBaseTagInfosOwned_slimmedJets_*_*',
        'keep *_slimmedJetsAK8_*_*',
        'drop recoBaseTagInfosOwned_slimmedJetsAK8_*_*',
        'keep *_slimmedJetsPuppi_*_*',
        'keep *_slimmedMETs_*_*',
        'keep *_slimmedMETsPuppi_*_*',
        'keep *_slimmedSecondaryVertices_*_*',
        'keep *_slimmedLambdaVertices_*_*',
        'keep *_slimmedKshortVertices_*_*',
        'keep *_slimmedJetsAK8PFPuppiSoftDropPacked_SubJets_*',
        'keep recoPhotonCores_reducedEgamma_*_*',
        'keep recoGsfElectronCores_reducedEgamma_*_*',
        'keep recoConversions_reducedEgamma_*_*',
        'keep recoSuperClusters_reducedEgamma_*_*',
        'keep recoCaloClusters_reducedEgamma_*_*',
        'keep EcalRecHitsSorted_reducedEgamma_*_*',
        'keep recoGsfTracks_reducedEgamma_*_*',
        'keep HBHERecHitsSorted_reducedEgamma_*_*',
        'keep *_slimmedHcalRecHits_*_*',
        'drop *_*_caloTowers_*',
        'drop *_*_pfCandidates_*',
        'drop *_*_genJets_*',
        'keep *_offlineBeamSpot_*_*',
        'keep *_offlineSlimmedPrimaryVertices_*_*',
        'keep *_offlineSlimmedPrimaryVerticesWithBS_*_*',
        'keep patPackedCandidates_packedPFCandidates_*_*',
        'keep *_isolatedTracks_*_*',
        'keep *_oniaPhotonCandidates_*_*',
        'keep *_bunchSpacingProducer_*_*',
        'keep double_fixedGridRhoAll__*',
        'keep double_fixedGridRhoFastjetAll__*',
        'keep double_fixedGridRhoFastjetAllTmp__*',
        'keep double_fixedGridRhoFastjetAllCalo__*',
        'keep double_fixedGridRhoFastjetCentral_*_*',
        'keep double_fixedGridRhoFastjetCentralCalo__*',
        'keep double_fixedGridRhoFastjetCentralChargedPileUp__*',
        'keep double_fixedGridRhoFastjetCentralNeutral__*',
        'keep *_slimmedPatTrigger_*_*',
        'keep patPackedTriggerPrescales_patTrigger__*',
        'keep patPackedTriggerPrescales_patTrigger_l1max_*',
        'keep patPackedTriggerPrescales_patTrigger_l1min_*',
        'keep *_l1extraParticles_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep GlobalExtBlkBXVector_simGtExtUnprefireable_*_*',
        'keep *_gtStage2Digis__*',
        'keep *_gmtStage2Digis_Muon_*',
        'keep *_caloStage2Digis_Jet_*',
        'keep *_caloStage2Digis_Tau_*',
        'keep *_caloStage2Digis_EGamma_*',
        'keep *_caloStage2Digis_EtSum_*',
        'keep *_TriggerResults_*_HLT',
        'keep *_TriggerResults_*_*',
        'keep patPackedCandidates_lostTracks_*_*',
        'keep HcalNoiseSummary_hcalnoise__*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTracks_displacedGlobalMuons__*',
        'keep recoTracks_displacedTracks__*',
        'keep *_prefiringweight_*_*',
        'keep *_slimmedLowPtElectrons_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep *_slimmedDisplacedMuons_*_*',
        'keep recoTrackExtras_slimmedDisplacedMuonTrackExtras_*_*',
        'keep TrackingRecHitsOwned_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiPixelClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep SiStripClusteredmNewDetSetVector_slimmedDisplacedMuonTrackExtras_*_*',
        'keep *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'drop *_packedPFCandidates_hcalDepthEnergyFractions_*',
        'keep patPackedGenParticles_packedGenParticles_*_*',
        'keep recoGenParticles_prunedGenParticles_*_*',
        'keep *_packedPFCandidateToGenAssociation_*_*',
        'keep *_lostTracksToGenAssociation_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_*_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep recoGenParticles_genPUProtons_*_*',
        'keep *_slimmedGenJetsFlavourInfos_*_*',
        'keep *_slimmedGenJets__*',
        'keep *_slimmedGenJetsAK8__*',
        'keep *_slimmedGenJetsAK8SoftDropSubJets__*',
        'keep *_genMetTrue_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep GenRunInfoProduct_*_*_*',
        'keep *_genParticles_xyz0_*',
        'keep *_genParticles_t0_*',
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*',
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*',
        'keep SimVertexs_g4SimHits_*_*'
    )
)

process.RAWRECODEBUGHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOSIMHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(1),
    eventAutoFlushCompressedSize = cms.untracked.int32(20971520),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMHLTEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop *',
        'drop *',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'drop *_hlt*_*_*',
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*',
        'keep *_hltAK4CaloJetsIDPassed_*_*',
        'keep *_hltAK4CaloJets_*_*',
        'keep *_hltAK4PFJetsCorrected_*_*',
        'keep *_hltAK4PFJetsForTaus_*_*',
        'keep *_hltAK4PFJets_*_*',
        'keep *_hltAK8PFJets_*_*',
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*',
        'keep *_hltAlCaEtaEERechitsToDigis_*_*',
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*',
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*',
        'keep *_hltAlCaPi0EERechitsToDigis_*_*',
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*',
        'keep *_hltAlcaPixelClusterCounts_*_*',
        'keep *_hltBSoftMuonMu5L3_*_*',
        'keep *_hltCsc2DRecHits_*_*',
        'keep *_hltCscSegments_*_*',
        'keep *_hltCtfWithMaterialTracksP5_*_*',
        'keep *_hltDeepBLifetimeTagInfosPF_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsCalo_*_*',
        'keep *_hltDeepCombinedSecondaryVertexBJetTagsPF_*_*',
        'keep *_hltDeepSecondaryVertexTagInfosPF_*_*',
        'keep *_hltDisplacedhltIter4PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDoubletRecoveryPFlowCtfWithMaterialTracks_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurityPPOnAA_*_*',
        'keep *_hltDoubletRecoveryPFlowTrackSelectionHighPurity_*_*',
        'keep *_hltDt4DSegments_*_*',
        'keep *_hltEcalPhiSymFilter_*_*',
        'keep *_hltEcalRecHit_*_*',
        'keep *_hltEgammaCandidates_*_*',
        'keep *_hltEgammaGsfTracks_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltFastPVPixelTracksMerger_*_*',
        'keep *_hltFastPVPixelTracksRecover_*_*',
        'keep *_hltFastPVPixelTracks_*_*',
        'keep *_hltFastPVPixelVertices_*_*',
        'keep *_hltFastPixelBLifetimeL3Associator_*_*',
        'keep *_hltFastPrimaryVertex_*_*',
        'keep *_hltFixedGridRhoFastjetAll_*_*',
        'keep *_hltFullSiStripRawToClustersFacility_*_*',
        'keep *_hltGlbTrkMuonCandsNoVtx_*_*',
        'keep *_hltGtStage2Digis_*_*',
        'keep *_hltHITrackingSiStripRawToClustersFacilityFullZeroSuppression_*_*',
        'keep *_hltHbhereco_*_*',
        'keep *_hltHfreco_*_*',
        'keep *_hltHoreco_*_*',
        'keep *_hltImpactParameterTagInfos_*_*',
        'keep *_hltInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_hltIsolPixelTrackProdHB_*_*',
        'keep *_hltIsolPixelTrackProdHE_*_*',
        'keep *_hltIter0PFlowCtfWithMaterialTracks_*_*',
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*',
        'keep *_hltIter2MergedForDisplaced_*_*',
        'keep *_hltIterL3GlbMuon_*_*',
        'keep *_hltIterL3MuonAndMuonFromL1Merged_*_*',
        'keep *_hltIterL3MuonMerged_*_*',
        'keep *_hltIterL3MuonsNoID_*_*',
        'keep *_hltIterL3Muons_*_*',
        'keep *_hltIterL3OIMuonTrackSelectionHighPurity_*_*',
        'keep *_hltL2MuonCandidatesNoVtx_*_*',
        'keep *_hltL2MuonCandidates_*_*',
        'keep *_hltL2MuonSeeds_*_*',
        'keep *_hltL2Muons_*_*',
        'keep *_hltL2TauJets_*_*',
        'keep *_hltL3MuonsIOHit_*_*',
        'keep *_hltL3MuonsLinksCombination_*_*',
        'keep *_hltL3MuonsOIHit_*_*',
        'keep *_hltL3MuonsOIState_*_*',
        'keep *_hltL3Muons_*_*',
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*',
        'keep *_hltL3NoFiltersNoVtxMuons_*_*',
        'keep *_hltL3TkFromL2OICombination_*_*',
        'keep *_hltL3TkTracksFromL2IOHit_*_*',
        'keep *_hltL3TkTracksFromL2OIHit_*_*',
        'keep *_hltL3TkTracksFromL2OIState_*_*',
        'keep *_hltL3TkTracksFromL2_*_*',
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*',
        'keep *_hltL3TrackCandidateFromL2OIState_*_*',
        'keep *_hltL3TrajSeedIOHit_*_*',
        'keep *_hltL3TrajSeedOIHit_*_*',
        'keep *_hltL3TrajSeedOIState_*_*',
        'keep *_hltL3TrajectorySeed_*_*',
        'keep *_hltMergedTracksForBTag_*_*',
        'keep *_hltMergedTracksPPOnAA_*_*',
        'keep *_hltMergedTracksSelector_*_*',
        'keep *_hltMergedTracks_*_*',
        'keep *_hltMet_*_*',
        'keep *_hltMuonCSCDigis_*_*',
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*',
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*',
        'keep *_hltMuonDTDigis_*_*',
        'keep *_hltMuonRPCDigis_*_*',
        'keep *_hltOnlineBeamSpot_*_*',
        'keep *_hltPFJetForBtag_*_*',
        'keep *_hltPFJetForPNetAK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10AK8_*_*',
        'keep *_hltPFJetsCorrectedMatchedToCaloJets10_*_*',
        'keep *_hltPFMETNoMuProducer_*_*',
        'keep *_hltPFMETProducer_*_*',
        'keep *_hltPFMETTypeOne_*_*',
        'keep *_hltPFMuonMerging_*_*',
        'keep *_hltPFTau35Track_*_*',
        'keep *_hltPFTau35_*_*',
        'keep *_hltPPSCalibrationRaw_*_*',
        'keep *_hltParticleFlowForTaus_*_*',
        'keep *_hltParticleFlow_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTagsAK8_*_*',
        'keep *_hltParticleNetDiscriminatorsJetTags_*_*',
        'keep *_hltParticleNetJetTagInfos_*_*',
        'keep *_hltPixelTracksPPOnAA_*_*',
        'keep *_hltPixelTracks_*_*',
        'keep *_hltPixelVerticesPPOnAA_*_*',
        'keep *_hltPixelVertices_*_*',
        'keep *_hltRpcRecHits_*_*',
        'keep *_hltSelector4CentralJetsL1FastJet_*_*',
        'keep *_hltSelectorJets20L1FastJet_*_*',
        'keep *_hltSiPixelClustersAfterSplittingPPOnAA_*_*',
        'keep *_hltSiPixelClustersCache_*_*',
        'keep *_hltSiPixelClusters_*_*',
        'keep *_hltSiStripClusterizerForRawPrime_*_*',
        'keep *_hltSiStripClusters2ApproxClusters_*_*',
        'keep *_hltSiStripRawToClustersFacility_*_*',
        'keep *_hltTowerMakerForAll_*_*',
        'keep *_hltTriggerSummaryAOD_*_*',
        'keep *_hltTriggerSummaryRAW_*_*',
        'keep *_hltTrimmedPixelVerticesPPOnAA_*_*',
        'keep *_hltTrimmedPixelVertices_*_*',
        'keep *_hltVerticesL3_*_*',
        'keep *_hltVerticesPFFilterPPOnAA_*_*',
        'keep *_hltVerticesPFFilter_*_*',
        'keep *_hltVerticesPFSelector_*_*',
        'keep DetIds_hltSiStripRawToDigi_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*',
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*',
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*',
        'keep TrackingRecHitsOwned_hltL3Muons_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep recoCaloJets_*_*_*',
        'keep recoCaloMETs_*_*_*',
        'keep recoCaloMETs_hltMet_*_*',
        'keep recoCompositeCandidates_*_*_*',
        'keep recoElectrons_*_*_*',
        'keep recoIsolatedPixelTrackCandidates_*_*_*',
        'keep recoMETs_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoPFTaus_*_*_*',
        'keep recoRecoChargedCandidates_*_*_*',
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*',
        'keep recoRecoEcalCandidates_*_*_*',
        'keep triggerTriggerEventWithRefs_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep triggerTriggerFilterObjectWithRefs_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RECODEBUGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring( (
        'drop *',
        'drop *',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*',
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*',
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*',
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*',
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*',
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*',
        'keep *_offlineBeamSpot_*_*',
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*',
        'keep *_l1GtRecord_*_*',
        'keep *_l1GtTriggerMenuLite_*_*',
        'keep *_conditionsInEdm_*_*',
        'keep *_l1extraParticles_*_*',
        'keep *_l1L1GtObjectMap_*_*',
        'keep L1MuGMTReadoutCollection_gtDigis_*_*',
        'keep L1GctEmCand*_gctDigis_*_*',
        'keep L1GctJetCand*_gctDigis_*_*',
        'keep L1GctEtHad*_gctDigis_*_*',
        'keep L1GctEtMiss*_gctDigis_*_*',
        'keep L1GctEtTotal*_gctDigis_*_*',
        'keep L1GctHtMiss*_gctDigis_*_*',
        'keep L1GctJetCounts*_gctDigis_*_*',
        'keep L1GctHFRingEtSums*_gctDigis_*_*',
        'keep L1GctHFBitCounts*_gctDigis_*_*',
        'keep LumiDetails_lumiProducer_*_*',
        'keep LumiSummary_lumiProducer_*_*',
        'keep *_gtStage2Digis_*_*',
        'keep *_gmtStage2Digis_*_*',
        'keep *_caloStage2Digis_*_*',
        'drop *_hlt*_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep *_hltScoutingMuonPacker_*_*',
        'keep *_hltScoutingCaloPacker_*_*',
        'keep *_hltScoutingMuonPackerCalo_*_*',
        'keep *_hltScoutingPrimaryVertexPackerCaloMuon_*_*',
        'keep DcsStatuss_hltScalersRawToDigi_*_*',
        'keep L1AcceptBunchCrossings_scalersRawToDigi_*_*',
        'keep L1TriggerScalerss_scalersRawToDigi_*_*',
        'keep Level1TriggerScalerss_scalersRawToDigi_*_*',
        'keep LumiScalerss_scalersRawToDigi_*_*',
        'keep BeamSpotOnlines_scalersRawToDigi_*_*',
        'keep DcsStatuss_scalersRawToDigi_*_*',
        'keep CTPPSRecord_onlineMetaDataDigis_*_*',
        'keep DCSRecord_onlineMetaDataDigis_*_*',
        'keep OnlineLuminosityRecord_onlineMetaDataDigis_*_*',
        'keep recoBeamSpot_onlineMetaDataDigis_*_*',
        'keep *_tcdsDigis_*_*',
        'keep *_logErrorHarvester_*_*',
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenMETs_*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*' ) 
    ),
    splitLevel = cms.untracked.int32(0)
)

process.REDIGIEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'drop *_randomEngineStateProducer_*_*'
    )
)

process.REGENEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'keep *',
        'drop *_genParticles_*_*',
        'drop *_genParticlesForJets_*_*',
        'drop *_kt4GenJets_*_*',
        'drop *_kt6GenJets_*_*',
        'drop *_iterativeCone5GenJets_*_*',
        'drop *_ak4GenJets_*_*',
        'drop *_ak7GenJets_*_*',
        'drop *_ak8GenJets_*_*',
        'drop *_ak4GenJetsNoNu_*_*',
        'drop *_ak8GenJetsNoNu_*_*',
        'drop *_genCandidatesForMET_*_*',
        'drop *_genParticlesForMETAllVisible_*_*',
        'drop *_genMetCalo_*_*',
        'drop *_genMetCaloAndNonPrompt_*_*',
        'drop *_genMetTrue_*_*',
        'drop *_genMetIC5GenJs_*_*'
    )
)

process.REPACKRAWEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop FEDRawDataCollection_*_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'drop FEDRawDataCollection_source_*_*',
        'drop FEDRawDataCollection_rawDataCollector_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.REPACKRAWSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *',
        'drop FEDRawDataCollection_*_*_*',
        'keep FEDRawDataCollection_rawDataRepacker_*_*',
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*',
        'keep FEDRawDataCollection_rawDataReducedFormat_*_*',
        'keep  FEDRawDataCollection_rawDataCollector_*_*',
        'keep  FEDRawDataCollection_source_*_*',
        'drop *_hlt*_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep GlobalObjectMapRecord_hltGtStage2ObjectMap_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep triggerTriggerEvent_*_*_*',
        'keep *_hltFEDSelectorL1_*_*',
        'keep *_hltScoutingEgammaPacker_*_*',
        'keep *_hltScoutingMuonPackerNoVtx_*_*',
        'keep *_hltScoutingMuonPackerVtx_*_*',
        'keep *_hltScoutingPFPacker_*_*',
        'keep *_hltScoutingPrimaryVertexPacker_*_*',
        'keep *_hltScoutingTrackPacker_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*',
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*',
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*',
        'keep recoGenMETs_*_*_*',
        'keep FEDRawDataCollection_source_*_*',
        'keep FEDRawDataCollection_rawDataCollector_*_*',
        'keep *_MEtoEDMConverter_*_*',
        'keep *_randomEngineStateProducer_*_*',
        'keep *_logErrorHarvester_*_*',
        'drop FEDRawDataCollection_source_*_*',
        'drop FEDRawDataCollection_rawDataCollector_*_*'
    ),
    splitLevel = cms.untracked.int32(0)
)

process.RESIMEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring(
        'drop *',
        'keep *_randomEngineStateProducer_*_*',
        'keep LHERunInfoProduct_*_*_*',
        'keep LHEEventProduct_*_*_*',
        'keep GenRunInfoProduct_generator_*_*',
        'keep GenLumiInfoHeader_generator_*_*',
        'keep GenLumiInfoProduct_generator_*_*',
        'keep GenEventInfoProduct_generator_*_*',
        'keep edmHepMCProduct_generatorSmeared_*_*',
        'keep edmHepMCProduct_LHCTransport_*_*',
        'keep GenFilterInfo_*_*_*',
        'keep *_genParticles_*_*'
    )
)

process.RecoBTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_softPFMuonsTagInfos_*_*',
        'keep *_softPFElectronsTagInfos_*_*',
        'keep *_pfImpactParameterTagInfos_*_*',
        'keep *_pfSecondaryVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*',
        'keep *_pfGhostTrackVertexTagInfos_*_*',
        'keep *_pfInclusiveSecondaryVertexFinderCvsLTagInfos_*_*',
        'keep *_softPFElectronBJetTags_*_*',
        'keep *_softPFMuonBJetTags_*_*',
        'keep *_pfTrackCountingHighEffBJetTags_*_*',
        'keep *_pfJetProbabilityBJetTags_*_*',
        'keep *_pfJetBProbabilityBJetTags_*_*',
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfSimpleInclusiveSecondaryVertexHighEffBJetTags_*_*',
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*',
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*',
        'keep *_pfGhostTrackBJetTags_*_*',
        'keep *_pfCombinedMVAV2BJetTags_*_*',
        'keep *_inclusiveCandidateSecondaryVertices_*_*',
        'keep *_inclusiveCandidateSecondaryVerticesCvsL_*_*',
        'keep *_pfCombinedCvsLJetTags_*_*',
        'keep *_pfCombinedCvsBJetTags_*_*',
        'keep *_pfChargeBJetTags_*_*',
        'keep *_pfDeepCSVJetTags_*_*',
        'keep *_pfDeepCMVAJetTags_*_*',
        'keep *_pixelClusterTagInfos_*_*'
    )
)

process.RecoBTauAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoCTPPSAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoCTPPSFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoCTPPSRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep TotemTriggerCounters_totemTriggerRawToDigi_*_*',
        'keep TotemFEDInfos_totemRPRawToDigi_*_*',
        'keep TotemRPDigiedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemRPRawToDigi_*_*',
        'keep TotemRPClusteredmDetSetVector_totemRPClusterProducer_*_*',
        'keep TotemRPRecHitedmDetSetVector_totemRPRecHitProducer_*_*',
        'keep TotemRPUVPatternedmDetSetVector_totemRPUVPatternFinder_*_*',
        'keep TotemRPLocalTrackedmDetSetVector_totemRPLocalTrackFitter_*_*',
        'keep TotemFEDInfos_totemT2Digis_*_*',
        'keep TotemT2DigiedmNewDetSetVector_totemT2Digis_*_*',
        'keep TotemVFATStatusedmDetSetVector_totemT2Digis_*_*',
        'keep TotemFEDInfos_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondDigiedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep TotemVFATStatusedmDetSetVector_ctppsDiamondRawToDigi_*_*',
        'keep CTPPSDiamondRecHitedmDetSetVector_ctppsDiamondRecHits_*_*',
        'keep CTPPSDiamondLocalTrackedmDetSetVector_ctppsDiamondLocalTracks_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_diamondSampicLocalTracks_*_*',
        'keep TotemTimingDigiedmDetSetVector_totemTimingRawToDigi_*_*',
        'keep TotemTimingRecHitedmDetSetVector_totemTimingRecHits_*_*',
        'keep TotemTimingLocalTrackedmDetSetVector_totemTimingLocalTracks_*_*',
        'keep CTPPSPixelDigiedmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelDataErroredmDetSetVector_ctppsPixelDigis_*_*',
        'keep CTPPSPixelClusteredmDetSetVector_ctppsPixelClusters_*_*',
        'keep CTPPSPixelRecHitedmDetSetVector_ctppsPixelRecHits_*_*',
        'keep CTPPSPixelLocalTrackedmDetSetVector_ctppsPixelLocalTracks_*_*',
        'keep CTPPSLocalTrackLites_ctppsLocalTrackLiteProducer_*_*',
        'keep recoForwardProtons_ctppsProtons_*_*'
    )
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*'
    )
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_reducedEcalRecHitsEB_*_*',
        'keep *_reducedEcalRecHitsEE_*_*',
        'keep *_reducedEcalRecHitsES_*_*',
        'keep *_interestingEcalDetId*_*_*',
        'keep *_ecalWeightUncalibRecHit_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5*_*_*',
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*'
    )
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hybridSuperClusters_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep *_multi5x5SuperClusters_*_*',
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep *_particleFlowSuperClusterECAL_*_*',
        'keep *_particleFlowSuperClusterOOTECAL_*_*',
        'drop recoClusterShapes_*_*_*',
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*',
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*',
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*',
        'keep *_selectDigi_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*',
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*',
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*',
        'keep recoCaloClusters_hybridSuperClusters_*_*',
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*',
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*',
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*',
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterOOTECAL_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterOOTECAL_*_*'
    )
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*'
    )
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_gsfElectronCores_*_*',
        'keep *_gsfElectrons_*_*',
        'keep *_uncleanedOnlyGsfElectronCores_*_*',
        'keep *_uncleanedOnlyGsfElectrons_*_*',
        'keep *_eidRobustLoose_*_*',
        'keep *_eidRobustTight_*_*',
        'keep *_eidRobustHighEnergy_*_*',
        'keep *_eidLoose_*_*',
        'keep *_eidTight_*_*',
        'keep *_egmGedGsfElectronPFPileUpIsolation_*_*',
        'keep *_egmGedGsfElectronPFNoPileUpIsolation_*_*',
        'keep *_egmGsfElectronIDs_*_*',
        'keep *_egmPhotonIDs_*_*',
        'keep *_conversions_*_*',
        'drop *_conversions_uncleanedConversions_*',
        'keep *_mustacheConversions_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep *_photonCore_*_*',
        'keep *_photons_*_*',
        'keep *_mustachePhotonCore_*_*',
        'keep *_mustachePhotons_*_*',
        'keep *_ootPhotonCore_*_*',
        'keep *_ootPhotons_*_*',
        'keep *_allConversions_*_*',
        'keep *_allConversionsOldEG_*_*',
        'keep *_ckfOutInTracksFromConversions_*_*',
        'keep *_ckfInOutTracksFromConversions_*_*',
        'keep *_uncleanedOnlyAllConversions_*_*',
        'keep *_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep *_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*'
    )
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_gedPhotonCore_*_*',
        'keep *_gedPhotons_*_*',
        'keep recoPhotons_mustachePhotons_*_*',
        'keep recoPhotonCores_mustachePhotonCore_*_*',
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep recoGsfElectronCores_gsfElectronCores_*_*',
        'keep recoGsfElectronCores_gedGsfElectronCores_*_*',
        'keep recoGsfElectrons_gsfElectrons_*_*',
        'keep recoGsfElectrons_gedGsfElectrons_*_*',
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*',
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*',
        'keep floatedmValueMap_eidRobustLoose_*_*',
        'keep floatedmValueMap_eidRobustTight_*_*',
        'keep floatedmValueMap_eidRobustHighEnergy_*_*',
        'keep floatedmValueMap_eidLoose_*_*',
        'keep floatedmValueMap_eidTight_*_*',
        'keep *_egmGedGsfElectronPFIsolation_*_*',
        'keep recoPhotonCores_gedPhotonCore_*_*',
        'keep recoPhotons_gedPhotons_*_*',
        'keep *_particleBasedIsolation_*_*',
        'keep recoPhotonCores_photonCore_*_*',
        'keep recoPhotons_photons_*_*',
        'keep recoPhotonCores_ootPhotonCore_*_*',
        'keep recoPhotons_ootPhotons_*_*',
        'keep recoConversions_conversions_*_*',
        'drop recoConversions_conversions_uncleanedConversions_*',
        'keep recoConversions_mustacheConversions_*_*',
        'keep *_gsfTracksOpenConversions_*_*',
        'keep recoConversions_allConversions_*_*',
        'keep recoConversions_allConversionsOldEG_*_*',
        'keep recoTracks_ckfOutInTracksFromConversions_*_*',
        'keep recoTracks_ckfInOutTracksFromConversions_*_*',
        'keep recoConversions_uncleanedOnlyAllConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*',
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*',
        'keep *_PhotonIDProd_*_*',
        'keep *_PhotonIDProdGED_*_*',
        'keep *_hfRecoEcalCandidate_*_*',
        'keep *_hfEMClusters_*_*',
        'keep *_gedGsfElectronCores_*_*',
        'keep *_gedGsfElectrons_*_*',
        'keep recoCaloClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep recoGsfElectrons_lowPtGsfElectrons_*_*',
        'keep recoGsfElectronCores_lowPtGsfElectronCores_*_*',
        'keep recoGsfTracks_lowPtGsfEleGsfTracks_*_*',
        'keep *_lowPtGsfToTrackLinks_*_*',
        'keep recoSuperClusters_lowPtGsfElectronSuperClusters_*_*',
        'keep floatedmValueMap_lowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_rekeyLowPtGsfElectronSeedValueMaps_*_*',
        'keep floatedmValueMap_lowPtGsfElectronID_*_*'
    )
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*'
    )
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoGenJets_ak*_*_*',
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*'
    )
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4GenJets_*_*',
        'keep *_ak8GenJets_*_*',
        'keep *_ak4GenJetsNoNu_*_*',
        'keep *_ak8GenJetsNoNu_*_*',
        'keep *_genParticle_*_*'
    )
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*'
    )
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*'
    )
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloJets_*_*_*',
        'keep recoPFJets_*_*_*',
        'keep recoTrackJets_*_*_*',
        'keep recoJPTJets_*_*_*',
        'keep recoBasicJets_*_*_*',
        'keep *_kt4JetTracksAssociatorAtVertex_*_*',
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_kt4JetExtender_*_*',
        'keep *_ak7JetTracksAssociatorAtVertex*_*_*',
        'keep *_ak7JetTracksAssociatorAtCaloFace*_*_*',
        'keep *_ak7JetExtender_*_*',
        'keep *_kt4CaloJets_*_*',
        'keep *_kt6CaloJets_*_*',
        'keep *_ak5CaloJets_*_*',
        'keep *_ak7CaloJets_*_*',
        'keep *_kt4PFJets_*_*',
        'keep *_kt6PFJets_*_*',
        'keep *_ak5PFJets_*_*',
        'keep *_ak7PFJets_*_*',
        'keep *_kt4TrackJets_*_*',
        'keep *_ca*Mass_*_*',
        'keep *_ak*Mass_*_*',
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4CaloJets_*_*',
        'keep *_ak4PFJets_*_*',
        'keep *_ak4TrackJets_*_*',
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*',
        'keep *_towerMaker_*_*',
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*',
        'keep *_ak5CastorJets_*_*',
        'keep *_ak7CastorJets_*_*',
        'keep recoCaloJets_ak4CaloJets_*_*',
        'keep *_ak4CaloJets_rho_*',
        'keep *_ak4CaloJets_sigma_*',
        'keep *_ak4PFJetsCHS_*_*',
        'keep floatedmValueMap_puppi_*_*',
        'keep *_ak4PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppi_*_*',
        'keep *_ak8PFJetsPuppiSoftDrop_*_*',
        'keep recoPFJets_ak4PFJets_*_*',
        'keep *_ak4PFJets_rho_*',
        'keep *_ak4PFJets_sigma_*',
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*',
        'keep *_caloTowers_*_*',
        'keep *_CastorTowerReco_*_*',
        'keep *_ak4JetTracksAssociatorAtVertex_*_*',
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*',
        'keep *_ak4JetTracksAssociatorExplicit_*_*',
        'keep *_ak4JetExtender_*_*',
        'keep *_ak4JetID_*_*',
        'keep recoBasicJets_ak5CastorJets_*_*',
        'keep *_ak5CastorJets_rho_*',
        'keep *_ak5CastorJets_sigma_*',
        'keep *_ak5CastorJetID_*_*',
        'keep recoBasicJets_ak7CastorJets_*_*',
        'keep *_ak7CastorJets_rho_*',
        'keep *_ak7CastorJets_sigma_*',
        'keep *_ak7CastorJetID_*_*',
        'keep *_fixedGridRhoAll_*_*',
        'keep *_fixedGridRhoFastjetAll_*_*',
        'keep *_fixedGridRhoFastjetAllTmp_*_*',
        'keep *_fixedGridRhoFastjetCentral_*_*',
        'keep *_fixedGridRhoFastjetAllCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralCalo_*_*',
        'keep *_fixedGridRhoFastjetCentralChargedPileUp_*_*',
        'keep *_fixedGridRhoFastjetCentralNeutral_*_*',
        'keep *_ak8PFJetsPuppiSoftDropMass_*_*'
    )
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*'
    )
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*',
        'keep ZDCDataFramesSorted_*Digis_*_*',
        'keep ZDCRecHitsSorted_*_*_*',
        'keep HcalUnpackerReport_*_*_*',
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*',
        'keep *_ecalMultiFitUncalibRecHit_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*'
    )
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hbhereco_*_*',
        'keep *_hbheprereco_*_*',
        'keep *_hfprereco_*_*',
        'keep *_hfreco_*_*',
        'keep *_horeco_*_*',
        'keep HBHERecHitsSorted_hbherecoMB_*_*',
        'keep HORecHitsSorted_horecoMB_*_*',
        'keep HFRecHitsSorted_hfrecoMB_*_*',
        'keep ZDCDataFramesSorted_hcalDigis_*_*',
        'keep ZDCDataFramesSorted_castorDigis_*_*',
        'keep QIE10DataFrameHcalDataFrameContainer_hcalDigis_ZDC_*',
        'keep ZDCRecHitsSorted_zdcreco_*_*',
        'keep ZDCRecHitsSorted_zdcrecoRun3_*_*',
        'keep *_castorreco_*_*',
        'keep *_reducedHcalRecHits_*_*',
        'keep HcalUnpackerReport_castorDigis_*_*',
        'keep HcalUnpackerReport_hcalDigiAlCaMB_*_*',
        'keep HcalUnpackerReport_hcalDigis_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*'
    )
)

process.RecoLocalFastTimeAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalFastTimeFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mtdUncalibratedRecHits_*_*',
        'keep *_mtdTrackingRecHits_*_*',
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*'
    )
)

process.RecoLocalFastTimeRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mtdRecHits_*_*',
        'keep *_mtdClusters_*_*'
    )
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*'
    )
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*'
    )
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_dt1DRecHits_*_*',
        'keep *_dt1DCosmicRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_dt4DSegments_*_*',
        'keep *_dt4DCosmicSegments_*_*',
        'keep *_cscSegments_*_*',
        'keep *_rpcRecHits_*_*',
        'keep *_dt1DRecHits_*_*',
        'keep *_csc2DRecHits_*_*',
        'keep *_gemRecHits_*_*',
        'keep *_gemSegments_*_*'
    )
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep ClusterSummary_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_clusterSummaryProducer_*_*',
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*'
    )
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep DetIds_siStripDigis_*_*',
        'keep DetIdedmEDCollection_siPixelDigis_*_*',
        'keep PixelFEDChanneledmNewDetSetVector_siPixelDigis_*_*',
        'keep *_siPixelClusters_*_*',
        'keep *_siStripClusters_*_*',
        'keep ClusterSummary_clusterSummaryProducer_*_*'
    )
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *HaloData_*_*_*',
        'keep *BeamHaloSummary_BeamHaloSummary_*_*',
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoHcalNoiseRBXs_hcalnoise_*_*',
        'keep recoEcalHaloData_EcalHaloData_*_*',
        'keep recoHcalHaloData_HcalHaloData_*_*',
        'keep recoCaloMETs_caloMet_*_*',
        'keep recoCaloMETs_caloMetBE_*_*',
        'keep recoCaloMETs_caloMetBEFO_*_*',
        'keep recoCaloMETs_caloMetM_*_*',
        'keep recoPFMETs_pfMet_*_*',
        'keep recoPFMETs_pfChMet_*_*',
        'keep floatedmValueMap_puppiNoLep_*_*',
        'keep recoPFMETs_pfMetPuppi_*_*',
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*',
        'keep HcalNoiseSummary_hcalnoise_*_*',
        'keep recoGlobalHaloData_GlobalHaloData_*_*',
        'keep recoCSCHaloData_CSCHaloData_*_*',
        'keep recoBeamHaloSummary_BeamHaloSummary_*_*'
    )
)

process.RecoMTDAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMTDFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMTDRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrack*_trackExtenderWithMTD_*_*',
        'keep TrackingRecHitsOwned_trackExtenderWithMTD_*_*',
        'keep *edmValueMap_trackExtenderWithMTD_*_*',
        'keep *_mtdTrackQualityMVA_*_*'
    )
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*'
    )
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muParamGlobalIsoDepositGsTk_*_*',
        'keep *_muParamGlobalIsoDepositCalEcal_*_*',
        'keep *_muParamGlobalIsoDepositCalHcal_*_*',
        'keep *_muParamGlobalIsoDepositCtfTk_*_*',
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muParamGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_MuonSeed_*_*',
        'keep *_ancientMuonSeed_*_*',
        'keep *_displacedMuonSeeds_*_*',
        'keep TrackingRecHitsOwned_globalMuons_*_*',
        'keep TrackingRecHitsOwned_tevMuons_*_*',
        'keep *_CosmicMuonSeed_*_*',
        'keep recoTrackExtras_cosmicMuons_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons_*_*',
        'keep recoTrackExtras_cosmicMuons1Leg_*_*',
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*',
        'keep recoTracks_cosmicsVetoTracks_*_*',
        'keep recoMuons_muons_*_*',
        'keep booledmValueMap_muons_*_*',
        'keep doubleedmValueMap_muons_muPFMean*_*',
        'keep doubleedmValueMap_muons_muPFSum*_*',
        'keep *_muons_muonShowerInformation_*',
        'keep recoMuonTimeExtraedmValueMap_muons_*_*',
        'keep recoMuonCosmicCompatibilityedmValueMap_muons_*_*',
        'keep uintedmValueMap_muons_*_*',
        'keep *_particleFlow_muons_*',
        'keep recoMuons_displacedMuons_*_*',
        'keep booledmValueMap_displacedMuons_*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFMean*_*',
        'keep doubleedmValueMap_displacedMuons_dispMuPFSum*_*',
        'keep recoMuonTimeExtraedmValueMap_displacedMuons_*_*',
        'keep uintedmValueMap_displacedMuons_*_*',
        'keep *_particleFlow_displacedMuons_*',
        'keep recoTracks_standAloneMuons_*_*',
        'keep recoTrackExtras_standAloneMuons_*_*',
        'keep TrackingRecHitsOwned_standAloneMuons_*_*',
        'keep recoTracks_globalMuons_*_*',
        'keep recoTrackExtras_globalMuons_*_*',
        'keep recoTracks_tevMuons_*_*',
        'keep recoTrackExtras_tevMuons_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_displacedTracks_*_*',
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*',
        'keep recoTracks_displacedGlobalMuons_*_*',
        'keep recoTrackExtras_displacedGlobalMuons_*_*',
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*',
        'keep recoTracks_cosmicMuons_*_*',
        'keep recoMuons_muonsFromCosmics_*_*',
        'keep recoTracks_cosmicMuons1Leg_*_*',
        'keep recoMuons_muonsFromCosmics1Leg_*_*',
        'keep recoTracks_refittedStandAloneMuons_*_*',
        'keep recoTrackExtras_refittedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*',
        'keep recoTracks_displacedStandAloneMuons__*',
        'keep recoTrackExtras_displacedStandAloneMuons_*_*',
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*',
        'keep *_muonReducedTrackExtras_*_*',
        'keep *_displacedMuonReducedTrackExtras_*_*',
        'keep *_muIsoDepositTk_*_*',
        'keep *_muIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muIsoDepositCalByAssociatorHits_*_*',
        'keep *_muIsoDepositJets_*_*',
        'keep *_muIsoDepositTkDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorTowersDisplaced_*_*',
        'keep *_muIsoDepositCalByAssociatorHitsDisplaced_*_*',
        'keep *_muIsoDepositJetsDisplaced_*_*',
        'keep *_muGlobalIsoDepositCtfTk_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*',
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*',
        'keep *_muGlobalIsoDepositJets_*_*'
    )
)

process.RecoParticleFlowAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*'
    )
)

process.RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*'
    )
)

process.RecoParticleFlowRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoPFClusters_particleFlowClusterECAL_*_*',
        'keep recoPFClusters_particleFlowClusterHCAL_*_*',
        'keep recoPFClusters_particleFlowClusterHO_*_*',
        'keep recoPFClusters_particleFlowClusterHF_*_*',
        'keep recoPFClusters_particleFlowClusterPS_*_*',
        'keep recoPFBlocks_particleFlowBlock_*_*',
        'keep recoPFCandidates_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlowTmp_electrons_*',
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*',
        'keep *_pfElectronTranslator_*_*',
        'keep *_pfPhotonTranslator_*_*',
        'keep *_trackerDrivenElectronSeeds_preid_*',
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*',
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*',
        'keep recoCaloClusters_particleFlowEGamma_*_*',
        'keep recoSuperClusters_particleFlowEGamma_*_*',
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*',
        'keep recoConversions_particleFlowEGamma_*_*',
        'keep recoPFCandidates_particleFlow_*_*',
        'keep recoPFCandidates_particleFlowTmp_AddedMuonsAndHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedCosmicsMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedFakeMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedHF_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughMuons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedPunchThroughNeutralHadrons_*',
        'keep recoPFCandidates_particleFlowTmp_CleanedTrackerAndGlobalMuons_*',
        'keep *_particleFlow_electrons_*',
        'keep *_particleFlow_photons_*',
        'keep *_particleFlow_muons_*',
        'keep recoCaloClusters_pfElectronTranslator_*_*',
        'keep recoPreshowerClusters_pfElectronTranslator_*_*',
        'keep recoSuperClusters_pfElectronTranslator_*_*',
        'keep recoCaloClusters_pfPhotonTranslator_*_*',
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*',
        'keep recoSuperClusters_pfPhotonTranslator_*_*',
        'keep recoPhotons_pfPhotonTranslator_*_*',
        'keep recoPhotonCores_pfPhotonTranslator_*_*',
        'keep recoConversions_pfPhotonTranslator_*_*',
        'keep *_particleFlowPtrs_*_*',
        'keep *_particleFlowTmpPtrs_*_*',
        'keep *_chargedHadronPFTrackIsolation_*_*'
    )
)

process.RecoPixelVertexingFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*'
    )
)

process.RecoPixelVertexingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_pixelTracks_*_*',
        'keep *_pixelVertices_*_*'
    )
)

process.RecoTauTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*'
    )
)

process.RecoTauTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ak4PFJetsRecoTauPiZeros_*_*',
        'keep *_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauDiscrimination*_*_*',
        'keep *_hpsPFTau*PtSum_*_*',
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*'
    )
)

process.RecoTauTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoRecoTauPiZeros_hpsPFTauProducer_pizeros_*',
        'keep recoPFTaus_hpsPFTauProducer_*_*',
        'keep *_hpsPFTauBasicDiscriminators_*_*',
        'keep *_hpsPFTauBasicDiscriminatorsdR03_*_*',
        'keep *_hpsPFTauDiscriminationByDeadECALElectronRejection_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFinding_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingNewDMs_*_*',
        'keep *_hpsPFTauDiscriminationByDecayModeFindingOldDMs_*_*',
        'keep *_hpsPFTauDiscriminationByMuonRejection3_*_*',
        'keep *_hpsPFTauTransverseImpactParameters_*_*'
    )
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTrackExtras_generalTracks_*_*',
        'keep TrackingRecHitsOwned_generalTracks_*_*',
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*',
        'keep uints_extraFromSeeds_*_*',
        'keep recoTrackExtras_beamhaloTracks_*_*',
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*',
        'keep recoTrackExtras_conversionStepTracks_*_*',
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*',
        'keep *_ctfPixelLess_*_*',
        'keep *_dedxTruncated40_*_*',
        'keep recoTracks_generalTracks_*_*',
        'keep recoTracks_conversionStepTracks_*_*',
        'keep recoTracks_beamhaloTracks_*_*',
        'keep recoTracks_ctfPixelLess_*_*',
        'keep *_dedxHarmonic2_*_*',
        'keep *_dedxPixelHarmonic2_*_*',
        'keep *_dedxHitInfo_*_*',
        'keep *_trackExtrapolator_*_*',
        'keep *_generalTracks_MVAValues_*',
        'keep *_generalTracks_MVAVals_*'
    )
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*'
    )
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*'
    )
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep  *_offlinePrimaryVertices__*',
        'keep *_offlinePrimaryVerticesWithBS_*_*',
        'keep *_offlinePrimaryVerticesFromCosmicTracks_*_*',
        'keep *_nuclearInteractionMaker_*_*',
        'keep *_generalV0Candidates_*_*',
        'keep *_inclusiveSecondaryVertices_*_*'
    )
)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simEcalDigis_*_*',
        'keep *_simEcalPreshowerDigis_*_*',
        'keep *_simEcalTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitiveDigis_*_*',
        'keep *_simEcalEBTriggerPrimitivePhase2Digis_*_*',
        'keep *_simHcalDigis_*_*',
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*',
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*',
        'keep *_simHcalTriggerPrimitiveDigis_*_*',
        'keep *_mix_HcalSamples_*',
        'keep *_mixData_HcalSamples_*',
        'keep *_mix_HcalHits_*',
        'keep *_mixData_HcalHits_*',
        'keep *_DMHcalTriggerPrimitiveDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*'
    )
)

process.SimCalorimetryPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep EBDigiCollection_simEcalDigis_*_*',
        'keep EEDigiCollection_simEcalDigis_*_*',
        'keep ESDigiCollection_simEcalUnsuppressedDigis_*_*',
        'keep *_simHcalDigis_*_*'
    )
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep EBSrFlagsSorted_simEcalDigis_*_*',
        'keep EESrFlagsSorted_simEcalDigis_*_*',
        'keep *_simHcalUnsuppressedDigis_*_*'
    )
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingRAW = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimFastTimingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreHLTAODSIM = cms.PSet(
    outputCommands = cms.untracked.vstring('keep SimVertexs_g4SimHits_*_*')
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_g4SimHits_*_*',
        'keep edmHepMCProduct_source_*_*'
    )
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep edmHepMCProduct_source_*_*',
        'keep SimTracks_g4SimHits_*_*',
        'keep SimVertexs_g4SimHits_*_*'
    )
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*'
    )
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_trackingtruthprod_*_*',
        'drop *_electrontruth_*_*',
        'keep *_mix_MergedTrackTruth_*',
        'keep CrossingFramePlaybackInfoNew_*_*_*'
    )
)

process.SimGeneralPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep CrossingFramePlaybackInfoNew_*_*_*',
        'keep PileupSummaryInfos_*_*_*',
        'keep int6stdbitsetstdpairs_*_AffectedAPVList_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*',
        'keep *_mix_MergedTrackTruth_*'
    )
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PileupSummaryInfos_*_*_*',
        'keep int_*_bunchSpacing_*',
        'keep *_genPUProtons_*_*'
    )
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muonSimClassifier_*_*')
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonDTDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *_simMuonGEMDigis_*_*'
    )
)

process.SimMuonPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_mix_g4SimHitsMuonDTHits_*',
        'keep *_mix_g4SimHitsMuonCSCHits_*',
        'keep *_mix_g4SimHitsMuonRPCHits_*',
        'keep *_mix_g4SimHitsMuonGEMHits_*'
    )
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_simMuonCSCDigis_*_*',
        'keep *_simMuonRPCDigis_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*'
    )
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*',
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*',
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*',
        'keep *_muonSimClassifier_*_*',
        'keep *DigiSimLinkedmDetSetVector_simMuonGEMDigis_*_*'
    )
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*'
    )
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*'
    )
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_*_*',
        'drop *_mix_simSiPixelDigis*_*',
        'drop *_mix_simSiStripDigis*_*',
        'keep *_allTrackMCMatch_*_*',
        'keep *_trackingParticleRecoTrackAsssociation_*_*',
        'keep *_assoc2secStepTk_*_*',
        'keep *_assoc2thStepTk_*_*',
        'keep *_assoc2GsfTracks_*_*',
        'keep *_assocOutInConversionTracks_*_*',
        'keep *_assocInOutConversionTracks_*_*',
        'keep *_TTClusterAssociatorFromPixelDigis_*_*',
        'keep *_TTStubAssociatorFromPixelDigis_*_*',
        'keep *_simHitTPAssocProducer_*_*'
    )
)

process.SimTrackerPREMIX = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_simSiPixelDigis_*_*',
        'keep *_simSiStripDigis_ZeroSuppressed_*',
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*',
        'keep *_mix_AffectedAPVList_*'
    )
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackingParticles_*_*',
        'keep *_prunedDigiSimLinks_*_*'
    )
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_allTrackMCMatch_*_*',
        'keep *_prunedTrackMCMatch_*_*'
    )
)

process.SubJetParameters = cms.PSet(
    nFilt = cms.int32(2),
    rcut_factor = cms.double(0.5),
    zcut = cms.double(0.1)
)

process.TICL_AOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.TICL_FEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*'
    )
)

process.TICL_FEVTHLT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_hltPfTICL_*_*',
        'keep *_hltTiclTracksters*_*_*',
        'keep *_hltTiclCandidate_*_*',
        'keep *_hltPfTICL_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep *_SimTau*_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*'
    )
)

process.TICL_RECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTrackstersMerge_*_*',
        'keep *_ticlTrackstersHFNoseTrkEM_*_*',
        'keep *_ticlTrackstersHFNoseEM_*_*',
        'keep *_ticlTrackstersHFNoseTrk_*_*',
        'keep *_ticlTrackstersHFNoseMIP_*_*',
        'keep *_ticlTrackstersHFNoseHAD_*_*',
        'keep *_ticlTrackstersHFNoseMerge_*_*',
        'keep *_pfTICL_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*'
    )
)

process.TICLv5_FEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_SimTau*_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*',
        'drop *_ticlTracksters*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTracksterLinks*_*_*',
        'keep *_ticlTracksterLinksSuperclustering*_*_*',
        'keep *_ticlCandidate_*_*'
    )
)

process.TICLv5_FEVTHLT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_hltTiclTracksters*_*_*',
        'keep *_hltTiclTrackstersCLUE3D*_*_*',
        'keep *_hltTiclTracksterLinks_*_*',
        'keep *_hltTiclCandidate_*_*',
        'keep *_hltPfTICL_*_*',
        'keep *_ticlSimTracksters_*_*',
        'keep *_ticlSimTICLCandidates_*_*',
        'keep *_ticlSimTrackstersFromCP_*_*',
        'keep CaloParticles_mix_*_*',
        'keep SimClusters_mix_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_SimClusterToCaloParticleAssociation*_*_*',
        'keep *_layerClusterSimClusterAssociationProducer_*_*',
        'keep *_layerClusterCaloParticleAssociationProducer_*_*',
        'keep *_layerClusterSimTracksterAssociationProducer_*_*',
        'keep *_SimTau*_*_*',
        'keep *_allTrackstersToSimTrackstersAssociations*_*_*',
        'drop *_ticlTracksters*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTracksterLinks*_*_*',
        'keep *_ticlTracksterLinksSuperclustering*_*_*',
        'keep *_ticlCandidate_*_*'
    )
)

process.TICLv5_RECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'drop *_ticlTracksters*_*_*',
        'keep *_ticlTrackstersCLUE3DHigh_*_*',
        'keep *_ticlTracksterLinks*_*_*',
        'keep *_ticlTracksterLinksSuperclustering*_*_*',
        'keep *_ticlCandidate_*_*'
    )
)

process.TcdsEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_tcdsDigis_*_*')
)

process.TrackingToolsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*'
    )
)

process.TrackingToolsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_electronGsfTracks_*_*',
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*'
    )
)

process.TrackingToolsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_CkfElectronCandidates_*_*',
        'keep *_GsfGlobalElectronTest_*_*',
        'keep *_electronMergedSeeds_*_*',
        'keep recoGsfTrackExtras_electronGsfTracks_*_*',
        'keep recoTrackExtras_electronGsfTracks_*_*',
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*',
        'keep recoTracks_GsfGlobalElectronTest_*_*',
        'keep recoGsfTracks_electronGsfTracks_*_*'
    )
)

process.combinedSecondaryVertexCommon = cms.PSet(
    SoftLeptonFlip = cms.bool(False),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)

process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('--conditions nevts:-1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

process.cutbased = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
        Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
    ),
    cutBased = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('cutbased')
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ecalMultiFitUncalibRecHit_*_*',
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*'
    )
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring(
        'keep *_ecalPreshowerRecHit_*_*',
        'keep *_ecalRecHit_*_*',
        'keep *_ecalCompactTrigPrim_*_*',
        'keep *_ecalTPSkim_*_*',
        'keep EBSrFlagsSorted_ecalDigis__*',
        'keep EESrFlagsSorted_ecalDigis__*'
    )
)

process.electron_id_modules_WorkingPoints_nanoAOD = cms.PSet(
    WorkingPoints = cms.vstring(
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-veto',
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-loose',
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-medium',
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-tight'
    ),
    modules = cms.vstring(
        'RecoEgamma.ElectronIdentification.Identification.heepElectronID_HEEPV70_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Summer16UL_ID_ISO_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Summer17UL_ID_ISO_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Summer18UL_ID_ISO_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Winter22_HZZ_V1_cff',
        'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V2_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Fall17_iso_V2_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Fall17_noIso_V2_cff',
        'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Winter22_122X_V1_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_RunIIIWinter22_iso_V1_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_RunIIIWinter22_noIso_V1_cff'
    )
)

process.electron_id_modules_WorkingPoints_nanoAOD_Run2 = cms.PSet(
    WorkingPoints = cms.vstring(
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-veto',
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-loose',
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-medium',
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-tight'
    ),
    modules = cms.vstring(
        'RecoEgamma.ElectronIdentification.Identification.cutBasedElectronID_Fall17_94X_V2_cff',
        'RecoEgamma.ElectronIdentification.Identification.heepElectronID_HEEPV70_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Fall17_iso_V2_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Fall17_noIso_V2_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Summer16UL_ID_ISO_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Summer17UL_ID_ISO_cff',
        'RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Summer18UL_ID_ISO_cff'
    )
)

process.full_102x_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt010_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt010_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt1020_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt1020_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt1020_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt2030_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt2030_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt2030_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt3040_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
        Pt3040_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
        Pt3040_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01),
        Pt4050_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
        Pt4050_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
        Pt4050_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_102X_Eta0p0To2p5_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_102X_Eta2p5To2p75_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_102X_Eta2p75To3p0_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_102X_Eta3p0To5p0_chs_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_102x_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt010_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt010_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt1020_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt1020_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt1020_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt2030_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt2030_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt2030_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt3040_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
    Pt3040_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
    Pt3040_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01),
    Pt4050_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
    Pt4050_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
    Pt4050_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01)
)

process.full_106x_UL16APV_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
        Pt010_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
        Pt010_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
        Pt1020_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
        Pt1020_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
        Pt1020_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
        Pt2030_Loose = cms.vdouble(-0.9, -0.57, -0.43, -0.42),
        Pt2030_Medium = cms.vdouble(0.62, -0.39, -0.32, -0.29),
        Pt2030_Tight = cms.vdouble(0.87, -0.08, -0.16, -0.12),
        Pt3040_Loose = cms.vdouble(-0.71, -0.36, -0.29, -0.23),
        Pt3040_Medium = cms.vdouble(0.86, -0.1, -0.15, -0.08),
        Pt3040_Tight = cms.vdouble(0.94, 0.24, 0.05, 0.1),
        Pt4050_Loose = cms.vdouble(-0.42, -0.09, -0.14, -0.02),
        Pt4050_Medium = cms.vdouble(0.93, 0.19, 0.04, 0.12),
        Pt4050_Tight = cms.vdouble(0.97, 0.48, 0.26, 0.29)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16APV_Eta0p0To2p5_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16APV_Eta2p5To2p75_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16APV_Eta2p75To3p0_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16APV_Eta3p0To5p0_chs_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_106x_UL16APV_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
    Pt010_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
    Pt010_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
    Pt1020_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
    Pt1020_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
    Pt1020_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
    Pt2030_Loose = cms.vdouble(-0.9, -0.57, -0.43, -0.42),
    Pt2030_Medium = cms.vdouble(0.62, -0.39, -0.32, -0.29),
    Pt2030_Tight = cms.vdouble(0.87, -0.08, -0.16, -0.12),
    Pt3040_Loose = cms.vdouble(-0.71, -0.36, -0.29, -0.23),
    Pt3040_Medium = cms.vdouble(0.86, -0.1, -0.15, -0.08),
    Pt3040_Tight = cms.vdouble(0.94, 0.24, 0.05, 0.1),
    Pt4050_Loose = cms.vdouble(-0.42, -0.09, -0.14, -0.02),
    Pt4050_Medium = cms.vdouble(0.93, 0.19, 0.04, 0.12),
    Pt4050_Tight = cms.vdouble(0.97, 0.48, 0.26, 0.29)
)

process.full_106x_UL16_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
        Pt010_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
        Pt010_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
        Pt1020_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
        Pt1020_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
        Pt1020_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
        Pt2030_Loose = cms.vdouble(-0.9, -0.57, -0.43, -0.42),
        Pt2030_Medium = cms.vdouble(0.62, -0.39, -0.32, -0.29),
        Pt2030_Tight = cms.vdouble(0.87, -0.08, -0.16, -0.12),
        Pt3040_Loose = cms.vdouble(-0.71, -0.36, -0.29, -0.23),
        Pt3040_Medium = cms.vdouble(0.86, -0.1, -0.15, -0.08),
        Pt3040_Tight = cms.vdouble(0.94, 0.24, 0.05, 0.1),
        Pt4050_Loose = cms.vdouble(-0.42, -0.09, -0.14, -0.02),
        Pt4050_Medium = cms.vdouble(0.93, 0.19, 0.04, 0.12),
        Pt4050_Tight = cms.vdouble(0.97, 0.48, 0.26, 0.29)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16_Eta0p0To2p5_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16_Eta2p5To2p75_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16_Eta2p75To3p0_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16_Eta3p0To5p0_chs_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_106x_UL16_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
    Pt010_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
    Pt010_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
    Pt1020_Loose = cms.vdouble(-0.95, -0.7, -0.52, -0.49),
    Pt1020_Medium = cms.vdouble(0.2, -0.56, -0.43, -0.38),
    Pt1020_Tight = cms.vdouble(0.71, -0.32, -0.3, -0.22),
    Pt2030_Loose = cms.vdouble(-0.9, -0.57, -0.43, -0.42),
    Pt2030_Medium = cms.vdouble(0.62, -0.39, -0.32, -0.29),
    Pt2030_Tight = cms.vdouble(0.87, -0.08, -0.16, -0.12),
    Pt3040_Loose = cms.vdouble(-0.71, -0.36, -0.29, -0.23),
    Pt3040_Medium = cms.vdouble(0.86, -0.1, -0.15, -0.08),
    Pt3040_Tight = cms.vdouble(0.94, 0.24, 0.05, 0.1),
    Pt4050_Loose = cms.vdouble(-0.42, -0.09, -0.14, -0.02),
    Pt4050_Medium = cms.vdouble(0.93, 0.19, 0.04, 0.12),
    Pt4050_Tight = cms.vdouble(0.97, 0.48, 0.26, 0.29)
)

process.full_106x_UL17_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
        Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
        Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
        Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
        Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
        Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
        Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
        Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
        Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
        Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
        Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
        Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
        Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
        Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
        Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL17_Eta0p0To2p5_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL17_Eta2p5To2p75_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL17_Eta2p75To3p0_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL17_Eta3p0To5p0_chs_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_106x_UL17_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
    Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
    Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
    Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
    Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
    Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
    Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
    Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
    Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
    Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
    Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
    Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
    Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
    Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
    Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
)

process.full_106x_UL18_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
        Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
        Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
        Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
        Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
        Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
        Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
        Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
        Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
        Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
        Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
        Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
        Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
        Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
        Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta0p0To2p5_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p5To2p75_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p75To3p0_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta3p0To5p0_chs_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_106x_UL18_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
    Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
    Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
    Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
    Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
    Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
    Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
    Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
    Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
    Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
    Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
    Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
    Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
    Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
    Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
)

process.full_133x_Winter24_puppi_v18_wp = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
        Pt010_Medium = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
        Pt010_Tight = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
        Pt1020_Loose = cms.vdouble(-0.723, -0.392, -0.277, -0.516),
        Pt1020_Medium = cms.vdouble(-0.2, -0.068, -0.158, -0.384),
        Pt1020_Tight = cms.vdouble(0.038, 0.219, -0.22, -0.254),
        Pt2030_Loose = cms.vdouble(-0.548, -0.347, -0.313, -0.489),
        Pt2030_Medium = cms.vdouble(-0.109, -0.179, -0.293, -0.322),
        Pt2030_Tight = cms.vdouble(0.033, 0.06, -0.154, -0.154),
        Pt3040_Loose = cms.vdouble(-0.413, -0.289, -0.322, -0.438),
        Pt3040_Medium = cms.vdouble(-0.043, -0.124, -0.259, -0.286),
        Pt3040_Tight = cms.vdouble(0.056, 0.103, -0.159, -0.109),
        Pt4050_Loose = cms.vdouble(-0.279, -0.219, -0.279, -0.384),
        Pt4050_Medium = cms.vdouble(-0.034, -0.071, -0.198, -0.235),
        Pt4050_Tight = cms.vdouble(0.043, 0.127, -0.067, -0.059)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta0p0To2p5_puppiV18_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta2p5To2p75_puppiV18_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta2p75To3p0_puppiV18_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta3p0To5p0_puppiV18_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_133x_Winter24_puppiv18_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
    Pt010_Medium = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
    Pt010_Tight = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
    Pt1020_Loose = cms.vdouble(-0.723, -0.392, -0.277, -0.516),
    Pt1020_Medium = cms.vdouble(-0.2, -0.068, -0.158, -0.384),
    Pt1020_Tight = cms.vdouble(0.038, 0.219, -0.22, -0.254),
    Pt2030_Loose = cms.vdouble(-0.548, -0.347, -0.313, -0.489),
    Pt2030_Medium = cms.vdouble(-0.109, -0.179, -0.293, -0.322),
    Pt2030_Tight = cms.vdouble(0.033, 0.06, -0.154, -0.154),
    Pt3040_Loose = cms.vdouble(-0.413, -0.289, -0.322, -0.438),
    Pt3040_Medium = cms.vdouble(-0.043, -0.124, -0.259, -0.286),
    Pt3040_Tight = cms.vdouble(0.056, 0.103, -0.159, -0.109),
    Pt4050_Loose = cms.vdouble(-0.279, -0.219, -0.279, -0.384),
    Pt4050_Medium = cms.vdouble(-0.034, -0.071, -0.198, -0.235),
    Pt4050_Tight = cms.vdouble(0.043, 0.127, -0.067, -0.059)
)

process.full_81x_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt010_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt010_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt1020_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt1020_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt1020_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt2030_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt2030_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt2030_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt3040_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
        Pt3040_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
        Pt3040_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01),
        Pt4050_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
        Pt4050_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
        Pt4050_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'nParticles',
                'nCharged',
                'majW',
                'minW',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'ptD',
                'beta',
                'pull',
                'jetR',
                'jetRchg'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_80XvarFix_Eta0to2p5_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'nParticles',
                'nCharged',
                'majW',
                'minW',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'ptD',
                'beta',
                'pull',
                'jetR',
                'jetRchg'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_80XvarFix_Eta2p5to2p75_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'nParticles',
                'nCharged',
                'majW',
                'minW',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'ptD',
                'beta',
                'pull',
                'jetR',
                'jetRchg'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_80XvarFix_Eta2p75to3_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'nParticles',
                'majW',
                'minW',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'ptD',
                'pull',
                'jetR'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_80XvarFix_Eta3to5_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_81x_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt010_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt010_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt1020_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt1020_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt1020_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt2030_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt2030_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt2030_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt3040_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
    Pt3040_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
    Pt3040_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01),
    Pt4050_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
    Pt4050_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
    Pt4050_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01)
)

process.full_94x_chs = cms.PSet(
    JetIdParams = cms.PSet(
        Pt010_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt010_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt010_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt1020_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt1020_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt1020_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt2030_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
        Pt2030_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
        Pt2030_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
        Pt3040_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
        Pt3040_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
        Pt3040_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01),
        Pt4050_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
        Pt4050_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
        Pt4050_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01)
    ),
    cutBased = cms.bool(False),
    etaBinnedWeights = cms.bool(True),
    impactParTkThreshold = cms.double(1.0),
    label = cms.string('full'),
    nEtaBins = cms.int32(4),
    tmvaMethod = cms.string('JetIDMVAHighPt'),
    tmvaSpectators = cms.vstring(
        'jetPt',
        'jetEta'
    ),
    trainings = cms.VPSet(
        cms.PSet(
            jEtaMax = cms.double(2.5),
            jEtaMin = cms.double(0.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_94X_Eta0p0To2p5_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(2.75),
            jEtaMin = cms.double(2.5),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_94X_Eta2p5To2p75_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(3.0),
            jEtaMin = cms.double(2.75),
            tmvaVariables = cms.vstring(
                'nvtx',
                'beta',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'jetRchg',
                'nParticles',
                'nCharged',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_94X_Eta2p75To3p0_chs_BDT.weights.xml.gz')
        ),
        cms.PSet(
            jEtaMax = cms.double(5.0),
            jEtaMin = cms.double(3.0),
            tmvaVariables = cms.vstring(
                'nvtx',
                'dR2Mean',
                'frac01',
                'frac02',
                'frac03',
                'frac04',
                'majW',
                'minW',
                'jetR',
                'nParticles',
                'ptD',
                'pull'
            ),
            tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_94X_Eta3p0To5p0_chs_BDT.weights.xml.gz')
        )
    ),
    version = cms.int32(-1)
)

process.full_94x_chs_wp = cms.PSet(
    Pt010_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt010_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt010_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt1020_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt1020_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt1020_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt2030_Loose = cms.vdouble(-0.97, -0.68, -0.53, -0.47),
    Pt2030_Medium = cms.vdouble(0.18, -0.55, -0.42, -0.36),
    Pt2030_Tight = cms.vdouble(0.69, -0.35, -0.26, -0.21),
    Pt3040_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
    Pt3040_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
    Pt3040_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01),
    Pt4050_Loose = cms.vdouble(-0.89, -0.52, -0.38, -0.3),
    Pt4050_Medium = cms.vdouble(0.61, -0.35, -0.23, -0.17),
    Pt4050_Tight = cms.vdouble(0.86, -0.1, -0.05, -0.01)
)

process.ghostTrackCommon = cms.PSet(
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig')
)

process.lowPtElectronModifier = cms.PSet(
    addExtraUserVars = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    conversions = cms.InputTag("gsfTracksOpenConversions","gsfTracksOpenConversions"),
    modifierName = cms.string('LowPtElectronModifier'),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)

process.lowPtRegressionModifier = cms.PSet(
    eleRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalOnly_05To50_mean"),
            ebLowEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalOnly_05To50_mean"),
            eeHighEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalOnly_05To50_mean"),
            eeLowEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalOnly_05To50_mean"),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(20.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalOnly_05To50_sigma"),
            ebLowEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalOnly_05To50_sigma"),
            eeHighEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalOnly_05To50_sigma"),
            eeLowEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalOnly_05To50_sigma"),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(20.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        ),
        epComb = cms.PSet(
            ecalTrkRegressionConfig = cms.PSet(
                ebHighEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalTrk_05To50_mean"),
                ebLowEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalTrk_05To50_mean"),
                eeHighEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalTrk_05To50_mean"),
                eeLowEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalTrk_05To50_mean"),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(20.0),
                rangeMaxHighEt = cms.double(2.0),
                rangeMaxLowEt = cms.double(2.0),
                rangeMinHighEt = cms.double(0.2),
                rangeMinLowEt = cms.double(0.2)
            ),
            ecalTrkRegressionUncertConfig = cms.PSet(
                ebHighEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalTrk_05To50_sigma"),
                ebLowEtForestName = cms.ESInputTag("","lowPtElectron_eb_ecalTrk_05To50_sigma"),
                eeHighEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalTrk_05To50_sigma"),
                eeLowEtForestName = cms.ESInputTag("","lowPtElectron_ee_ecalTrk_05To50_sigma"),
                forceHighEnergyTrainingIfSaturated = cms.bool(False),
                lowEtHighEtBoundary = cms.double(20.0),
                rangeMaxHighEt = cms.double(0.5),
                rangeMaxLowEt = cms.double(0.5),
                rangeMinHighEt = cms.double(0.0002),
                rangeMinLowEt = cms.double(0.0002)
            ),
            maxEPDiffInSigmaForComb = cms.double(15.0),
            maxEcalEnergyForComb = cms.double(200.0),
            maxRelTrkMomErrForComb = cms.double(10.0),
            minEOverPForComb = cms.double(0.025)
        )
    ),
    maxRawEnergyForLowPtEBSigma = cms.double(-1),
    maxRawEnergyForLowPtEESigma = cms.double(1200.0),
    modifierName = cms.string('EGRegressionModifierV3'),
    phoRegs = cms.PSet(
        ecalOnlyMean = cms.PSet(
            ebHighEtForestName = cms.ESInputTag("","photon_eb_ECALonly"),
            ebLowEtForestName = cms.ESInputTag("","photon_eb_ecalOnly_5To300_0p2To2_mean"),
            eeHighEtForestName = cms.ESInputTag("","photon_ee_ECALonly"),
            eeLowEtForestName = cms.ESInputTag("","photon_ee_ecalOnly_5To300_0p2To2_mean"),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(2.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(0.2)
        ),
        ecalOnlySigma = cms.PSet(
            ebHighEtForestName = cms.ESInputTag("","photon_eb_ECALonly_var"),
            ebLowEtForestName = cms.ESInputTag("","photon_eb_ecalOnly_5To300_0p0002To0p5_sigma"),
            eeHighEtForestName = cms.ESInputTag("","photon_ee_ECALonly_var"),
            eeLowEtForestName = cms.ESInputTag("","photon_ee_ecalOnly_5To300_0p0002To0p5_sigma"),
            forceHighEnergyTrainingIfSaturated = cms.bool(True),
            lowEtHighEtBoundary = cms.double(999999.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        )
    ),
    rhoTag = cms.InputTag("fixedGridRhoFastjetAll"),
    useBuggedHOverE = cms.bool(False),
    useClosestToCentreSeedCrysDef = cms.bool(False)
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(10),
    output = cms.optional.untracked.allowed(cms.int32,cms.PSet)
)

process.maxLuminosityBlocks = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)

process.mvaEleID_Fall17_iso_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Fall17IsoV1'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Fall17V1Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_5_2017_puinfo_iso_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_5_2017_puinfo_iso_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_5_2017_puinfo_iso_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_10_2017_puinfo_iso_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_10_2017_puinfo_iso_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_10_2017_puinfo_iso_BDT.weights.root'
    )
)

process.mvaEleID_Fall17_iso_V2_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Fall17IsoV2'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EE_10.weights.root'
    )
)

process.mvaEleID_Fall17_noIso_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Fall17NoIsoV1'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Fall17V1Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_5_2017_puinfo_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_5_2017_puinfo_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_5_2017_puinfo_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_10_2017_puinfo_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_10_2017_puinfo_BDT.weights.root',
        'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_10_2017_puinfo_BDT.weights.root'
    )
)

process.mvaEleID_Fall17_noIso_V2_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Fall17NoIsoV2'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EE_10.weights.root'
    )
)

process.mvaEleID_RunIIIWinter22_iso_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('RunIIIWinter22IsoV1'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EE_10.weights.root'
    )
)

process.mvaEleID_RunIIIWinter22_noIso_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('RunIIIWinter22NoIsoV1'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3NonIso.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EE_10.weights.root'
    )
)

process.mvaEleID_Spring16_GeneralPurpose_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'abs(superCluster.eta) < 0.800',
        'abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Spring16GeneralPurposeV1'),
    nCategories = cms.int32(3),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EE_10.weights.root'
    )
)

process.mvaEleID_Spring16_HZZ_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Spring16HZZV1'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EE_10.weights.root'
    )
)

process.mvaEleID_Summer16UL_ID_ISO_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. & abs(superCluster.eta) < 0.800',
        'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
        'pt < 10. & abs(superCluster.eta) >= 1.479',
        'pt >= 10. & abs(superCluster.eta) < 0.800',
        'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
        'pt >= 10. & abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Summer16ULIdIso'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EE_10.weights.root'
    )
)

process.mvaEleID_Summer17UL_ID_ISO_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. & abs(superCluster.eta) < 0.800',
        'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
        'pt < 10. & abs(superCluster.eta) >= 1.479',
        'pt >= 10. & abs(superCluster.eta) < 0.800',
        'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
        'pt >= 10. & abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Summer17ULIdIso'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EE_10.weights.root'
    )
)

process.mvaEleID_Summer18UL_ID_ISO_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. & abs(superCluster.eta) < 0.800',
        'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
        'pt < 10. & abs(superCluster.eta) >= 1.479',
        'pt >= 10. & abs(superCluster.eta) < 0.800',
        'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
        'pt >= 10. & abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Summer18ULIdIso'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB1_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB2_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EE_5.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB1_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB2_10.weights.root',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EE_10.weights.root'
    )
)

process.mvaEleID_Winter22_HZZ_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'pt < 10. && abs(superCluster.eta) < 0.800',
        'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt < 10. && abs(superCluster.eta) >= 1.479',
        'pt >= 10. && abs(superCluster.eta) < 0.800',
        'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
        'pt >= 10. && abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('ElectronMVAEstimatorRun2'),
    mvaTag = cms.string('Winter22HZZV1'),
    nCategories = cms.int32(6),
    variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB1_5.weights.xml.gz',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB2_5.weights.xml.gz',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EE_5.weights.xml.gz',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB1_10.weights.xml.gz',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB2_10.weights.xml.gz',
        'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EE_10.weights.xml.gz'
    )
)

process.mvaPhoID_PhaseIISummer20_v0_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'abs(superCluster.eta) <  1.479',
        'abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('PhotonMVAEstimator'),
    mvaTag = cms.string('PhaseIISummer20v0'),
    nCategories = cms.int32(2),
    variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/PhotonIdentification/data/MVA/PhaseII/PhotonID_MVA_barrel_Egamma_PhaseII_weight.xml.gz',
        'RecoEgamma/PhotonIdentification/data/MVA/PhaseII/PhotonID_MVA_barrel_Egamma_PhaseII_weight.xml.gz'
    )
)

process.mvaPhoID_PhaseIISummer20_v0_wp80 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorPhaseIISummer20v0Categories"),
        mvaCuts = cms.vdouble(0.875003, 0.875003),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorPhaseIISummer20v0Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-PhaseIISummer20-v0-wp80'),
    isPOGApproved = cms.bool(False)
)

process.mvaPhoID_PhaseIISummer20_v0_wp90 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorPhaseIISummer20v0Categories"),
        mvaCuts = cms.vdouble(0.737502, 0.737502),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorPhaseIISummer20v0Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-PhaseIISummer20-v0-wp90'),
    isPOGApproved = cms.bool(False)
)

process.mvaPhoID_RunIIFall17_v1p1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'abs(superCluster.eta) <  1.479',
        'abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('PhotonMVAEstimator'),
    mvaTag = cms.string('RunIIFall17v1p1'),
    nCategories = cms.int32(2),
    variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EB_V1.weights.root',
        'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EE_V1.weights.root'
    )
)

process.mvaPhoID_RunIIFall17_v1p1_wp80 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v1p1Categories"),
        mvaCuts = cms.vdouble(0.67, 0.54),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v1p1Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-RunIIFall17-v1p1-wp80'),
    isPOGApproved = cms.untracked.bool(True)
)

process.mvaPhoID_RunIIFall17_v1p1_wp90 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v1p1Categories"),
        mvaCuts = cms.vdouble(0.27, 0.14),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v1p1Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-RunIIFall17-v1p1-wp90'),
    isPOGApproved = cms.untracked.bool(True)
)

process.mvaPhoID_RunIIFall17_v2_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'abs(superCluster.eta) <  1.479',
        'abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('PhotonMVAEstimator'),
    mvaTag = cms.string('RunIIFall17v2'),
    nCategories = cms.int32(2),
    variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EB_V2.weights.root',
        'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EE_V2.weights.root'
    )
)

process.mvaPhoID_RunIIFall17_v2_wp80 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Categories"),
        mvaCuts = cms.vdouble(0.42, 0.14),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-RunIIFall17-v2-wp80'),
    isPOGApproved = cms.bool(True)
)

process.mvaPhoID_RunIIFall17_v2_wp90 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Categories"),
        mvaCuts = cms.vdouble(-0.02, -0.26),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-RunIIFall17-v2-wp90'),
    isPOGApproved = cms.bool(True)
)

process.mvaPhoID_RunIIIWinter22_v1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'abs(superCluster.eta) <  1.479',
        'abs(superCluster.eta) >= 1.479'
    ),
    mvaName = cms.string('PhotonMVAEstimator'),
    mvaTag = cms.string('RunIIIWinter22v1'),
    nCategories = cms.int32(2),
    variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun3VariablesWinter22V1.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/PhotonIdentification/data/MVA/RunIII_Winter22/PhoMVA_ID_EB_V1.weights.root',
        'RecoEgamma/PhotonIdentification/data/MVA/RunIII_Winter22/PhoMVA_ID_EE_V1.weights.root'
    )
)

process.mvaPhoID_RunIIIWinter22_v1_wp80 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Categories"),
        mvaCuts = cms.vdouble(0.420473, 0.203451),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-RunIIIWinter22-v1-wp80'),
    isPOGApproved = cms.bool(True)
)

process.mvaPhoID_RunIIIWinter22_v1_wp90 = cms.PSet(
    cutFlow = cms.VPSet(cms.PSet(
        cutName = cms.string('PhoMVACut'),
        isIgnored = cms.bool(False),
        mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Categories"),
        mvaCuts = cms.vdouble(0.0439603, -0.249526),
        mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Values"),
        needsAdditionalProducts = cms.bool(True)
    )),
    idName = cms.string('mvaPhoID-RunIIIWinter22-v1-wp90'),
    isPOGApproved = cms.bool(True)
)

process.mvaPhoID_Spring16_nonTrig_V1_producer_config = cms.PSet(
    categoryCuts = cms.vstring(
        'abs(superCluster.eta) <  1.479',
        'abs(superCluster.eta) >= 1.479'
    ),
    effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Spring16/effAreaPhotons_cone03_pfPhotons_90percentBased_3bins.txt'),
    mvaName = cms.string('PhotonMVAEstimator'),
    mvaTag = cms.string('Run2Spring16NonTrigV1'),
    nCategories = cms.int32(2),
    phoIsoCutoff = cms.double(2.5),
    phoIsoPtScalingCoeff = cms.vdouble(0.0053, 0.0034),
    variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesSpring16.txt'),
    weightFileNames = cms.vstring(
        'RecoEgamma/PhotonIdentification/data/MVA/Spring16/EB_V1.weights.xml.gz',
        'RecoEgamma/PhotonIdentification/data/MVA/Spring16/EE_V1.weights.xml.gz'
    )
)

process.nanoAOD_addDeepInfoAK4CHS_switch = cms.PSet(
    nanoAOD_addDeepBTag_switch = cms.untracked.bool(False),
    nanoAOD_addDeepFlavourTag_switch = cms.untracked.bool(False),
    nanoAOD_addParticleNet_switch = cms.untracked.bool(False),
    nanoAOD_addRobustParTAK4Tag_switch = cms.untracked.bool(False),
    nanoAOD_addUnifiedParTAK4Tag_switch = cms.untracked.bool(False)
)

process.nanoAOD_addDeepInfoAK4_switch = cms.PSet(
    nanoAOD_addParticleNet_switch = cms.untracked.bool(False),
    nanoAOD_addRobustParTAK4Tag_switch = cms.untracked.bool(False),
    nanoAOD_addUnifiedParTAK4Tag_switch = cms.untracked.bool(False)
)

process.nanoAOD_addDeepInfoAK8_switch = cms.PSet(
    jecPayload = cms.untracked.string('AK8PFPuppi'),
    nanoAOD_addDeepBTag_switch = cms.untracked.bool(False),
    nanoAOD_addDeepBoostedJet_switch = cms.untracked.bool(False),
    nanoAOD_addDeepDoubleXV2_switch = cms.untracked.bool(False),
    nanoAOD_addDeepDoubleX_switch = cms.untracked.bool(False),
    nanoAOD_addGlobalParT_switch = cms.untracked.bool(False),
    nanoAOD_addParticleNetLegacy_switch = cms.untracked.bool(False),
    nanoAOD_addParticleNetMassLegacy_switch = cms.untracked.bool(False),
    nanoAOD_addParticleNet_switch = cms.untracked.bool(False)
)

process.nanoDQMIO_perLSoutput = cms.PSet(
    MEsToSave = cms.untracked.vstring( (
        'Hcal/DigiTask/Occupancy/depth/depth1',
        'Hcal/DigiTask/Occupancy/depth/depth2',
        'Hcal/DigiTask/Occupancy/depth/depth3',
        'Hcal/DigiTask/Occupancy/depth/depth4',
        'Hcal/DigiTask/Occupancy/depth/depth5',
        'Hcal/DigiTask/Occupancy/depth/depth6',
        'Hcal/DigiTask/Occupancy/depth/depth7',
        'Hcal/DigiTask/Occupancy/depth/depthHO',
        'Hcal/DigiTask/OccupancyCut/depth/depth1',
        'Hcal/DigiTask/OccupancyCut/depth/depth2',
        'Hcal/DigiTask/OccupancyCut/depth/depth3',
        'Hcal/DigiTask/OccupancyCut/depth/depth4',
        'Hcal/DigiTask/OccupancyCut/depth/depth5',
        'Hcal/DigiTask/OccupancyCut/depth/depth6',
        'Hcal/DigiTask/OccupancyCut/depth/depth7',
        'Hcal/DigiTask/OccupancyCut/depth/depthHO',
        'EcalBarrel/EBOccupancyTask/EBOT digi occupancy',
        'EcalEndcap/EEOccupancyTask/EEOT digi occupancy EE -',
        'EcalEndcap/EEOccupancyTask/EEOT digi occupancy EE +',
        'EcalBarrel/EBOccupancyTask/EBOT DCC entries',
        'EcalEndcap/EEOccupancyTask/EEOT DCC entries',
        'Ecal/EventInfo/processedEvents',
        'PixelPhase1/Tracks/charge_PXBarrel',
        'PixelPhase1/Tracks/charge_PXForward',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_1',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_2',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_3',
        'PixelPhase1/Tracks/PXBarrel/charge_PXLayer_4',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_+1',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_+2',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_+3',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_-1',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_-2',
        'PixelPhase1/Tracks/PXForward/charge_PXDisk_-3',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_1',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_2',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_3',
        'PixelPhase1/Tracks/PXBarrel/size_PXLayer_4',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_+1',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_+2',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_+3',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_-1',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_-2',
        'PixelPhase1/Tracks/PXForward/size_PXDisk_-3',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm1',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm2',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm3',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalm4',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp1',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp2',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp3',
        'CSC/CSCOfflineMonitor/recHits/hRHGlobalp4',
        'GEM/RecHits/occ_xy_GE11-M-L1',
        'GEM/RecHits/occ_xy_GE11-M-L2',
        'GEM/RecHits/occ_xy_GE11-P-L1',
        'GEM/RecHits/occ_xy_GE11-P-L2',
        'GEM/Digis/occ_GE11-M-L1',
        'GEM/Digis/occ_GE11-M-L2',
        'GEM/Digis/occ_GE11-P-L1',
        'GEM/Digis/occ_GE11-P-L2',
        'HLT/Vertexing/hltPixelVertices/hltPixelVertices/goodvtxNbr',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_pt',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/mon_unMatched_pt',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_eta',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_hits',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_matched_pt',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_phi',
        'HLT/Tracking/ValidationWRTOffline/hltMergedWrtHighPurityPV/ref_pt',
        'HLT/Tracking/pixelTracks/GeneralProperties/Chi2Prob_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/Chi2oNDFVsEta_ImpactPoint_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/DeltaZToPVZoom_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/DistanceOfClosestApproachToPVVsPhi_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/DistanceOfClosestApproachToPVZoom_GenTk',
        'HLT/Tracking/pixelTracks/GeneralProperties/NumberOfTracks_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/Chi2Prob_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/Chi2oNDFVsEta_ImpactPoint_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/DeltaZToPVZoom_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/DistanceOfClosestApproachToPVVsPhi_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/DistanceOfClosestApproachToPVZoom_GenTk',
        'HLT/Tracking/tracks/GeneralProperties/NumberOfTracks_GenTk',
        'HLT/Tracking/tracks/LUMIanalysis/NumberEventsVsLUMI',
        'HLT/Tracking/tracks/PUmonitoring/NumberEventsVsGoodPVtx',
        'PixelPhase1/Tracks/num_clusters_ontrack_PXBarrel',
        'PixelPhase1/Tracks/num_clusters_ontrack_PXForward',
        'PixelPhase1/Tracks/clusterposition_zphi_ontrack',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_1',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_2',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_3',
        'PixelPhase1/Tracks/PXBarrel/clusterposition_zphi_ontrack_PXLayer_4',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_+1',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_+2',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_+3',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_-1',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_-2',
        'PixelPhase1/Tracks/PXForward/clusterposition_xy_ontrack_PXDisk_-3',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_1',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_2',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_3',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/digi_occupancy_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_4',
        'PixelPhase1/Phase1_MechanicalView/PXForward/digi_occupancy_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_1',
        'PixelPhase1/Phase1_MechanicalView/PXForward/digi_occupancy_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_2',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_1',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_2',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_3',
        'PixelPhase1/Phase1_MechanicalView/PXBarrel/clusters_per_SignedModuleCoord_per_SignedLadderCoord_PXLayer_4',
        'PixelPhase1/Phase1_MechanicalView/PXForward/clusters_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_1',
        'PixelPhase1/Phase1_MechanicalView/PXForward/clusters_per_SignedDiskCoord_per_SignedBladePanelCoord_PXRing_2',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/NormalizedHitResiduals_TEC__wheel__1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_2/NormalizedHitResiduals_TEC__wheel__2',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_3/NormalizedHitResiduals_TEC__wheel__3',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_4/NormalizedHitResiduals_TEC__wheel__4',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_5/NormalizedHitResiduals_TEC__wheel__5',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_6/NormalizedHitResiduals_TEC__wheel__6',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_7/NormalizedHitResiduals_TEC__wheel__7',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_8/NormalizedHitResiduals_TEC__wheel__8',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_9/NormalizedHitResiduals_TEC__wheel__9',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_1/NormalizedHitResiduals_TEC__wheel__1',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_2/NormalizedHitResiduals_TEC__wheel__2',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_3/NormalizedHitResiduals_TEC__wheel__3',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_4/NormalizedHitResiduals_TEC__wheel__4',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_5/NormalizedHitResiduals_TEC__wheel__5',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_6/NormalizedHitResiduals_TEC__wheel__6',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_7/NormalizedHitResiduals_TEC__wheel__7',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_8/NormalizedHitResiduals_TEC__wheel__8',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_9/NormalizedHitResiduals_TEC__wheel__9',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__2',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__3',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_4/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__4',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_5/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__5',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_6/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__6',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_7/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__7',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_8/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__8',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_9/Summary_ClusterStoNCorr__OnTrack__TEC__PLUS__wheel__9',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__1',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__2',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__3',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_4/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__4',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_5/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__5',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_6/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__6',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_7/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__7',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_8/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__8',
        'SiStrip/MechanicalView/TEC/MINUS/wheel_9/Summary_ClusterStoNCorr__OnTrack__TEC__MINUS__wheel__9',
        'SiStrip/MechanicalView/TIB/layer_1/NormalizedHitResiduals_TIB__Layer__1',
        'SiStrip/MechanicalView/TIB/layer_2/NormalizedHitResiduals_TIB__Layer__2',
        'SiStrip/MechanicalView/TIB/layer_3/NormalizedHitResiduals_TIB__Layer__3',
        'SiStrip/MechanicalView/TIB/layer_4/NormalizedHitResiduals_TIB__Layer__4',
        'SiStrip/MechanicalView/TIB/layer_1/Summary_ClusterStoNCorr__OnTrack__TIB__layer__1',
        'SiStrip/MechanicalView/TIB/layer_2/Summary_ClusterStoNCorr__OnTrack__TIB__layer__2',
        'SiStrip/MechanicalView/TIB/layer_3/Summary_ClusterStoNCorr__OnTrack__TIB__layer__3',
        'SiStrip/MechanicalView/TIB/layer_4/Summary_ClusterStoNCorr__OnTrack__TIB__layer__4',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/NormalizedHitResiduals_TID__wheel__1',
        'SiStrip/MechanicalView/TID/PLUS/wheel_2/NormalizedHitResiduals_TID__wheel__2',
        'SiStrip/MechanicalView/TID/PLUS/wheel_3/NormalizedHitResiduals_TID__wheel__3',
        'SiStrip/MechanicalView/TID/MINUS/wheel_1/NormalizedHitResiduals_TID__wheel__1',
        'SiStrip/MechanicalView/TID/MINUS/wheel_2/NormalizedHitResiduals_TID__wheel__2',
        'SiStrip/MechanicalView/TID/MINUS/wheel_3/NormalizedHitResiduals_TID__wheel__3',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TID__PLUS__wheel__1',
        'SiStrip/MechanicalView/TID/PLUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TID__PLUS__wheel__2',
        'SiStrip/MechanicalView/TID/PLUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TID__PLUS__wheel__3',
        'SiStrip/MechanicalView/TID/MINUS/wheel_1/Summary_ClusterStoNCorr__OnTrack__TID__MINUS__wheel__1',
        'SiStrip/MechanicalView/TID/MINUS/wheel_2/Summary_ClusterStoNCorr__OnTrack__TID__MINUS__wheel__2',
        'SiStrip/MechanicalView/TID/MINUS/wheel_3/Summary_ClusterStoNCorr__OnTrack__TID__MINUS__wheel__3',
        'SiStrip/MechanicalView/TOB/layer_1/NormalizedHitResiduals_TOB__Layer__1',
        'SiStrip/MechanicalView/TOB/layer_2/NormalizedHitResiduals_TOB__Layer__2',
        'SiStrip/MechanicalView/TOB/layer_3/NormalizedHitResiduals_TOB__Layer__3',
        'SiStrip/MechanicalView/TOB/layer_4/NormalizedHitResiduals_TOB__Layer__4',
        'SiStrip/MechanicalView/TOB/layer_5/NormalizedHitResiduals_TOB__Layer__5',
        'SiStrip/MechanicalView/TOB/layer_6/NormalizedHitResiduals_TOB__Layer__6',
        'SiStrip/MechanicalView/TOB/layer_1/Summary_ClusterStoNCorr__OnTrack__TOB__layer__1',
        'SiStrip/MechanicalView/TOB/layer_2/Summary_ClusterStoNCorr__OnTrack__TOB__layer__2',
        'SiStrip/MechanicalView/TOB/layer_3/Summary_ClusterStoNCorr__OnTrack__TOB__layer__3',
        'SiStrip/MechanicalView/TOB/layer_4/Summary_ClusterStoNCorr__OnTrack__TOB__layer__4',
        'SiStrip/MechanicalView/TOB/layer_5/Summary_ClusterStoNCorr__OnTrack__TOB__layer__5',
        'SiStrip/MechanicalView/TOB/layer_6/Summary_ClusterStoNCorr__OnTrack__TOB__layer__6',
        'SiStrip/MechanicalView/MainDiagonal Position',
        'SiStrip/MechanicalView/NumberOfClustersInPixel',
        'SiStrip/MechanicalView/NumberOfClustersInStrip',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/TkHMap_NumberOfDigi_TIDP_D1',
        'SiStrip/MechanicalView/TID/PLUS/wheel_1/TkHMap_NumberOfCluster_TIDP_D1',
        'SiStrip/MechanicalView/TIB/layer_1/TkHMap_NumberOfDigi_TIB_L1',
        'SiStrip/MechanicalView/TIB/layer_1/TkHMap_NumberOfCluster_TIB_L1',
        'SiStrip/MechanicalView/TOB/layer_1/TkHMap_NumberOfDigi_TOB_L1',
        'SiStrip/MechanicalView/TOB/layer_1/TkHMap_NumberOfCluster_TOB_L1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/TkHMap_NumberOfDigi_TECP_W1',
        'SiStrip/MechanicalView/TEC/PLUS/wheel_1/TkHMap_NumberOfCluster_TECP_W1',
        'Tracking/TrackParameters/generalTracks/LSanalysis/Chi2oNDF_lumiFlag_GenTk',
        'Tracking/TrackParameters/generalTracks/LSanalysis/NumberOfRecHitsPerTrack_lumiFlag_GenTk',
        'Tracking/TrackParameters/generalTracks/LSanalysis/NumberOfTracks_lumiFlag_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/SIPDxyToPV_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/SIPDzToPV_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/SIP3DToPV_GenTk',
        'Tracking/TrackParameters/generalTracks/HitProperties/NumberOfMissingOuterRecHitsPerTrack_GenTk',
        'Tracking/TrackParameters/generalTracks/HitProperties/NumberMORecHitsPerTrackVsPt_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackEtaPhi_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/NumberOfTracks_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/HitProperties/NumberOfRecHitsPerTrack_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackPt_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/Chi2oNDF_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackPhi_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackEta_ImpactPoint_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/HitProperties/NumberOfRecHitsPerTrack_Strip_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/HitProperties/NumberOfRecHitsPerTrack_Pixel_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBS_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBSdz_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBSVsPhi_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/DistanceOfClosestApproachToBSVsEta_GenTk',
        'Tracking/TrackParameters/highPurityTracks/pt_1/GeneralProperties/TrackQoverP_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/Quality_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/NumberofTracks_Hardvtx_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/NumberofTracks_PUvtx_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackPtHighpurity_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackPtTight_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackPtLoose_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackEtaHighpurity_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackEtaTight_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TrackEtaLoose_ImpactPoint_GenTk',
        'Tracking/PrimaryVertices/highPurityTracks/pt_0to1/offline/NumberOfGoodPVtx_offline',
        'Tracking/PrimaryVertices/highPurityTracks/pt_0to1/offline/GoodPVtxNumberOfTracks_offline',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/NumberofTracks_Hardvtx_PUvtx_GenTk',
        'Tracking/PrimaryVertices/highPurityTracks/pt_0to1/offline/FractionOfGoodPVtx_offline',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_Ratio_byFoldingmap_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_Ratio_byFoldingmap_op_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_RelativeDifference_byFoldingmap_ImpactPoint_GenTk',
        'Tracking/TrackParameters/generalTracks/GeneralProperties/TkEtaPhi_RelativeDifference_byFoldingmap_op_ImpactPoint_GenTk',
        'OfflinePV/offlinePrimaryVertices/tagVtxProb',
        'OfflinePV/offlinePrimaryVertices/tagType',
        'OfflinePV/Resolution/PV/pull_x',
        'OfflinePV/Resolution/PV/pull_y',
        'OfflinePV/Resolution/PV/pull_z',
        'OfflinePV/offlinePrimaryVertices/tagDiffX',
        'OfflinePV/offlinePrimaryVertices/tagDiffY',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_highPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_highPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_mediumPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_mediumPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_lowPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/CHFrac_lowPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_highPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_highPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_mediumPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_mediumPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_lowPt_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/ChMultiplicity_lowPt_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Constituents',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Eta',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Eta_uncor',
        'JetMET/Jet/Cleanedak4PFJetsCHS/JetEnergyCorr',
        'JetMET/Jet/Cleanedak4PFJetsCHS/NJets',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Phi',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Phi_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Phi_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsCHS/Pt',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/PtJetMET/Jet/Cleanedak4PFJetsPuppi/Phi',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Phi_Barrel',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Phi_EndCap',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/JetEnergyCorr',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/NJets',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Eta',
        'JetMET/Jet/Cleanedak4PFJetsPuppi/Eta_uncor',
        'JetMET/MET/pfMETT1/Cleaned/METSig',
        'JetMET/vertices',
        'JetMET/HIJetValidation/akCs4PFJets/SumPFPt',
        'JetMET/HIJetValidation/akCs4PFJets/NJets',
        'JetMET/HIJetValidation/akCs4PFJets/NPFpart',
        'JetMET/HIJetValidation/akPu4CaloJets/SumCaloPt',
        'JetMET/HIJetValidation/akPu4CaloJets/NCalopart',
        'JetMET/HIJetValidation/akPu4CaloJets/NJets',
        'Muons/MuonRecoAnalyzer/GlbMuon_Glb_pt',
        'Muons/MuonRecoAnalyzer/GlbMuon_Glb_eta',
        'Muons/MuonRecoAnalyzer/GlbMuon_Glb_phi',
        'Muons/MuonRecoAnalyzer/Res_TkGlb_qOverlap',
        'Muons/diMuonHistograms/GlbGlbMuon_LM',
        'Muons/diMuonHistograms/GlbGlbMuon_HM',
        'Muons/Isolation/global/relPFIso_R03',
        'Muons/globalMuons/GeneralProperties/NumberOfMeanRecHitsPerTrack_glb',
        'Muons/standAloneMuonsUpdatedAtVtx/HitProperties/NumberOfValidRecHitsPerTrack_sta',
        'Muons/MuonRecoOneHLT/GlbMuon_Glb_pt',
        'Muons/MuonRecoOneHLT/GlbMuon_Glb_eta',
        'Egamma/Electrons/Ele5_TagAndProbe/ele0_vertexPt_barrel',
        'Egamma/Electrons/Ele5_TagAndProbe/ele1_vertexPt_endcaps',
        'Egamma/Electrons/Ele5_TagAndProbe/ele2_vertexEta',
        'Egamma/Electrons/Ele5_TagAndProbe/ele5_vertexZ',
        'Egamma/Electrons/Ele5_TagAndProbe/ele10_Eop_barrel',
        'Egamma/Electrons/Ele5_TagAndProbe/ele10_Eop_endcaps',
        'Egamma/Electrons/Ele5_TagAndProbe/ele101_etaEff',
        'Egamma/Electrons/Ele5_TagAndProbe/ele102_phiEff',
        'Egamma/Electrons/Ele5_TagAndProbe/ele201_mee_os' ) 
    )
)

process.options = cms.untracked.PSet(
    IgnoreCompletely = cms.untracked.vstring(),
    Rethrow = cms.untracked.vstring(),
    TryToContinue = cms.untracked.vstring(),
    accelerators = cms.untracked.vstring('*'),
    allowUnscheduled = cms.obsolete.untracked.bool,
    canDeleteEarly = cms.untracked.vstring(),
    deleteNonConsumedUnscheduledModules = cms.untracked.bool(True),
    dumpOptions = cms.untracked.bool(False),
    emptyRunLumiMode = cms.obsolete.untracked.string,
    eventSetup = cms.untracked.PSet(
        forceNumberOfConcurrentIOVs = cms.untracked.PSet(
            allowAnyLabel_=cms.required.untracked.uint32
        ),
        numberOfConcurrentIOVs = cms.untracked.uint32(0)
    ),
    fileMode = cms.untracked.string('FULLMERGE'),
    forceEventSetupCacheClearOnNewRun = cms.untracked.bool(False),
    holdsReferencesToDeleteEarly = cms.untracked.VPSet(),
    makeTriggerResults = cms.obsolete.untracked.bool,
    modulesToCallForTryToContinue = cms.untracked.vstring(),
    modulesToIgnoreForDeleteEarly = cms.untracked.vstring(),
    numberOfConcurrentLuminosityBlocks = cms.untracked.uint32(0),
    numberOfConcurrentRuns = cms.untracked.uint32(1),
    numberOfStreams = cms.untracked.uint32(0),
    numberOfThreads = cms.untracked.uint32(4),
    printDependencies = cms.untracked.bool(False),
    sizeOfStackForThreadsInKB = cms.optional.untracked.uint32,
    throwIfIllegalParameter = cms.untracked.bool(True),
    wantSummary = cms.untracked.bool(False)
)

process.photon_id_modules_WorkingPoints_nanoAOD = cms.PSet(
    WorkingPoints = cms.vstring(
        'egmPhotonIDs:cutBasedPhotonID-RunIIIWinter22-122X-V1-loose',
        'egmPhotonIDs:cutBasedPhotonID-RunIIIWinter22-122X-V1-medium',
        'egmPhotonIDs:cutBasedPhotonID-RunIIIWinter22-122X-V1-tight'
    ),
    modules = cms.vstring(
        'RecoEgamma.PhotonIdentification.Identification.cutBasedPhotonID_RunIIIWinter22_122X_V1_cff',
        'RecoEgamma.PhotonIdentification.Identification.mvaPhotonID_Winter22_122X_V1_cff',
        'RecoEgamma.PhotonIdentification.Identification.cutBasedPhotonID_Fall17_94X_V2_cff',
        'RecoEgamma.PhotonIdentification.Identification.mvaPhotonID_Fall17_94X_V2_cff'
    )
)

process.photon_id_modules_WorkingPoints_nanoAOD_Run2 = cms.PSet(
    WorkingPoints = cms.vstring(
        'egmPhotonIDs:cutBasedPhotonID-Fall17-94X-V2-loose',
        'egmPhotonIDs:cutBasedPhotonID-Fall17-94X-V2-medium',
        'egmPhotonIDs:cutBasedPhotonID-Fall17-94X-V2-tight'
    ),
    modules = cms.vstring(
        'RecoEgamma.PhotonIdentification.Identification.cutBasedPhotonID_Fall17_94X_V2_cff',
        'RecoEgamma.PhotonIdentification.Identification.mvaPhotonID_Fall17_94X_V2_cff'
    )
)

process.softPFElectronCommon = cms.PSet(
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)

process.softPFMuonCommon = cms.PSet(
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)

process.trackPseudoSelectionBlock = cms.PSet(
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.trackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    )
)

process.train = cms.PSet(
    jEtaMax = cms.double(5.0),
    jEtaMin = cms.double(3.0),
    tmvaVariables = cms.vstring(
        'nvtx',
        'dR2Mean',
        'frac01',
        'frac02',
        'frac03',
        'frac04',
        'majW',
        'minW',
        'jetR',
        'nParticles',
        'ptD',
        'pull'
    ),
    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL16APV_Eta3p0To5p0_chs_BDT.weights.xml.gz')
)

process.variableJTAPars = cms.PSet(
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5)
)

process.c_vs_b_vars_vpset = cms.VPSet(
    cms.PSet(
        default = cms.double(-1),
        name = cms.string('vertexLeptonCategory'),
        taggingVarName = cms.string('vertexLeptonCategory')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSig_0'),
        taggingVarName = cms.string('trackSip2dSig')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip2dSig_1'),
        taggingVarName = cms.string('trackSip2dSig')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSig_0'),
        taggingVarName = cms.string('trackSip3dSig')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip3dSig_1'),
        taggingVarName = cms.string('trackSip3dSig')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPtRel_0'),
        taggingVarName = cms.string('trackPtRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPtRel_1'),
        taggingVarName = cms.string('trackPtRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPPar_0'),
        taggingVarName = cms.string('trackPPar')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPPar_1'),
        taggingVarName = cms.string('trackPPar')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackEtaRel_0'),
        taggingVarName = cms.string('trackEtaRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackEtaRel_1'),
        taggingVarName = cms.string('trackEtaRel')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDeltaR_0'),
        taggingVarName = cms.string('trackDeltaR')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDeltaR_1'),
        taggingVarName = cms.string('trackDeltaR')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackPtRatio_0'),
        taggingVarName = cms.string('trackPtRatio')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackPtRatio_1'),
        taggingVarName = cms.string('trackPtRatio')
    ),
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(0),
        name = cms.string('trackPParRatio_0'),
        taggingVarName = cms.string('trackPParRatio')
    ),
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(1),
        name = cms.string('trackPParRatio_1'),
        taggingVarName = cms.string('trackPParRatio')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackJetDist_0'),
        taggingVarName = cms.string('trackJetDist')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackJetDist_1'),
        taggingVarName = cms.string('trackJetDist')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDecayLenVal_0'),
        taggingVarName = cms.string('trackDecayLenVal')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDecayLenVal_1'),
        taggingVarName = cms.string('trackDecayLenVal')
    ),
    cms.PSet(
        default = cms.double(0),
        name = cms.string('jetNSecondaryVertices'),
        taggingVarName = cms.string('jetNSecondaryVertices')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('jetNTracks'),
        taggingVarName = cms.string('jetNTracks')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetEtRatio'),
        taggingVarName = cms.string('trackSumJetEtRatio')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetDeltaR'),
        taggingVarName = cms.string('trackSumJetDeltaR')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexMass_0'),
        taggingVarName = cms.string('vertexMass')
    ),
    cms.PSet(
        default = cms.double(-10),
        idx = cms.int32(0),
        name = cms.string('vertexEnergyRatio_0'),
        taggingVarName = cms.string('vertexEnergyRatio')
    ),
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip2dSigAboveCharm')
    ),
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip3dSigAboveCharm')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance2dSig_0'),
        taggingVarName = cms.string('flightDistance2dSig')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance3dSig_0'),
        taggingVarName = cms.string('flightDistance3dSig')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexJetDeltaR_0'),
        taggingVarName = cms.string('vertexJetDeltaR')
    ),
    cms.PSet(
        default = cms.double(0),
        idx = cms.int32(0),
        name = cms.string('vertexNTracks_0'),
        taggingVarName = cms.string('vertexNTracks')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('massVertexEnergyFraction_0'),
        taggingVarName = cms.string('massVertexEnergyFraction')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexBoostOverSqrtJetPt_0'),
        taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonPtRel_0'),
        taggingVarName = cms.string('leptonPtRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonPtRel_1'),
        taggingVarName = cms.string('leptonPtRel')
    ),
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(0),
        name = cms.string('leptonSip3d_0'),
        taggingVarName = cms.string('leptonSip3d')
    ),
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(1),
        name = cms.string('leptonSip3d_1'),
        taggingVarName = cms.string('leptonSip3d')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonDeltaR_0'),
        taggingVarName = cms.string('leptonDeltaR')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonDeltaR_1'),
        taggingVarName = cms.string('leptonDeltaR')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatioRel_0'),
        taggingVarName = cms.string('leptonRatioRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatioRel_1'),
        taggingVarName = cms.string('leptonRatioRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonEtaRel_0'),
        taggingVarName = cms.string('leptonEtaRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonEtaRel_1'),
        taggingVarName = cms.string('leptonEtaRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatio_0'),
        taggingVarName = cms.string('leptonRatio')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatio_1'),
        taggingVarName = cms.string('leptonRatio')
    )
)

process.c_vs_l_vars_vpset = cms.VPSet(
    cms.PSet(
        default = cms.double(-1),
        name = cms.string('vertexLeptonCategory'),
        taggingVarName = cms.string('vertexLeptonCategory')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSig_0'),
        taggingVarName = cms.string('trackSip2dSig')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip2dSig_1'),
        taggingVarName = cms.string('trackSip2dSig')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSig_0'),
        taggingVarName = cms.string('trackSip3dSig')
    ),
    cms.PSet(
        default = cms.double(-100),
        idx = cms.int32(1),
        name = cms.string('trackSip3dSig_1'),
        taggingVarName = cms.string('trackSip3dSig')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPtRel_0'),
        taggingVarName = cms.string('trackPtRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPtRel_1'),
        taggingVarName = cms.string('trackPtRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackPPar_0'),
        taggingVarName = cms.string('trackPPar')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackPPar_1'),
        taggingVarName = cms.string('trackPPar')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('trackEtaRel_0'),
        taggingVarName = cms.string('trackEtaRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('trackEtaRel_1'),
        taggingVarName = cms.string('trackEtaRel')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDeltaR_0'),
        taggingVarName = cms.string('trackDeltaR')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDeltaR_1'),
        taggingVarName = cms.string('trackDeltaR')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackPtRatio_0'),
        taggingVarName = cms.string('trackPtRatio')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackPtRatio_1'),
        taggingVarName = cms.string('trackPtRatio')
    ),
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(0),
        name = cms.string('trackPParRatio_0'),
        taggingVarName = cms.string('trackPParRatio')
    ),
    cms.PSet(
        default = cms.double(1.1),
        idx = cms.int32(1),
        name = cms.string('trackPParRatio_1'),
        taggingVarName = cms.string('trackPParRatio')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackJetDist_0'),
        taggingVarName = cms.string('trackJetDist')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackJetDist_1'),
        taggingVarName = cms.string('trackJetDist')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('trackDecayLenVal_0'),
        taggingVarName = cms.string('trackDecayLenVal')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(1),
        name = cms.string('trackDecayLenVal_1'),
        taggingVarName = cms.string('trackDecayLenVal')
    ),
    cms.PSet(
        default = cms.double(0),
        name = cms.string('jetNSecondaryVertices'),
        taggingVarName = cms.string('jetNSecondaryVertices')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('jetNTracks'),
        taggingVarName = cms.string('jetNTracks')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetEtRatio'),
        taggingVarName = cms.string('trackSumJetEtRatio')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        name = cms.string('trackSumJetDeltaR'),
        taggingVarName = cms.string('trackSumJetDeltaR')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexMass_0'),
        taggingVarName = cms.string('vertexMass')
    ),
    cms.PSet(
        default = cms.double(-10),
        idx = cms.int32(0),
        name = cms.string('vertexEnergyRatio_0'),
        taggingVarName = cms.string('vertexEnergyRatio')
    ),
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip2dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip2dSigAboveCharm')
    ),
    cms.PSet(
        default = cms.double(-999),
        idx = cms.int32(0),
        name = cms.string('trackSip3dSigAboveCharm_0'),
        taggingVarName = cms.string('trackSip3dSigAboveCharm')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance2dSig_0'),
        taggingVarName = cms.string('flightDistance2dSig')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('flightDistance3dSig_0'),
        taggingVarName = cms.string('flightDistance3dSig')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexJetDeltaR_0'),
        taggingVarName = cms.string('vertexJetDeltaR')
    ),
    cms.PSet(
        default = cms.double(0),
        idx = cms.int32(0),
        name = cms.string('vertexNTracks_0'),
        taggingVarName = cms.string('vertexNTracks')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('massVertexEnergyFraction_0'),
        taggingVarName = cms.string('massVertexEnergyFraction')
    ),
    cms.PSet(
        default = cms.double(-0.1),
        idx = cms.int32(0),
        name = cms.string('vertexBoostOverSqrtJetPt_0'),
        taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonPtRel_0'),
        taggingVarName = cms.string('leptonPtRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonPtRel_1'),
        taggingVarName = cms.string('leptonPtRel')
    ),
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(0),
        name = cms.string('leptonSip3d_0'),
        taggingVarName = cms.string('leptonSip3d')
    ),
    cms.PSet(
        default = cms.double(-10000),
        idx = cms.int32(1),
        name = cms.string('leptonSip3d_1'),
        taggingVarName = cms.string('leptonSip3d')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonDeltaR_0'),
        taggingVarName = cms.string('leptonDeltaR')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonDeltaR_1'),
        taggingVarName = cms.string('leptonDeltaR')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatioRel_0'),
        taggingVarName = cms.string('leptonRatioRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatioRel_1'),
        taggingVarName = cms.string('leptonRatioRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonEtaRel_0'),
        taggingVarName = cms.string('leptonEtaRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonEtaRel_1'),
        taggingVarName = cms.string('leptonEtaRel')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(0),
        name = cms.string('leptonRatio_0'),
        taggingVarName = cms.string('leptonRatio')
    ),
    cms.PSet(
        default = cms.double(-1),
        idx = cms.int32(1),
        name = cms.string('leptonRatio_1'),
        taggingVarName = cms.string('leptonRatio')
    )
)

process.mvaConfigsForEleProducer = cms.VPSet(
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Spring16HZZV1'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'abs(superCluster.eta) < 0.800',
            'abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Spring16GeneralPurposeV1'),
        nCategories = cms.int32(3),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Fall17NoIsoV1'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Fall17V1Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_5_2017_puinfo_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_5_2017_puinfo_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_5_2017_puinfo_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_10_2017_puinfo_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_10_2017_puinfo_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_10_2017_puinfo_BDT.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Fall17IsoV1'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Fall17V1Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_5_2017_puinfo_iso_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_5_2017_puinfo_iso_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_5_2017_puinfo_iso_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_10_2017_puinfo_iso_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_10_2017_puinfo_iso_BDT.weights.root',
            'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_10_2017_puinfo_iso_BDT.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Fall17NoIsoV2'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Fall17IsoV2'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('RunIIIWinter22NoIsoV1'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3NonIso.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('RunIIIWinter22IsoV1'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. & abs(superCluster.eta) < 0.800',
            'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
            'pt < 10. & abs(superCluster.eta) >= 1.479',
            'pt >= 10. & abs(superCluster.eta) < 0.800',
            'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
            'pt >= 10. & abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Summer16ULIdIso'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. & abs(superCluster.eta) < 0.800',
            'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
            'pt < 10. & abs(superCluster.eta) >= 1.479',
            'pt >= 10. & abs(superCluster.eta) < 0.800',
            'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
            'pt >= 10. & abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Summer17ULIdIso'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. & abs(superCluster.eta) < 0.800',
            'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
            'pt < 10. & abs(superCluster.eta) >= 1.479',
            'pt >= 10. & abs(superCluster.eta) < 0.800',
            'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
            'pt >= 10. & abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Summer18ULIdIso'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB1_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB2_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EE_5.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB1_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB2_10.weights.root',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EE_10.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'pt < 10. && abs(superCluster.eta) < 0.800',
            'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt < 10. && abs(superCluster.eta) >= 1.479',
            'pt >= 10. && abs(superCluster.eta) < 0.800',
            'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
            'pt >= 10. && abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('ElectronMVAEstimatorRun2'),
        mvaTag = cms.string('Winter22HZZV1'),
        nCategories = cms.int32(6),
        variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB1_5.weights.xml.gz',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB2_5.weights.xml.gz',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EE_5.weights.xml.gz',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB1_10.weights.xml.gz',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB2_10.weights.xml.gz',
            'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EE_10.weights.xml.gz'
        )
    )
)

process.mvaConfigsForPhoProducer = cms.VPSet(
    cms.PSet(
        categoryCuts = cms.vstring(
            'abs(superCluster.eta) <  1.479',
            'abs(superCluster.eta) >= 1.479'
        ),
        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Spring16/effAreaPhotons_cone03_pfPhotons_90percentBased_3bins.txt'),
        mvaName = cms.string('PhotonMVAEstimator'),
        mvaTag = cms.string('Run2Spring16NonTrigV1'),
        nCategories = cms.int32(2),
        phoIsoCutoff = cms.double(2.5),
        phoIsoPtScalingCoeff = cms.vdouble(0.0053, 0.0034),
        variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesSpring16.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/PhotonIdentification/data/MVA/Spring16/EB_V1.weights.xml.gz',
            'RecoEgamma/PhotonIdentification/data/MVA/Spring16/EE_V1.weights.xml.gz'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'abs(superCluster.eta) <  1.479',
            'abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('PhotonMVAEstimator'),
        mvaTag = cms.string('RunIIFall17v1p1'),
        nCategories = cms.int32(2),
        variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EB_V1.weights.root',
            'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EE_V1.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'abs(superCluster.eta) <  1.479',
            'abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('PhotonMVAEstimator'),
        mvaTag = cms.string('RunIIFall17v2'),
        nCategories = cms.int32(2),
        variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EB_V2.weights.root',
            'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EE_V2.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'abs(superCluster.eta) <  1.479',
            'abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('PhotonMVAEstimator'),
        mvaTag = cms.string('RunIIIWinter22v1'),
        nCategories = cms.int32(2),
        variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun3VariablesWinter22V1.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/PhotonIdentification/data/MVA/RunIII_Winter22/PhoMVA_ID_EB_V1.weights.root',
            'RecoEgamma/PhotonIdentification/data/MVA/RunIII_Winter22/PhoMVA_ID_EE_V1.weights.root'
        )
    ),
    cms.PSet(
        categoryCuts = cms.vstring(
            'abs(superCluster.eta) <  1.479',
            'abs(superCluster.eta) >= 1.479'
        ),
        mvaName = cms.string('PhotonMVAEstimator'),
        mvaTag = cms.string('PhaseIISummer20v0'),
        nCategories = cms.int32(2),
        variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
        weightFileNames = cms.vstring(
            'RecoEgamma/PhotonIdentification/data/MVA/PhaseII/PhotonID_MVA_barrel_Egamma_PhaseII_weight.xml.gz',
            'RecoEgamma/PhotonIdentification/data/MVA/PhaseII/PhotonID_MVA_barrel_Egamma_PhaseII_weight.xml.gz'
        )
    )
)

process.patMultPhiCorrParams_Puppi_ULDATA2016postVFPF = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016postVFPF'),
    px = cms.vdouble(0.0234421, -0.371298),
    py = cms.vdouble(-0.00997438, 0.0809178),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016postVFPG = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016postVFPG'),
    px = cms.vdouble(0.0182134, -0.335786),
    py = cms.vdouble(-0.0063338, 0.093349),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016postVFPH = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016postVFPH'),
    px = cms.vdouble(0.015702, -0.340832),
    py = cms.vdouble(-0.00544957, 0.199093),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016preVFPB = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPB'),
    px = cms.vdouble(-0.00109025, -0.338093),
    py = cms.vdouble(-0.00356058, 0.128407),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016preVFPC = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPC'),
    px = cms.vdouble(-0.00271913, -0.342268),
    py = cms.vdouble(0.00187386, 0.104),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016preVFPD = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPD'),
    px = cms.vdouble(-0.00254194, -0.305264),
    py = cms.vdouble(-0.00177408, 0.164639),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016preVFPE = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPE'),
    px = cms.vdouble(-0.00358835, -0.225435),
    py = cms.vdouble(-0.000444268, 0.180479),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2016preVFPF = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPF'),
    px = cms.vdouble(0.0056759, -0.454101),
    py = cms.vdouble(-0.00962707, 0.35731),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2017B = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017B'),
    px = cms.vdouble(-0.00382117, -0.666228),
    py = cms.vdouble(0.0109034, 0.172188),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2017C = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017C'),
    px = cms.vdouble(-0.00110699, -0.747643),
    py = cms.vdouble(-0.0012184, 0.303817),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2017D = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017D'),
    px = cms.vdouble(-0.00141442, -0.721382),
    py = cms.vdouble(-0.0011873, 0.21646),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2017E = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017E'),
    px = cms.vdouble(0.00593859, -0.851999),
    py = cms.vdouble(-0.00754254, 0.245956),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2017F = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017F'),
    px = cms.vdouble(0.00765682, -0.945001),
    py = cms.vdouble(-0.0154974, 0.804176),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2018A = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018A'),
    px = cms.vdouble(-0.0073377, 0.0250294),
    py = cms.vdouble(-0.000406059, 0.0417346),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2018B = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018B'),
    px = cms.vdouble(0.00434261, 0.00892927),
    py = cms.vdouble(0.00234695, 0.20381),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2018C = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018C'),
    px = cms.vdouble(0.00198311, 0.37026),
    py = cms.vdouble(-0.016127, 0.402029),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULDATA2018D = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018D'),
    px = cms.vdouble(0.00220647, 0.378141),
    py = cms.vdouble(-0.0160244, 0.471053),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULMC2016postVFP = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2016postVFP'),
    px = cms.vdouble(-0.0060447, -0.4183),
    py = cms.vdouble(0.008331, -0.0990046),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULMC2016preVFP = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2016preVFP'),
    px = cms.vdouble(-0.0058341, -0.395049),
    py = cms.vdouble(0.00971595, -0.101288),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULMC2017 = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2017'),
    px = cms.vdouble(-0.0102265, -0.446416),
    py = cms.vdouble(0.0198663, 0.243182),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_Puppi_ULMC2018 = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2018'),
    px = cms.vdouble(-0.0214557, 0.969428),
    py = cms.vdouble(0.0167134, 0.199296),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_T0pcT1SmearTxy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1SmearTxy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1T2SmearTxy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1T2SmearTxy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1T2Txy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1T2Txy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1Txy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcT1Txy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcTxy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T0pcTxy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1SmearTxy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1SmearTxy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1T2SmearTxy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1T2SmearTxy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1T2Txy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1T2Txy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1Txy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_T1Txy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_Txy_25ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
        py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
        py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
        py = cms.vdouble(0.00798098092474, -0.000103998219585),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00305719113962, -0.00032676418359),
        py = cms.vdouble(-0.00345131507897, 0.000164816815994),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.000159031461755, 0.00012231873804),
        py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
        py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
        py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
        py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
        py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
        py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
        py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
        py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_Txy_50ns = cms.VPSet(
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaPlus'),
        px = cms.vdouble(-0.00220049396857, 4.86017686051e-07),
        py = cms.vdouble(0.000301784350668, -2.55951949068e-07),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(0),
        etaMin = cms.double(-2.7),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hEtaMinus'),
        px = cms.vdouble(-0.000217969078412, 3.0200051094e-07),
        py = cms.vdouble(-0.0014606200538, -2.29508676725e-06),
        type = cms.int32(1),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0Barrel'),
        px = cms.vdouble(-0.0135587323577, 5.55593286464e-05),
        py = cms.vdouble(0.00848783774079, -0.00022596699093),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3),
        etaMin = cms.double(1.392),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapPlus'),
        px = cms.vdouble(-0.00285895832031, -6.08161900014e-05),
        py = cms.vdouble(-0.00934018266651, 0.000259105827172),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('h0EndcapMinus'),
        px = cms.vdouble(-0.00537876208774, 0.000209817129512),
        py = cms.vdouble(0.011148063877, -4.44149746767e-06),
        type = cms.int32(5),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaBarrel'),
        px = cms.vdouble(-0.00192842680623, 2.61152485314e-06),
        py = cms.vdouble(-0.000507607323037, 4.48832037695e-06),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(3.0),
        etaMin = cms.double(1.479),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapPlus'),
        px = cms.vdouble(-0.000519297328533, -2.0682880001e-05),
        py = cms.vdouble(0.00282867507264, 6.66930895313e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('gammaEndcapMinus'),
        px = cms.vdouble(-0.00103112559755, 1.33699817646e-05),
        py = cms.vdouble(-0.00209888421545, -3.30667819828e-05),
        type = cms.int32(4),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFPlus'),
        px = cms.vdouble(-0.000392672935556, -9.65693700264e-07),
        py = cms.vdouble(0.000114612488388, -3.44552389568e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('hHFMinus'),
        px = cms.vdouble(-0.00093227965176, 7.74599924874e-07),
        py = cms.vdouble(-2.95036363418e-05, -7.98830257983e-07),
        type = cms.int32(6),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(5.2),
        etaMin = cms.double(2.901376),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFPlus'),
        px = cms.vdouble(0.00275218993341, -1.69184089548e-05),
        py = cms.vdouble(-0.00113061539637, 6.05994897808e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    ),
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        fx = cms.string('(x*[0])+(sq(x)*[1])'),
        fy = cms.string('(x*[0])+(sq(x)*[1])'),
        name = cms.string('egammaHFMinus'),
        px = cms.vdouble(0.00136623849956, -5.55451851761e-06),
        py = cms.vdouble(0.00117549065237, -6.54719096891e-06),
        type = cms.int32(7),
        varType = cms.int32(0)
    )
)

process.patMultPhiCorrParams_ULDATA2016postVFPF = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016postVFPF'),
    px = cms.vdouble(0.134616, -0.89965),
    py = cms.vdouble(0.0397736, 1.0385),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016postVFPG = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016postVFPG'),
    px = cms.vdouble(0.121809, -0.584893),
    py = cms.vdouble(0.0558974, 0.891234),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016postVFPH = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016postVFPH'),
    px = cms.vdouble(0.0868828, -0.703489),
    py = cms.vdouble(0.0888774, 0.902632),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016preVFPB = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPB'),
    px = cms.vdouble(-0.0214894, -0.188255),
    py = cms.vdouble(0.0876624, 0.812885),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016preVFPC = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPC'),
    px = cms.vdouble(-0.032209, 0.067288),
    py = cms.vdouble(0.113917, 0.743906),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016preVFPD = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPD'),
    px = cms.vdouble(-0.0293663, 0.21106),
    py = cms.vdouble(0.11331, 0.815787),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016preVFPE = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPE'),
    px = cms.vdouble(-0.0132046, 0.20073),
    py = cms.vdouble(0.134809, 0.679068),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2016preVFPF = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2016preVFPF'),
    px = cms.vdouble(-0.0543566, 0.816597),
    py = cms.vdouble(0.114225, 1.17266),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2017B = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017B'),
    px = cms.vdouble(-0.211161, 0.419333),
    py = cms.vdouble(0.251789, -1.28089),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2017C = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017C'),
    px = cms.vdouble(-0.185184, -0.164009),
    py = cms.vdouble(0.200941, -0.56853),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2017D = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017D'),
    px = cms.vdouble(-0.201606, 0.426502),
    py = cms.vdouble(0.188208, -0.58313),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2017E = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017E'),
    px = cms.vdouble(-0.162472, 0.176329),
    py = cms.vdouble(0.138076, -0.250239),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2017F = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2017F'),
    px = cms.vdouble(-0.210639, 0.72934),
    py = cms.vdouble(0.198626, 1.028),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2018A = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018A'),
    px = cms.vdouble(0.263733, -1.91115),
    py = cms.vdouble(0.0431304, -0.112043),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2018B = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018B'),
    px = cms.vdouble(0.400466, -3.05914),
    py = cms.vdouble(0.146125, -0.533233),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2018C = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018C'),
    px = cms.vdouble(0.430911, -1.42865),
    py = cms.vdouble(0.0620083, -1.46021),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULDATA2018D = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULDATA2018D'),
    px = cms.vdouble(0.457327, -1.56856),
    py = cms.vdouble(0.0684071, -0.928372),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULMC2016postVFP = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2016postVFP'),
    px = cms.vdouble(-0.153497, -0.231751),
    py = cms.vdouble(0.00731978, 0.243323),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULMC2016preVFP = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2016preVFP'),
    px = cms.vdouble(-0.188743, 0.136539),
    py = cms.vdouble(0.0127927, 0.117747),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULMC2017 = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2017'),
    px = cms.vdouble(-0.300155, 1.90608),
    py = cms.vdouble(0.300213, -2.02232),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.patMultPhiCorrParams_ULMC2018 = cms.VPSet(cms.PSet(
    etaMax = cms.double(9.9),
    etaMin = cms.double(-9.9),
    fx = cms.string('((x*[0])+[1])'),
    fy = cms.string('((x*[0])+[1])'),
    name = cms.string('ULMC2018'),
    px = cms.vdouble(0.183518, 0.546754),
    py = cms.vdouble(0.192263, -0.42121),
    type = cms.int32(0),
    varType = cms.int32(3)
))

process.BToTrkTrkMuMu = cms.EDProducer("BToTrkTrkLLBuilder",
    PUtracks = cms.InputTag("tracksBPH","SelectedTracks"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dileptonMassContraint = cms.bool(True),
    dileptons = cms.InputTag("MuMu","SelectedDiLeptons"),
    ditracks = cms.InputTag("DiTrack"),
    leptonTransientTracks = cms.InputTag("muonBPH","SelectedTransientMuons"),
    postVtxSelection = cms.string('userFloat("sv_prob") > 1.e-3 && userFloat("fitted_cos_theta_2D") >= 0.90 && ( (4.6<userFloat("fitted_mass_KK") && userFloat("fitted_mass_KK")<5.8) || (4.6<userFloat("fitted_mass_Kpi") && userFloat("fitted_mass_Kpi")<5.8 ) || (4.6<userFloat("fitted_mass_piK") && userFloat("fitted_mass_piK")<5.8)) && -0.045<userFloat("trk1_svip2d") && userFloat("trk1_svip2d")<0.045 && -0.045<userFloat("trk2_svip2d") && userFloat("trk2_svip2d")<0.045'),
    preVtxSelection = cms.string('userFloat("min_dr") > 0.03 && ((4.5<userFloat("unfitted_B_mass_KK") && userFloat("unfitted_B_mass_KK")<6.0 ) || (4.5<userFloat("unfitted_B_mass_Kpi") && userFloat("unfitted_B_mass_Kpi")<6.0 ) || (4.5<userFloat("unfitted_B_mass_piK") && userFloat("unfitted_B_mass_piK")<6.0))'),
    transientTracks = cms.InputTag("tracksBPH","SelectedTransientTracks")
)


process.BToTrkTrkMuMuTable = cms.EDProducer("SimpleCompositeCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('BToTrkTrkMuMu Variables'),
    extension = cms.bool(False),
    name = cms.string('BToTrkTrkMuMu'),
    singleton = cms.bool(False),
    src = cms.InputTag("BToTrkTrkMuMu","SelectedBToTrkTrkMuMu"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        charge_l1 = cms.PSet(
            doc = cms.string('charge of the first lepton'),
            expr = cms.string("userInt(\'charge_l1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        charge_l2 = cms.PSet(
            doc = cms.string('charge of the second lepton'),
            expr = cms.string("userInt(\'charge_l2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        charge_trk1 = cms.PSet(
            doc = cms.string('charge of the first track'),
            expr = cms.string("userInt(\'charge_trk1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        charge_trk2 = cms.PSet(
            doc = cms.string('charge of the second track'),
            expr = cms.string("userInt(\'charge_trk2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        chi2 = cms.PSet(
            doc = cms.string('vertex chi^2 of the B candidate'),
            expr = cms.string("userFloat(\'sv_chi2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        cos2D = cms.PSet(
            doc = cms.string('cos 2D of pre-fit candidate wrt beamspot'),
            expr = cms.string("userFloat(\'cos_theta_2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        cos_theta_k = cms.PSet(
            doc = cms.string('cossine of the angle between the direction of the kaon and the direction opposite that of the B0'),
            expr = cms.string("userFloat(\'cos_theta_k\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        cos_theta_l = cms.PSet(
            doc = cms.string('cossine of the angle between the direction of the positive lepton and the direction opposite that of the B0'),
            expr = cms.string("userFloat(\'cos_theta_l\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        dca = cms.PSet(
            doc = cms.string('DCA of B candidate wrt to beamspot'),
            expr = cms.string("userFloat(\'dca\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        dcaErr = cms.PSet(
            doc = cms.string('Error DCA of B candidate wrt to beamspot'),
            expr = cms.string("userFloat(\'dcaErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        eta_l1 = cms.PSet(
            doc = cms.string('pseudorapidity of the positive lepton'),
            expr = cms.string("userFloat(\'eta_l1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        eta_l2 = cms.PSet(
            doc = cms.string('pseudorapidity of the negative lepton'),
            expr = cms.string("userFloat(\'eta_l2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        eta_trk1 = cms.PSet(
            doc = cms.string('pseudorapidity of the first track'),
            expr = cms.string("userFloat(\'eta_trk1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        eta_trk2 = cms.PSet(
            doc = cms.string('pseudorapidity of the second track'),
            expr = cms.string("userFloat(\'eta_trk2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_cos2D = cms.PSet(
            doc = cms.string('cos 2D of fitted vertex wrt beamspot'),
            expr = cms.string("userFloat(\'fitted_cos_theta_2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_ditrack_mass_KK = cms.PSet(
            doc = cms.string('mass of the two track system for the leading trk->Kaon subleading trk->kaon mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_ditrack_mass_KK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_ditrack_mass_Kpi = cms.PSet(
            doc = cms.string('mass of the two track system for the leading trk->Kaon subleading trk->pion mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_ditrack_mass_Kpi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_ditrack_mass_piK = cms.PSet(
            doc = cms.string('mass of the two track system for the leading trk->pion subleading trk->kaon mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_ditrack_mass_piK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_eta = cms.PSet(
            doc = cms.string('post-fit B eta'),
            expr = cms.string("userFloat(\'fitted_eta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_l1_eta = cms.PSet(
            doc = cms.string('post-fit leading mu eta'),
            expr = cms.string("userFloat(\'fitted_l1_eta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_l1_phi = cms.PSet(
            doc = cms.string('post-fit leading mu phi'),
            expr = cms.string("userFloat(\'fitted_l1_phi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_l1_pt = cms.PSet(
            doc = cms.string('post-fit leading mu pT'),
            expr = cms.string("userFloat(\'fitted_l1_pt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_l2_eta = cms.PSet(
            doc = cms.string('post-fit subleading mu eta'),
            expr = cms.string("userFloat(\'fitted_l2_eta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_l2_phi = cms.PSet(
            doc = cms.string('post-fit subleading mu phi'),
            expr = cms.string("userFloat(\'fitted_l2_phi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_l2_pt = cms.PSet(
            doc = cms.string('post-fit subleading mu pT'),
            expr = cms.string("userFloat(\'fitted_l2_pt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_massErr_KK = cms.PSet(
            doc = cms.string('uncertainty of the mass of the B candidate for the leading trk->Kaon subleading trk->pion mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_massErr_KK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_massErr_Kpi = cms.PSet(
            doc = cms.string('uncertainty of the mass of the B candidate for the leading trk->Kaon subleading trk->pion mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_massErr_Kpi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_massErr_piK = cms.PSet(
            doc = cms.string('uncertainty mass of the B candidate for the leading trk->Kaon subleading trk->pion mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_massErr_piK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_mass_KK = cms.PSet(
            doc = cms.string('mass of the B candidate for the leading trk->Kaon subleading trk->kaon mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_mass_KK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_mass_Kpi = cms.PSet(
            doc = cms.string('mass of the B candidate for the leading trk->Kaon subleading trk->pion mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_mass_Kpi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_mass_piK = cms.PSet(
            doc = cms.string('mass of the B candidate for the leading trk->pion subleading trk->kaon mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_mass_piK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_phi = cms.PSet(
            doc = cms.string('post-fit B phi'),
            expr = cms.string("userFloat(\'fitted_phi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_pt = cms.PSet(
            doc = cms.string('post-fit B pT'),
            expr = cms.string("userFloat(\'fitted_pt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_trk1_eta = cms.PSet(
            doc = cms.string('post-fit leading track eta'),
            expr = cms.string("userFloat(\'fitted_trk1_eta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_trk1_phi = cms.PSet(
            doc = cms.string('post-fit leading track phi'),
            expr = cms.string("userFloat(\'fitted_trk1_phi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_trk1_pt = cms.PSet(
            doc = cms.string('post-fit leading track pT'),
            expr = cms.string("userFloat(\'fitted_trk1_pt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_trk2_eta = cms.PSet(
            doc = cms.string('post-fit subleading track eta'),
            expr = cms.string("userFloat(\'fitted_trk2_eta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_trk2_phi = cms.PSet(
            doc = cms.string('post-fit subleading track phi'),
            expr = cms.string("userFloat(\'fitted_trk2_phi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_trk2_pt = cms.PSet(
            doc = cms.string('post-fit subleading track pT'),
            expr = cms.string("userFloat(\'fitted_trk2_pt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l1_dca = cms.PSet(
            doc = cms.string('positive lepton DCA wrt beamspot'),
            expr = cms.string("userFloat(\'l1_dca\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l1_dcaErr = cms.PSet(
            doc = cms.string('positive lepton DCA uncertainty wrt beamspot'),
            expr = cms.string("userFloat(\'l1_dcaErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l1_idx = cms.PSet(
            doc = cms.string('leading muon index to the BPH muon collection'),
            expr = cms.string("userInt(\'l1_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        l1_iso04 = cms.PSet(
            doc = cms.string('leading mu isolation DR<0.4'),
            expr = cms.string("userFloat(\'l1_iso04\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        l2_dca = cms.PSet(
            doc = cms.string('negative lepton DCA wrt beamspot'),
            expr = cms.string("userFloat(\'l2_dca\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l2_dcaErr = cms.PSet(
            doc = cms.string('negative lepton DCA uncertainty wrt beamspot'),
            expr = cms.string("userFloat(\'l2_dcaErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l2_idx = cms.PSet(
            doc = cms.string('subleading muon index to the BPH muon collection'),
            expr = cms.string("userInt(\'l2_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        l2_iso04 = cms.PSet(
            doc = cms.string('subleading mu isolation DR<0.4'),
            expr = cms.string("userFloat(\'l2_iso04\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        l_xy = cms.PSet(
            doc = cms.string('post-fit vertex displacement on transverse plane wrt beamspot'),
            expr = cms.string("userFloat(\'l_xy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l_xy_unc = cms.PSet(
            doc = cms.string('post-fit uncertainty of the vertex displacement on transverse plane wrt beamspot'),
            expr = cms.string("userFloat(\'l_xy_unc\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ll_idx = cms.PSet(
            doc = cms.string('dilepton index to the MuMu collection'),
            expr = cms.string("userInt(\'ll_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        max_dr = cms.PSet(
            doc = cms.string('max DR of the two tracks with the two muons'),
            expr = cms.string("userFloat(\'max_dr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        min_dr = cms.PSet(
            doc = cms.string('min DR of the two tracks with the two muons'),
            expr = cms.string("userFloat(\'min_dr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mll_fullfit = cms.PSet(
            doc = cms.string('post-fit mass of the two muons'),
            expr = cms.string("userFloat(\'fitted_mll\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        phi_angle = cms.PSet(
            doc = cms.string('angle between the plane containing the muons and the plane containing the kaon and the pion from the K star decay'),
            expr = cms.string("userFloat(\'phi_angle\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        phi_l1 = cms.PSet(
            doc = cms.string('phi of the positive lepton'),
            expr = cms.string("userFloat(\'phi_l1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        phi_l2 = cms.PSet(
            doc = cms.string('phi of the negative lepton'),
            expr = cms.string("userFloat(\'phi_l2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        phi_trk1 = cms.PSet(
            doc = cms.string('phi of the first track'),
            expr = cms.string("userFloat(\'phi_trk1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        phi_trk2 = cms.PSet(
            doc = cms.string('phi of the second track'),
            expr = cms.string("userFloat(\'phi_trk2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pt_l1 = cms.PSet(
            doc = cms.string('pT of the positive lepton'),
            expr = cms.string("userFloat(\'pt_l1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pt_l2 = cms.PSet(
            doc = cms.string('pT of the negative lepton'),
            expr = cms.string("userFloat(\'pt_l2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pt_trk1 = cms.PSet(
            doc = cms.string('pT of the first track'),
            expr = cms.string("userFloat(\'pt_trk1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pt_trk2 = cms.PSet(
            doc = cms.string('pT of the second track'),
            expr = cms.string("userFloat(\'pt_trk2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        sum_iso04 = cms.PSet(
            doc = cms.string('sum of the final state particle relative isolations'),
            expr = cms.string("userFloat(\'sum_iso04\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        svprob = cms.PSet(
            doc = cms.string('vertex probability of the B candidate'),
            expr = cms.string("userFloat(\'sv_prob\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        trk1_dca = cms.PSet(
            doc = cms.string('positive track DCA wrt beamspot'),
            expr = cms.string("userFloat(\'trk1_dca\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        trk1_dcaErr = cms.PSet(
            doc = cms.string('positive track DCA uncertainty wrt beamspot'),
            expr = cms.string("userFloat(\'trk1_dcaErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        trk1_idx = cms.PSet(
            doc = cms.string('leading track index to the BPH track collection'),
            expr = cms.string("userInt(\'trk1_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        trk1_iso04 = cms.PSet(
            doc = cms.string('leading track isolation DR<0.4'),
            expr = cms.string("userFloat(\'trk1_iso04\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        trk1_svip2d = cms.PSet(
            doc = cms.string('2D IP of the leading track wrt the dimuon vertex'),
            expr = cms.string("userFloat(\'trk1_svip2d\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        trk1_svip2d_err = cms.PSet(
            doc = cms.string('uncertainty of 2D IP of the leading track wrt the dimuon vertex'),
            expr = cms.string("userFloat(\'trk1_svip2d_err\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        trk2_dca = cms.PSet(
            doc = cms.string('negative track DCA wrt beamspot'),
            expr = cms.string("userFloat(\'trk2_dca\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        trk2_dcaErr = cms.PSet(
            doc = cms.string('negative track DCA uncertainty wrt beamspot'),
            expr = cms.string("userFloat(\'trk2_dcaErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        trk2_idx = cms.PSet(
            doc = cms.string('subleading track index to the BPH track collection'),
            expr = cms.string("userInt(\'trk2_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        trk2_iso04 = cms.PSet(
            doc = cms.string('subleading track isolation DR<0.4'),
            expr = cms.string("userFloat(\'trk2_iso04\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        trk2_svip2d = cms.PSet(
            doc = cms.string('2D IP of the subleading track wrt the dimuon vertex'),
            expr = cms.string("userFloat(\'trk2_svip2d\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        trk2_svip2d_err = cms.PSet(
            doc = cms.string('uncertainty of 2D IP of the subleading track wrt the dimuon vertex'),
            expr = cms.string("userFloat(\'trk2_svip2d_err\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        unfitted_B_mass_KK = cms.PSet(
            doc = cms.string('unfitted B mass KK hypothesis'),
            expr = cms.string("userFloat(\'unfitted_B_mass_KK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        unfitted_B_mass_Kpi = cms.PSet(
            doc = cms.string('unfitted B mass Kpi hypothesis'),
            expr = cms.string("userFloat(\'unfitted_B_mass_Kpi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        unfitted_B_mass_piK = cms.PSet(
            doc = cms.string('unfitted B mass piK hypothesis'),
            expr = cms.string("userFloat(\'unfitted_B_mass_piK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        vtx_cxx = cms.PSet(
            doc = cms.string('error x of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_cxx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_cyx = cms.PSet(
            doc = cms.string('error yx of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_cyx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_cyy = cms.PSet(
            doc = cms.string('error y of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_cyy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_czx = cms.PSet(
            doc = cms.string('error zx of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_czx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_czy = cms.PSet(
            doc = cms.string('error zy of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_czy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_czz = cms.PSet(
            doc = cms.string('error z of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_czz\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_x = cms.PSet(
            doc = cms.string('position x of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_x\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_y = cms.PSet(
            doc = cms.string('position y of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_y\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_z = cms.PSet(
            doc = cms.string('position z of fitted vertex'),
            expr = cms.string("userFloat(\'vtx_z\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.DiTrack = cms.EDProducer("DiTrackBuilder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    postVtxSelection = cms.string('((userFloat("fitted_mass_KK")>0.95 && userFloat("fitted_mass_KK")<1.12) || (userFloat("fitted_mass_Kpi")>0.6 && userFloat("fitted_mass_Kpi")<1.2)  || (userFloat("fitted_mass_piK")>0.6 && userFloat("fitted_mass_piK")<1.2)) && userFloat("sv_prob") > 0.001'),
    preVtxSelection = cms.string('((userFloat("unfitted_mass_KK")>0.95 && userFloat("unfitted_mass_KK")<1.12) || (userFloat("unfitted_mass_Kpi")>0.6 && userFloat("unfitted_mass_Kpi")<1.2) || (userFloat("unfitted_mass_piK")>0.6 && userFloat("unfitted_mass_piK")<1.2)) && charge() == 0'),
    tracks = cms.InputTag("tracksBPH","SelectedTracks"),
    transientTracks = cms.InputTag("tracksBPH","SelectedTransientTracks"),
    trk1Mass = cms.double(0.139),
    trk1Selection = cms.string(''),
    trk2Mass = cms.double(0.494),
    trk2Selection = cms.string('')
)


process.DiTrackTable = cms.EDProducer("SimpleCompositeCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedDiTrack for BPark after basic selection'),
    extension = cms.bool(False),
    name = cms.string('DiTrack'),
    singleton = cms.bool(False),
    src = cms.InputTag("BToTrkTrkMuMu","SelectedTrkTrk"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        cos_theta_2D = cms.PSet(
            doc = cms.string('post-fit cos'),
            expr = cms.string("userFloat(\'fitted_cos_theta_2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_eta = cms.PSet(
            doc = cms.string('post-fit eta of the ditrack candidate'),
            expr = cms.string("userFloat(\'fitted_eta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_mass_KK = cms.PSet(
            doc = cms.string('mass of the ditrack candidate with leading->kaon, subleading->kaon mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_mass_KK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_mass_Kpi = cms.PSet(
            doc = cms.string('mass of the ditrack candidate with leading->kaon, subleading->pion mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_mass_Kpi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_mass_piK = cms.PSet(
            doc = cms.string('mass of the ditrack candidate with leading->pion, subleading->kaon mass hypothesis'),
            expr = cms.string("userFloat(\'fitted_mass_piK\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_phi = cms.PSet(
            doc = cms.string('post-fit phi of the ditrack candidate'),
            expr = cms.string("userFloat(\'fitted_phi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_pt = cms.PSet(
            doc = cms.string('post-fit pt of the ditrack candidate'),
            expr = cms.string("userFloat(\'fitted_pt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l_xy = cms.PSet(
            doc = cms.string('post-fit flight length'),
            expr = cms.string("userFloat(\'l_xy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l_xy_unc = cms.PSet(
            doc = cms.string('post-fit flight length uncertainty'),
            expr = cms.string("userFloat(\'l_xy_unc\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        sv_chi2 = cms.PSet(
            doc = cms.string('vertex chi^2'),
            expr = cms.string("userFloat(\'sv_chi2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        sv_ndof = cms.PSet(
            doc = cms.string('vertex ndof'),
            expr = cms.string("userFloat(\'sv_ndof\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        sv_prob = cms.PSet(
            doc = cms.string('vertex probability'),
            expr = cms.string("userFloat(\'sv_prob\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        svprob = cms.PSet(
            doc = cms.string('post-fit vertex probability of the ditrack candidate'),
            expr = cms.string("userFloat(\'sv_prob\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        trk1_idx = cms.PSet(
            doc = cms.string('index of leading track to the Track collection'),
            expr = cms.string("userInt(\'trk1_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        trk2_idx = cms.PSet(
            doc = cms.string('index of subleading track to the Track collection'),
            expr = cms.string("userInt(\'trk2_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        vtx_cxx = cms.PSet(
            doc = cms.string('post-fit vertex xx uncertainty'),
            expr = cms.string("userFloat(\'vtx_cxx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_cyx = cms.PSet(
            doc = cms.string('post-fit vertex yx uncertainty'),
            expr = cms.string("userFloat(\'vtx_cyx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_cyy = cms.PSet(
            doc = cms.string('post-fit vertex yy uncertainty'),
            expr = cms.string("userFloat(\'vtx_cyy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_czx = cms.PSet(
            doc = cms.string('post-fit vertex zx uncertainty'),
            expr = cms.string("userFloat(\'vtx_czx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_czy = cms.PSet(
            doc = cms.string('post-fit vertex zy uncertainty'),
            expr = cms.string("userFloat(\'vtx_czy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_czz = cms.PSet(
            doc = cms.string('post-fit vertex zz uncertainty'),
            expr = cms.string("userFloat(\'vtx_czz\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_x = cms.PSet(
            doc = cms.string('post-fit vertex x position'),
            expr = cms.string("userFloat(\'vtx_x\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_y = cms.PSet(
            doc = cms.string('post-fit vertex y position'),
            expr = cms.string("userFloat(\'vtx_y\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_z = cms.PSet(
            doc = cms.string('post-fit vertex x position'),
            expr = cms.string("userFloat(\'vtx_z\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.ECFAdder = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("no default"),
    srcWeights = cms.InputTag("puppi")
)


process.HTXSCategoryTable = cms.EDProducer("SimpleHTXSFlatTableProducer",
    doc = cms.string('HTXS classification'),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('HTXS'),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("rivetProducerHTXS","HiggsClassification"),
    variables = cms.PSet(
        Higgs_pt = cms.PSet(
            doc = cms.string('pt of the Higgs boson as identified in HTXS'),
            expr = cms.string('higgs.Pt()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        Higgs_y = cms.PSet(
            doc = cms.string('rapidity of the Higgs boson as identified in HTXS'),
            expr = cms.string('higgs.Rapidity()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        Mjj = cms.PSet(
            doc = cms.string('invariant mass of the dijet (pt>30) system as identified in HTXS'),
            expr = cms.string('Mjj'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        V_pt = cms.PSet(
            doc = cms.string('pt of the vector boson as identified in HTXS'),
            expr = cms.string('V_pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        dPhijj = cms.PSet(
            doc = cms.string('DeltaPhi between jets (pt>30) in dijet system as identified in HTXS'),
            expr = cms.string('dPhijj'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        njets25 = cms.PSet(
            doc = cms.string('number of jets with pt>25 GeV as identified in HTXS'),
            expr = cms.string('jets25.size()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        njets30 = cms.PSet(
            doc = cms.string('number of jets with pt>30 GeV as identified in HTXS'),
            expr = cms.string('jets30.size()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        ptHjj = cms.PSet(
            doc = cms.string('pt of the dijet(pt>30)-plus-higgs system as identified in HTXS'),
            expr = cms.string('ptHjj'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        stage1_1_cat_pTjet25GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.1 category(jet pt>25 GeV)'),
            expr = cms.string('stage1_1_cat_pTjet25GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_1_cat_pTjet30GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.1 category(jet pt>30 GeV)'),
            expr = cms.string('stage1_1_cat_pTjet30GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_1_fine_cat_pTjet25GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.1-fine category(jet pt>25 GeV)'),
            expr = cms.string('stage1_1_fine_cat_pTjet25GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_1_fine_cat_pTjet30GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.1-fine category(jet pt>30 GeV)'),
            expr = cms.string('stage1_1_fine_cat_pTjet30GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_2_cat_pTjet25GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.2 category(jet pt>25 GeV)'),
            expr = cms.string('stage1_2_cat_pTjet25GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_2_cat_pTjet30GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.2 category(jet pt>30 GeV)'),
            expr = cms.string('stage1_2_cat_pTjet30GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_2_fine_cat_pTjet25GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.2-fine category(jet pt>25 GeV)'),
            expr = cms.string('stage1_2_fine_cat_pTjet25GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage1_2_fine_cat_pTjet30GeV = cms.PSet(
            doc = cms.string('HTXS stage-1.2-fine category(jet pt>30 GeV)'),
            expr = cms.string('stage1_2_fine_cat_pTjet30GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage_0 = cms.PSet(
            doc = cms.string('HTXS stage-0 category'),
            expr = cms.string('stage0_cat'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage_1_pTjet25 = cms.PSet(
            doc = cms.string('HTXS stage-1 category (jet pt>25 GeV)'),
            expr = cms.string('stage1_cat_pTjet25GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        stage_1_pTjet30 = cms.PSet(
            doc = cms.string('HTXS stage-1 category (jet pt>30 GeV)'),
            expr = cms.string('stage1_cat_pTjet30GeV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        )
    )
)


process.MCMuonTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==1 muons'),
    mcMap = cms.InputTag("muonBPHMCMatch"),
    objName = cms.string('BPHMuon'),
    objType = cms.string('Muon'),
    src = cms.InputTag("muonBPH","SelectedMuons")
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string(''),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0)
)


process.MuMu = cms.EDProducer("DiMuonBuilder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    lep1Selection = cms.string('pt > 4.0 && abs(eta) < 2.4 && isLooseMuon && isGlobalMuon'),
    lep2Selection = cms.string('pt > 3.0 && abs(eta) < 2.4 && isLooseMuon && isGlobalMuon'),
    postVtxSelection = cms.string('0 < userFloat("fitted_mass") && userFloat("fitted_mass") < 15.0&& userFloat("sv_prob") > 0.001'),
    preVtxSelection = cms.string('abs(userCand("l1").vz - userCand("l2").vz) <= 1.&& 0 < mass() && mass() < 15.0 && charge() == 0&& userFloat("lep_deltaR") > 0.03'),
    src = cms.InputTag("muonBPH","SelectedMuons"),
    transientTracksSrc = cms.InputTag("muonBPH","SelectedTransientMuons")
)


process.MuMuTable = cms.EDProducer("SimpleCompositeCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('Dilepton collections'),
    extension = cms.bool(False),
    name = cms.string('MuMu'),
    singleton = cms.bool(False),
    src = cms.InputTag("MuMu","SelectedDiLeptons"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        cos2D = cms.PSet(
            doc = cms.string('cos 2D of pre-fit candidate wrt beamspot'),
            expr = cms.string("userFloat(\'cos_theta_2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fit_cos2D = cms.PSet(
            doc = cms.string('cos 2D of fitted vertex wrt beamspot'),
            expr = cms.string("userFloat(\'fitted_cos_theta_2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_mass = cms.PSet(
            doc = cms.string('Fitted dilepton mass'),
            expr = cms.string("userFloat(\'fitted_mass\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        fit_massErr = cms.PSet(
            doc = cms.string('post-fit uncertainty of the mass of the B candidate'),
            expr = cms.string("userFloat(\'fitted_massErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        l1_idx = cms.PSet(
            doc = cms.string('leading muon index to the BPH muon collection'),
            expr = cms.string("userInt(\'l1_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        l2_idx = cms.PSet(
            doc = cms.string('subleading muon index to the BPH muon collection'),
            expr = cms.string("userInt(\'l2_idx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        l_xy = cms.PSet(
            doc = cms.string('post-fit vertex displacement on transverse plane wrt beamspot'),
            expr = cms.string("userFloat(\'l_xy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        l_xy_unc = cms.PSet(
            doc = cms.string('post-fit vertex uncertainty of displacement on transverse plane wrt beamspot'),
            expr = cms.string("userFloat(\'l_xy_unc\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        sv_chi2 = cms.PSet(
            doc = cms.string('chi2 Vtx fit'),
            expr = cms.string("userFloat(\'sv_chi2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        sv_ndof = cms.PSet(
            doc = cms.string('ndof fit probability'),
            expr = cms.string("userFloat(\'sv_ndof\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        svprob = cms.PSet(
            doc = cms.string('Vtx fit probability'),
            expr = cms.string("userFloat(\'sv_prob\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        vtx_x = cms.PSet(
            doc = cms.string('Vtx position in x'),
            expr = cms.string("userFloat(\'vtx_x\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_y = cms.PSet(
            doc = cms.string('Vtx position in y'),
            expr = cms.string("userFloat(\'vtx_y\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        vtx_z = cms.PSet(
            doc = cms.string('Vtx position in y'),
            expr = cms.string("userFloat(\'vtx_z\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.NjettinessAK8Puppi = cms.EDProducer("NjettinessAdder",
    Njets = cms.vuint32(1, 2, 3, 4),
    R0 = cms.double(0.8),
    Rcutoff = cms.double(999.0),
    akAxesR0 = cms.double(999.0),
    axesDefinition = cms.uint32(6),
    beta = cms.double(1.0),
    measureDefinition = cms.uint32(0),
    nPass = cms.int32(999),
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("packedpuppi")
)


process.NjettinessAK8Subjets = cms.EDProducer("NjettinessAdder",
    Njets = cms.vuint32(1, 2, 3, 4),
    R0 = cms.double(0.8),
    Rcutoff = cms.double(999.0),
    akAxesR0 = cms.double(999.0),
    axesDefinition = cms.uint32(6),
    beta = cms.double(1.0),
    measureDefinition = cms.uint32(0),
    nPass = cms.int32(999),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    srcWeights = cms.InputTag("packedpuppi")
)


process.QGTagger = cms.EDProducer("QGTagger",
    computeLikelihood = cms.bool(True),
    jec = cms.InputTag(""),
    jetsLabel = cms.string('QGL_AK4PFchs'),
    mightGet = cms.optional.untracked.vstring,
    srcConstituentWeights = cms.InputTag(""),
    srcJets = cms.InputTag("ak4PFJetsCHS"),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll"),
    srcVertexCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    systematicsLabel = cms.string(''),
    useQualityCuts = cms.bool(False)
)


process.TrgMatchMuonTable = cms.EDProducer("SimplePATMuonFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedMuons after basic selection and trigger match'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('BPHMuon'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("muonBPH","SelectedMuons"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        covLamLam = cms.PSet(
            doc = cms.string('Cov of lambda with lambda'),
            expr = cms.string('bestTrack().covariance(1, 1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covLamPhi = cms.PSet(
            doc = cms.string('Cov of lambda with phi'),
            expr = cms.string('bestTrack().covariance(1, 2)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covPhiPhi = cms.PSet(
            doc = cms.string('Cov of phi with phi'),
            expr = cms.string('bestTrack().covariance(2, 2)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covQopLam = cms.PSet(
            doc = cms.string('Cov of q/p with lambda'),
            expr = cms.string('bestTrack().covariance(0, 1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covQopPhi = cms.PSet(
            doc = cms.string('Cov of q/p with phi'),
            expr = cms.string('bestTrack().covariance(0, 2)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covQopQop = cms.PSet(
            doc = cms.string('Cov of q/p with q/p'),
            expr = cms.string('bestTrack().covariance(0, 0)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        dxy = cms.PSet(
            doc = cms.string('dxy (with sign) wrt PV[0] [cm]'),
            expr = cms.string("dB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        dxyErr = cms.PSet(
            doc = cms.string('dxy uncertainty [cm]'),
            expr = cms.string("edB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('dz (with sign) wrt PV[0] [cm]'),
            expr = cms.string("dB(\'PVDZ\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        dzErr = cms.PSet(
            doc = cms.string('dz uncertainty [cm]'),
            expr = cms.string("abs(edB(\'PVDZ\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fired_HLT_DoubleMu4_3_LowMass = cms.PSet(
            doc = cms.string('reco muon fired this trigger'),
            expr = cms.string("userInt(\'HLT_DoubleMu4_3_LowMass\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        fired_HLT_DoubleMu4_LowMass_Displaced = cms.PSet(
            doc = cms.string('reco muon fired this trigger'),
            expr = cms.string("userInt(\'HLT_DoubleMu4_LowMass_Displaced\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        fired_HLT_Mu0_L1DoubleMu = cms.PSet(
            doc = cms.string('reco muon fired this trigger'),
            expr = cms.string("userInt(\'HLT_Mu0_L1DoubleMu\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        fired_HLT_Mu3_PFJet40 = cms.PSet(
            doc = cms.string('reco muon fired this trigger'),
            expr = cms.string("userInt(\'HLT_Mu3_PFJet40\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        fired_HLT_Mu4_L1DoubleMu = cms.PSet(
            doc = cms.string('reco muon fired this trigger'),
            expr = cms.string("userInt(\'HLT_Mu4_L1DoubleMu\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        fired_HLT_Mu8 = cms.PSet(
            doc = cms.string('reco muon fired this trigger'),
            expr = cms.string("userInt(\'HLT_Mu8\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        ip3d = cms.PSet(
            doc = cms.string('3D impact parameter wrt PV[0] [cm]'),
            expr = cms.string("abs(dB(\'PV3D\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        isGlobal = cms.PSet(
            doc = cms.string('muon is global muon'),
            expr = cms.string('isGlobalMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isPFcand = cms.PSet(
            doc = cms.string('muon is PF candidate'),
            expr = cms.string('isPFMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isTracker = cms.PSet(
            doc = cms.string('muon is tracker muon'),
            expr = cms.string('isTrackerMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isTriggering = cms.PSet(
            doc = cms.string('flag the reco muon if matched to HLT object'),
            expr = cms.string("userInt(\'isTriggering\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        looseId = cms.PSet(
            doc = cms.string('cut-based ID, medium WP'),
            expr = cms.string("passed(\'CutBasedIdLoose\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        matched_dpt = cms.PSet(
            doc = cms.string('dpt/pt with the matched triggering muon'),
            expr = cms.string("userFloat(\'trgDPT\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        matched_dr = cms.PSet(
            doc = cms.string('dr with the matched triggering muon'),
            expr = cms.string("userFloat(\'trgDR\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mediumId = cms.PSet(
            doc = cms.string('cut-based ID, medium WP'),
            expr = cms.string("passed(\'CutBasedIdMedium\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        pfRelIso03_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, total (deltaBeta corrections)'),
            expr = cms.string('(pfIsolationR03().sumChargedHadronPt + max(pfIsolationR03().sumNeutralHadronEt + pfIsolationR03().sumPhotonEt - pfIsolationR03().sumPUPt/2,0.0))/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pfRelIso04_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.4, total (deltaBeta corrections)'),
            expr = cms.string('(pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptErr = cms.PSet(
            doc = cms.string('ptError of the muon track'),
            expr = cms.string('bestTrack().ptError()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        sip3d = cms.PSet(
            doc = cms.string('3D impact parameter significance wrt PV[0]'),
            expr = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        softId = cms.PSet(
            doc = cms.string('soft cut-based ID'),
            expr = cms.string("passed(\'SoftCutBasedId\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        softMva = cms.PSet(
            doc = cms.string('soft MVA ID score'),
            expr = cms.string('softMvaValue()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        softMvaId = cms.PSet(
            doc = cms.string('soft MVA ID'),
            expr = cms.string("passed(\'SoftMvaId\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        softMvaRun3 = cms.PSet(
            doc = cms.string('soft MVA Run3 ID score'),
            expr = cms.string('softMvaRun3Value()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        triggerIdLoose = cms.PSet(
            doc = cms.string('TriggerIdLoose ID'),
            expr = cms.string("passed(\'TriggerIdLoose\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        )
    )
)


process.ak4CaloL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector")
)


process.ak4CaloL1FastL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloL6SLBCorrector")
)


process.ak4CaloL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloResidualCorrector")
)


process.ak4CaloL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4CaloL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector")
)


process.ak4CaloL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloResidualCorrector")
)


process.ak4CaloL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4CaloL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector")
)


process.ak4CaloL2L3CorrectorPuppi = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag(cms.InputTag("ak4CaloL2RelativeCorrectorPuppi"), cms.InputTag("ak4CaloL3AbsoluteCorrectorPuppi"))
)


process.ak4CaloL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloL6SLBCorrector")
)


process.ak4CaloL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloResidualCorrector")
)


process.ak4CaloL2L3ResidualCorrectorPuppi = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag(cms.InputTag("ak4CaloL2RelativeCorrectorPuppi"), cms.InputTag("ak4CaloL3AbsoluteCorrectorPuppi"), cms.InputTag("ak4CaloResidualCorrectorPuppi"))
)


process.ak4CaloL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak4CaloL2RelativeCorrectorPuppi = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak4CaloL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak4CaloL3AbsoluteCorrectorPuppi = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak4CaloL6SLBCorrector = cms.EDProducer("L6SLBCorrectorProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4CaloJetsSoftMuonTagInfos")
)


process.ak4CaloResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak4CaloResidualCorrectorPuppi = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak4GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.0),
    Rho_EtaMax = cms.double(4.5),
    applyWeight = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('GenJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("genParticlesForJets"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True)
)


process.ak4GenJetsChargedOnly = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.0),
    Rho_EtaMax = cms.double(4.5),
    applyWeight = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(1),
    jetType = cms.string('GenJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("genParticlesForJetsCharged"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True)
)


process.ak4JPTL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4L1JPTFastjetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector")
)


process.ak4JPTL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4L1JPTFastjetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector", "ak4JPTResidualCorrector")
)


process.ak4JPTL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector")
)


process.ak4JPTL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector", "ak4JPTResidualCorrector")
)


process.ak4JPTL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector")
)


process.ak4JPTL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector", "ak4JPTResidualCorrector")
)


process.ak4JPTL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L2Relative')
)


process.ak4JPTL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L3Absolute')
)


process.ak4JPTResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L2L3Residual')
)


process.ak4L1JPTFastjetCorrector = cms.EDProducer("L1JPTOffsetCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L1JPTOffset'),
    offsetService = cms.InputTag("ak4CaloL1FastjetCorrector")
)


process.ak4L1JPTOffsetCorrector = cms.EDProducer("L1JPTOffsetCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L1JPTOffset'),
    offsetService = cms.InputTag("ak4CaloL1OffsetCorrector")
)


process.ak4PFCHSL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1FastjetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL1FastL2L3CorrectorPuppi = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag(cms.InputTag("ak4PFCHSL1FastjetCorrectorPuppi"), cms.InputTag("ak4PFCHSL2RelativeCorrectorPuppi"), cms.InputTag("ak4PFCHSL3AbsoluteCorrectorPuppi"))
)


process.ak4PFCHSL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1FastjetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector", "ak4PFCHSResidualCorrector")
)


process.ak4PFCHSL1FastL2L3ResidualCorrectorPuppi = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag(cms.InputTag("ak4PFCHSL1FastjetCorrectorPuppi"), cms.InputTag("ak4PFCHSL2RelativeCorrectorPuppi"), cms.InputTag("ak4PFCHSL3AbsoluteCorrectorPuppi"), cms.InputTag("ak4PFCHSResidualCorrectorPuppi"))
)


process.ak4PFCHSL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL1FastjetCorrectorPuppi = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1OffsetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1OffsetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector", "ak4PFCHSResidualCorrector")
)


process.ak4PFCHSL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4PFCHSL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector", "ak4PFCHSResidualCorrector")
)


process.ak4PFCHSL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL2RelativeCorrectorPuppi = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFCHSL3AbsoluteCorrectorPuppi = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFCHSResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak4PFCHSResidualCorrectorPuppi = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsCS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    csRParam = cms.double(0.4),
    csRho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useConstituentSubtraction = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsPuppi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("packedPFCandidates"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("packedpuppi"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFJetsPuppiTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    coneSize = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsPuppi"),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False)
)


process.ak4PFJetsSK = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(5.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("softKiller"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4PFL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL1FastL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFL6SLBCorrector")
)


process.ak4PFL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFResidualCorrector")
)


process.ak4PFL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1OffsetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1OffsetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFResidualCorrector")
)


process.ak4PFL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4PFL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFL6SLBCorrector")
)


process.ak4PFL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFResidualCorrector")
)


process.ak4PFL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2Relative')
)


process.ak4PFL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L3Absolute')
)


process.ak4PFL6SLBCorrector = cms.EDProducer("L6SLBCorrectorProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4PFJetsSoftMuonTagInfos")
)


process.ak4PFPuppiL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFPuppiL1FastjetCorrector", "ak4PFPuppiL2RelativeCorrector", "ak4PFPuppiL3AbsoluteCorrector")
)


process.ak4PFPuppiL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFPuppiL1FastjetCorrector", "ak4PFPuppiL2RelativeCorrector", "ak4PFPuppiL3AbsoluteCorrector", "ak4PFPuppiResidualCorrector")
)


process.ak4PFPuppiL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFPuppi'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFPuppiL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFPuppiL1OffsetCorrector", "ak4PFPuppiL2RelativeCorrector", "ak4PFPuppiL3AbsoluteCorrector")
)


process.ak4PFPuppiL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFPuppiL1OffsetCorrector", "ak4PFPuppiL2RelativeCorrector", "ak4PFPuppiL3AbsoluteCorrector", "ak4PFPuppiResidualCorrector")
)


process.ak4PFPuppiL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK4PFPuppi'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4PFPuppiL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFPuppiL2RelativeCorrector", "ak4PFPuppiL3AbsoluteCorrector")
)


process.ak4PFPuppiL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFPuppiL2RelativeCorrector", "ak4PFPuppiL3AbsoluteCorrector", "ak4PFPuppiResidualCorrector")
)


process.ak4PFPuppiL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFPuppi'),
    level = cms.string('L2Relative')
)


process.ak4PFPuppiL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFPuppi'),
    level = cms.string('L3Absolute')
)


process.ak4PFPuppiResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFPuppi'),
    level = cms.string('L2L3Residual')
)


process.ak4PFResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2L3Residual')
)


process.ak4TrackL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4TrackL2RelativeCorrector", "ak4TrackL3AbsoluteCorrector")
)


process.ak4TrackL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4TRK'),
    level = cms.string('L2Relative')
)


process.ak4TrackL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4TRK'),
    level = cms.string('L3Absolute')
)


process.ak8PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("pfNoPileUpJME"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCHSConstituents = cms.EDProducer("PFJetConstituentSelector",
    cut = cms.string('pt > 100.0 && abs(rapidity()) < 2.4'),
    src = cms.InputTag("ak8PFJetsCHS")
)


process.ak8PFJetsCHSFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nFilt = cms.int32(3),
    nSigmaPU = cms.double(1.0),
    rFilt = cms.double(0.3),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useFiltering = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True)
)


process.ak8PFJetsCHSMassDropFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    muCut = cms.double(0.667),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useMassDropTagger = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    yCut = cms.double(0.08)
)


process.ak8PFJetsCHSPruned = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nFilt = cms.int32(2),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    rcut_factor = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    usePruning = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsCHSSoftDrop = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    R0 = cms.double(0.8),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    beta = cms.double(0.0),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useSoftDrop = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsCHSTrimmed = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rFilt = cms.double(0.2),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsCHSConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    trimPtFracMin = cms.double(0.03),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useTrimming = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    csRParam = cms.double(0.4),
    csRho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useConstituentSubtraction = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsCSConstituents = cms.EDProducer("PFJetConstituentSelector",
    cut = cms.string('pt > 100.0'),
    src = cms.InputTag("ak8PFJetsCS")
)


process.ak8PFJetsPuppi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(50.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("packedPFCandidates"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("packedpuppi"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak8PFJetsPuppiConstituents = cms.EDProducer("MiniAODJetConstituentSelector",
    cut = cms.string('pt > 100.0 && abs(rapidity()) < 2.4'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi")
)


process.ak8PFJetsPuppiSoftDrop = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    R0 = cms.double(0.8),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(True),
    beta = cms.double(0.0),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetCollInstanceName = cms.string('SubJets'),
    jetPtMin = cms.double(100.0),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("ak8PFJetsPuppiConstituents","constituents"),
    srcPVs = cms.InputTag(""),
    srcWeights = cms.InputTag("packedpuppi"),
    useDeterministicSeed = cms.bool(True),
    useExplicitGhosts = cms.bool(True),
    useSoftDrop = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    writeCompound = cms.bool(True),
    zcut = cms.double(0.1)
)


process.ak8PFJetsPuppiSoftDropMass = cms.EDProducer("RecoJetDeltaRValueMapProducer",
    distMax = cms.double(0.8),
    matched = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    src = cms.InputTag("ak8PFJetsPuppi"),
    value = cms.string('mass')
)


process.bJetVars = cms.EDProducer("JetRegressionVarProducer",
    pvsrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    src = cms.InputTag("updatedJets"),
    svsrc = cms.InputTag("slimmedSecondaryVertices")
)


process.basicJetsForMetForT1METNano = cms.EDProducer("PATJetCleanerForType1MET",
    calcMuonSubtrRawPtAsValueMap = cms.bool(True),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(False),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("updatedJets"),
    type1JetPtThreshold = cms.double(0.0)
)


process.basicJetsForMetPuppi = cms.EDProducer("PATJetCleanerForType1MET",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("patJetsPuppi"),
    type1JetPtThreshold = cms.double(15.0)
)


process.basicJetsPuppiForMetForT1METNano = cms.EDProducer("PATJetCleanerForType1MET",
    calcMuonSubtrRawPtAsValueMap = cms.bool(True),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(False),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("updatedJetsPuppi"),
    type1JetPtThreshold = cms.double(0.0)
)


process.beamSpotTable = cms.EDProducer("SimpleBeamspotFlatTableProducer",
    doc = cms.string('offlineBeamSpot, the offline reconstructed beamspot'),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('BeamSpot'),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("offlineBeamSpot"),
    variables = cms.PSet(
        sigmaZ = cms.PSet(
            doc = cms.string('Width of BeamSpot in z (cm)'),
            expr = cms.string('sigmaZ()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        sigmaZError = cms.PSet(
            doc = cms.string('Error on width of BeamSpot in z (cm)'),
            expr = cms.string('sigmaZ0Error()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        type = cms.PSet(
            doc = cms.string('BeamSpot type (Unknown = -1, Fake = 0, LHC = 1, Tracker = 2)'),
            expr = cms.string('type()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        z = cms.PSet(
            doc = cms.string('BeamSpot center, z coordinate (cm)'),
            expr = cms.string('position().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        zError = cms.PSet(
            doc = cms.string('Error on BeamSpot center, z coordinate (cm)'),
            expr = cms.string('z0Error()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.bitmapVIDForEle = cms.EDProducer("EleVIDNestedWPBitmapProducer",
    WorkingPoints = cms.vstring(
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-veto',
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-loose',
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-medium',
        'egmGsfElectronIDs:cutBasedElectronID-RunIIIWinter22-V1-tight'
    ),
    src = cms.InputTag("slimmedElectrons"),
    srcForID = cms.InputTag("reducedEgamma","reducedGedGsfElectrons")
)


process.bitmapVIDForEleFall17V2 = cms.EDProducer("EleVIDNestedWPBitmapProducer",
    WorkingPoints = cms.vstring(
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-veto',
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-loose',
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-medium',
        'egmGsfElectronIDs:cutBasedElectronID-Fall17-94X-V2-tight'
    ),
    src = cms.InputTag("slimmedElectrons"),
    srcForID = cms.InputTag("reducedEgamma","reducedGedGsfElectrons")
)


process.bitmapVIDForEleHEEP = cms.EDProducer("EleVIDNestedWPBitmapProducer",
    WorkingPoints = cms.vstring('egmGsfElectronIDs:heepElectronID-HEEPV70'),
    src = cms.InputTag("slimmedElectrons"),
    srcForID = cms.InputTag("reducedEgamma","reducedGedGsfElectrons")
)


process.bitmapVIDForPho = cms.EDProducer("PhoVIDNestedWPBitmapProducer",
    WorkingPoints = cms.vstring(
        'egmPhotonIDs:cutBasedPhotonID-RunIIIWinter22-122X-V1-loose',
        'egmPhotonIDs:cutBasedPhotonID-RunIIIWinter22-122X-V1-medium',
        'egmPhotonIDs:cutBasedPhotonID-RunIIIWinter22-122X-V1-tight'
    ),
    src = cms.InputTag("slimmedPhotons"),
    srcForID = cms.InputTag("reducedEgamma","reducedGedPhotons")
)


process.bitmapVIDForPhoRun2 = cms.EDProducer("PhoVIDNestedWPBitmapProducer",
    WorkingPoints = cms.vstring(
        'egmPhotonIDs:cutBasedPhotonID-Fall17-94X-V2-loose',
        'egmPhotonIDs:cutBasedPhotonID-Fall17-94X-V2-medium',
        'egmPhotonIDs:cutBasedPhotonID-Fall17-94X-V2-tight'
    ),
    src = cms.InputTag("slimmedPhotons"),
    srcForID = cms.InputTag("reducedEgamma","reducedGedPhotons")
)


process.bjetNN = cms.EDProducer("BJetEnergyRegressionMVA",
    backend = cms.string('ONNX'),
    batch_eval = cms.bool(True),
    inputTensorName = cms.string('ffwd_inp:0'),
    name = cms.string('JetRegNN'),
    outputFormulas = cms.vstring(
        'at(0)*0.27912887930870056+1.0545977354049683',
        '0.5*(at(2)-at(1))*0.27912887930870056'
    ),
    outputNames = cms.vstring(
        'corr',
        'res'
    ),
    outputTensorName = cms.string('ffwd_out/BiasAdd:0'),
    pvsrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rhosrc = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("linkedObjects","jets"),
    svsrc = cms.InputTag("slimmedSecondaryVertices"),
    variables = cms.VPSet(
        cms.PSet(
            expr = cms.string("pt*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_pt')
        ),
        cms.PSet(
            expr = cms.string('eta'),
            name = cms.string('Jet_eta')
        ),
        cms.PSet(
            name = cms.string('rho')
        ),
        cms.PSet(
            expr = cms.string("mt*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_mt')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leadTrackPt\')"),
            name = cms.string('Jet_leadTrackPt')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leptonPtRelv0\')"),
            name = cms.string('Jet_leptonPtRel')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leptonDeltaR\')"),
            name = cms.string('Jet_leptonDeltaR')
        ),
        cms.PSet(
            expr = cms.string('neutralHadronEnergyFraction()'),
            name = cms.string('Jet_neHEF')
        ),
        cms.PSet(
            expr = cms.string('neutralEmEnergyFraction()'),
            name = cms.string('Jet_neEmEF')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtxPt\')"),
            name = cms.string('Jet_vtxPt')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtxMass\')"),
            name = cms.string('Jet_vtxMass')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtx3dL\')"),
            name = cms.string('Jet_vtx3dL')
        ),
        cms.PSet(
            expr = cms.string("userInt(\'vtxNtrk\')"),
            name = cms.string('Jet_vtxNtrk')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtx3deL\')"),
            name = cms.string('Jet_vtx3deL')
        ),
        cms.PSet(
            name = cms.string('Jet_numDaughters_pt03')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            expr = cms.string('chargedHadronEnergyFraction()'),
            name = cms.string('Jet_chHEF')
        ),
        cms.PSet(
            expr = cms.string('chargedEmEnergyFraction()'),
            name = cms.string('Jet_chEmEF')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leptonPtRelInvv0\')*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_leptonPtRelInv')
        ),
        cms.PSet(
            expr = cms.string("?abs(userInt(\'leptonPdgId\'))==11?1:0"),
            name = cms.string('isEle')
        ),
        cms.PSet(
            expr = cms.string("?abs(userInt(\'leptonPdgId\'))==13?1:0"),
            name = cms.string('isMu')
        ),
        cms.PSet(
            expr = cms.string("?userInt(\'leptonPdgId\')==0?1:0"),
            name = cms.string('isOther')
        ),
        cms.PSet(
            expr = cms.string("mass*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_mass')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'ptD\')"),
            name = cms.string('Jet_ptd')
        )
    ),
    weightFile = cms.FileInPath('PhysicsTools/NanoAOD/data/breg_training_2018.onnx')
)


process.boostedDeepTau20161718v2p0BoostedForNano = cms.EDProducer("DeepTauId",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    VSeWP = cms.vstring('-1.'),
    VSjetWP = cms.vstring('-1.'),
    VSmuWP = cms.vstring('-1.'),
    basicTauDiscriminators = cms.untracked.InputTag("basicTauDiscriminators"),
    basicTauDiscriminatorsdR03 = cms.untracked.InputTag("basicTauDiscriminatorsdR03"),
    debug_level = cms.int32(0),
    disable_CellIndex_workaround = cms.bool(True),
    disable_dxy_pca = cms.bool(True),
    disable_hcalFraction_workaround = cms.bool(True),
    electrons = cms.InputTag("slimmedElectrons"),
    graph_file = cms.vstring(
        'core:RecoTauTag/TrainingFiles/data/BoostedDeepTauId/boosteddeepTau_RunIIv2p0_core.pb',
        'inner:RecoTauTag/TrainingFiles/data/BoostedDeepTauId/boosteddeepTau_RunIIv2p0_inner.pb',
        'outer:RecoTauTag/TrainingFiles/data/BoostedDeepTauId/boosteddeepTau_RunIIv2p0_outer.pb'
    ),
    is_online = cms.bool(False),
    mem_mapped = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    muons = cms.InputTag("slimmedMuons"),
    pfTauTransverseImpactParameters = cms.InputTag("hpsPFTauTransverseImpactParameters"),
    pfcands = cms.InputTag("packedPFCandidates"),
    rho = cms.InputTag("fixedGridRhoAll"),
    save_inputs = cms.bool(False),
    sub_version = cms.uint32(0),
    taus = cms.InputTag("slimmedTausBoosted","","@skipCurrentProcess"),
    version = cms.uint32(2),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    year = cms.uint32(20161718)
)


process.boostedTauMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==2 taus'),
    mcMap = cms.InputTag("boostedTausMCMatchLepTauForTable"),
    mcMapVisTau = cms.InputTag("boostedTausMCMatchHadTauForTable"),
    objName = cms.string('boostedTau'),
    objType = cms.string('Tau'),
    src = cms.InputTag("linkedObjects","boostedTaus")
)


process.boostedTauTable = cms.EDProducer("SimplePATTauFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string("slimmedBoostedTaus after basic selection (pt > 25 && tauID(\'decayModeFindingNewDMs\') && (tauID(\'byVVLooseIsolationMVArun2DBoldDMwLT\') || tauID(\'byVVLooseIsolationMVArun2DBnewDMwLT\') || tauID(\'byBoostedDeepTau20161718v2p0VSjetraw\') > 0.82))"),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('boostedTau'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","boostedTaus"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        chargedIso = cms.PSet(
            doc = cms.string('charged isolation'),
            expr = cms.string("tauID(\'chargedIsoPtSum\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        decayMode = cms.PSet(
            doc = cms.string('decayMode()'),
            expr = cms.string('decayMode()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        idAntiEle2018 = cms.PSet(
            doc = cms.string('Anti-electron MVA discriminator V6 (2018): 1 = VLoose, 2 = Loose, 3 = Medium, 4 = Tight, 5 = VTight'),
            expr = cms.string("?isTauIDAvailable(\'againstElectronVLooseMVA6\')?(tauID(\'againstElectronVLooseMVA6\') + tauID(\'againstElectronLooseMVA6\') + tauID(\'againstElectronMediumMVA6\') + tauID(\'againstElectronTightMVA6\') + tauID(\'againstElectronVTightMVA6\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        idAntiMu = cms.PSet(
            doc = cms.string('Anti-muon discriminator V3: : 1 = Loose, 2 = Tight'),
            expr = cms.string("?isTauIDAvailable(\'againstMuonLoose3\')?(tauID(\'againstMuonLoose3\') + tauID(\'againstMuonTight3\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        idMVAnewDM2017v2 = cms.PSet(
            doc = cms.string('IsolationMVArun2DBnewDMwLT ID working point (2017v2): 1 = VVLoose, 2 = VLoose, 3 = Loose, 4 = Medium, 5 = Tight, 6 = VTight, 7 = VVTight'),
            expr = cms.string("?isTauIDAvailable(\'byVVLooseIsolationMVArun2DBnewDMwLT\')?(tauID(\'byVVLooseIsolationMVArun2DBnewDMwLT\') + tauID(\'byVLooseIsolationMVArun2DBnewDMwLT\') + tauID(\'byLooseIsolationMVArun2DBnewDMwLT\') + tauID(\'byMediumIsolationMVArun2DBnewDMwLT\') + tauID(\'byTightIsolationMVArun2DBnewDMwLT\') + tauID(\'byVTightIsolationMVArun2DBnewDMwLT\') + tauID(\'byVVTightIsolationMVArun2DBnewDMwLT\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        idMVAoldDM2017v2 = cms.PSet(
            doc = cms.string('IsolationMVArun2DBoldDMwLT ID working point (2017v2): 1 = VVLoose, 2 = VLoose, 3 = Loose, 4 = Medium, 5 = Tight, 6 = VTight, 7 = VVTight'),
            expr = cms.string("?isTauIDAvailable(\'byVVLooseIsolationMVArun2DBoldDMwLT\')?(tauID(\'byVVLooseIsolationMVArun2DBoldDMwLT\') + tauID(\'byVLooseIsolationMVArun2DBoldDMwLT\') + tauID(\'byLooseIsolationMVArun2DBoldDMwLT\') + tauID(\'byMediumIsolationMVArun2DBoldDMwLT\') + tauID(\'byTightIsolationMVArun2DBoldDMwLT\') + tauID(\'byVTightIsolationMVArun2DBoldDMwLT\') + tauID(\'byVVTightIsolationMVArun2DBoldDMwLT\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        jetIdx = cms.PSet(
            doc = cms.string('index of the associated jet (-1 if none)'),
            expr = cms.string("?hasUserCand(\'jet\')?userCand(\'jet\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        leadTkDeltaEta = cms.PSet(
            doc = cms.string('eta of the leading track, minus tau eta'),
            expr = cms.string('leadChargedHadrCand.eta - eta '),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        leadTkDeltaPhi = cms.PSet(
            doc = cms.string('phi of the leading track, minus tau phi'),
            expr = cms.string('deltaPhi(leadChargedHadrCand.phi, phi) '),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        leadTkPtOverTauPt = cms.PSet(
            doc = cms.string('pt of the leading track divided by tau pt'),
            expr = cms.string('leadChargedHadrCand.pt/pt '),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neutralIso = cms.PSet(
            doc = cms.string('neutral (photon) isolation'),
            expr = cms.string("tauID(\'neutralIsoPtSum\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        photonsOutsideSignalCone = cms.PSet(
            doc = cms.string('sum of photons outside signal cone'),
            expr = cms.string("tauID(\'photonPtSumOutsideSignalCone\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        puCorr = cms.PSet(
            doc = cms.string('pileup correction'),
            expr = cms.string("tauID(\'puCorrPtSum\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawAntiEle2018 = cms.PSet(
            doc = cms.string('Anti-electron MVA discriminator V6 raw output discriminator (2018)'),
            expr = cms.string("tauID(\'againstElectronMVA6Raw\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawAntiEleCat2018 = cms.PSet(
            doc = cms.string('Anti-electron MVA discriminator V6 category (2018)'),
            expr = cms.string("tauID(\'againstElectronMVA6category\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        rawBoostedDeepTauRunIIv2p0VSe = cms.PSet(
            doc = cms.string('BoostedDeepTau(v2p0) tagger for boostedTaus raw scores Vs e'),
            expr = cms.string("tauID(\'byBoostedDeepTau20161718v2p0VSeraw\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawBoostedDeepTauRunIIv2p0VSjet = cms.PSet(
            doc = cms.string('BoostedDeepTau(v2p0) tagger for boostedTaus raw scores Vs jet'),
            expr = cms.string("tauID(\'byBoostedDeepTau20161718v2p0VSjetraw\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawBoostedDeepTauRunIIv2p0VSmu = cms.PSet(
            doc = cms.string('BoostedDeepTau(v2p0) tagger for boostedTaus raw scores Vs mu'),
            expr = cms.string("tauID(\'byBoostedDeepTau20161718v2p0VSmuraw\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawIso = cms.PSet(
            doc = cms.string('combined isolation (deltaBeta corrections)'),
            expr = cms.string("tauID(\'byCombinedIsolationDeltaBetaCorrRaw3Hits\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawIsodR03 = cms.PSet(
            doc = cms.string('combined isolation (deltaBeta corrections, dR=0.3)'),
            expr = cms.string("(tauID(\'chargedIsoPtSumdR03\')+max(0.,tauID(\'neutralIsoPtSumdR03\')-0.072*tauID(\'puCorrPtSum\')))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawMVAnewDM2017v2 = cms.PSet(
            doc = cms.string('byIsolationMVArun2DBnewDMwLT raw output discriminator (2017v2)'),
            expr = cms.string("tauID(\'byIsolationMVArun2DBnewDMwLTraw\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawMVAoldDM2017v2 = cms.PSet(
            doc = cms.string('byIsolationMVArun2DBoldDMwLT raw output discriminator (2017v2)'),
            expr = cms.string("tauID(\'byIsolationMVArun2DBoldDMwLTraw\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.boostedTausMCMatchHadTauForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("genVisTaus"),
    maxDPtRel = cms.double(1.0),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(15),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","boostedTaus")
)


process.boostedTausMCMatchLepTauForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticles"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11, 13),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","boostedTaus")
)


process.calibratedPatElectronsNano = cms.EDProducer("CalibratedPatElectronProducer",
    correctionFile = cms.string('EgammaAnalysis/ElectronTools/data/ScalesSmearings/Run2017_24Feb2020_runEtaR9Gain_v2'),
    epCombConfig = cms.PSet(
        ecalTrkRegressionConfig = cms.PSet(
            ebHighEtForestName = cms.ESInputTag("","electron_eb_ECALTRK"),
            ebLowEtForestName = cms.ESInputTag("","electron_eb_ECALTRK_lowpt"),
            eeHighEtForestName = cms.ESInputTag("","electron_ee_ECALTRK"),
            eeLowEtForestName = cms.ESInputTag("","electron_ee_ECALTRK_lowpt"),
            forceHighEnergyTrainingIfSaturated = cms.bool(False),
            lowEtHighEtBoundary = cms.double(50.0),
            rangeMaxHighEt = cms.double(3.0),
            rangeMaxLowEt = cms.double(3.0),
            rangeMinHighEt = cms.double(-1.0),
            rangeMinLowEt = cms.double(-1.0)
        ),
        ecalTrkRegressionUncertConfig = cms.PSet(
            ebHighEtForestName = cms.ESInputTag("","electron_eb_ECALTRK_var"),
            ebLowEtForestName = cms.ESInputTag("","electron_eb_ECALTRK_lowpt_var"),
            eeHighEtForestName = cms.ESInputTag("","electron_ee_ECALTRK_var"),
            eeLowEtForestName = cms.ESInputTag("","electron_ee_ECALTRK_lowpt_var"),
            forceHighEnergyTrainingIfSaturated = cms.bool(False),
            lowEtHighEtBoundary = cms.double(50.0),
            rangeMaxHighEt = cms.double(0.5),
            rangeMaxLowEt = cms.double(0.5),
            rangeMinHighEt = cms.double(0.0002),
            rangeMinLowEt = cms.double(0.0002)
        ),
        maxEPDiffInSigmaForComb = cms.double(15.0),
        maxEcalEnergyForComb = cms.double(200.0),
        maxRelTrkMomErrForComb = cms.double(10.0),
        minEOverPForComb = cms.double(0.025)
    ),
    mightGet = cms.optional.untracked.vstring,
    minEtToCalibrate = cms.double(5.0),
    produceCalibratedObjs = cms.bool(False),
    recHitCollectionEB = cms.InputTag("reducedEgamma","reducedEBRecHits"),
    recHitCollectionEE = cms.InputTag("reducedEgamma","reducedEERecHits"),
    semiDeterministic = cms.bool(True),
    src = cms.InputTag("slimmedElectrons"),
    valueMapsStored = cms.vstring(
        'energyScaleStatUp',
        'energyScaleStatDown',
        'energyScaleSystUp',
        'energyScaleSystDown',
        'energyScaleGainUp',
        'energyScaleGainDown',
        'energySigmaRhoUp',
        'energySigmaRhoDown',
        'energySigmaPhiUp',
        'energySigmaPhiDown',
        'energyScaleUp',
        'energyScaleDown',
        'energySigmaUp',
        'energySigmaDown',
        'energyScaleValue',
        'energySigmaValue',
        'energySmearNrSigma',
        'ecalEnergyPreCorr',
        'ecalEnergyErrPreCorr',
        'ecalEnergyPostCorr',
        'ecalEnergyErrPostCorr',
        'ecalTrkEnergyPreCorr',
        'ecalTrkEnergyErrPreCorr',
        'ecalTrkEnergyPostCorr',
        'ecalTrkEnergyErrPostCorr'
    )
)


process.calibratedPatPhotonsNano = cms.EDProducer("CalibratedPatPhotonProducer",
    correctionFile = cms.string('EgammaAnalysis/ElectronTools/data/ScalesSmearings/Run2017_24Feb2020_runEtaR9Gain_v2'),
    mightGet = cms.optional.untracked.vstring,
    minEtToCalibrate = cms.double(5.0),
    produceCalibratedObjs = cms.bool(False),
    recHitCollectionEB = cms.InputTag("reducedEgamma","reducedEBRecHits"),
    recHitCollectionEE = cms.InputTag("reducedEgamma","reducedEERecHits"),
    semiDeterministic = cms.bool(True),
    src = cms.InputTag("slimmedPhotons"),
    valueMapsStored = cms.vstring(
        'energyScaleStatUp',
        'energyScaleStatDown',
        'energyScaleSystUp',
        'energyScaleSystDown',
        'energyScaleGainUp',
        'energyScaleGainDown',
        'energySigmaRhoUp',
        'energySigmaRhoDown',
        'energySigmaPhiUp',
        'energySigmaPhiDown',
        'energyScaleUp',
        'energyScaleDown',
        'energySigmaUp',
        'energySigmaDown',
        'energyScaleValue',
        'energySigmaValue',
        'energySmearNrSigma',
        'ecalEnergyPreCorr',
        'ecalEnergyErrPreCorr',
        'ecalEnergyPostCorr',
        'ecalEnergyErrPostCorr'
    )
)


process.caloMetT1 = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("caloMetM"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrCaloMetType1","type1"))
)


process.caloMetT1Puppi = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("caloMetM"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrCaloMetType1Puppi","type1"))
)


process.caloMetT1T2 = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("caloMetM"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrCaloMetType1","type1"), cms.InputTag("corrCaloMetType2"))
)


process.caloMetT1T2Puppi = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("caloMetM"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrCaloMetType1Puppi","type1"), cms.InputTag("corrCaloMetType2Puppi"))
)


process.caloMetTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('Offline CaloMET (muon corrected)'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('CaloMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('caloMETPhi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('caloMETPt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sumEt = cms.PSet(
            doc = cms.string('scalar sum of Et'),
            expr = cms.string('caloMETSumEt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.categorizeGenTtbar = cms.EDProducer("GenTtbarCategorizer",
    genBHadFlavour = cms.InputTag("matchGenBHadron","genBHadFlavour"),
    genBHadFromTopWeakDecay = cms.InputTag("matchGenBHadron","genBHadFromTopWeakDecay"),
    genBHadIndex = cms.InputTag("matchGenBHadron","genBHadIndex"),
    genBHadJetIndex = cms.InputTag("matchGenBHadron","genBHadJetIndex"),
    genBHadLeptonHadronIndex = cms.InputTag("matchGenBHadron","genBHadLeptonHadronIndex"),
    genBHadLeptonViaTau = cms.InputTag("matchGenBHadron","genBHadLeptonViaTau"),
    genBHadPlusMothers = cms.InputTag("matchGenBHadron","genBHadPlusMothers"),
    genBHadPlusMothersIndices = cms.InputTag("matchGenBHadron","genBHadPlusMothersIndices"),
    genCHadBHadronId = cms.InputTag("matchGenCHadron","genCHadBHadronId"),
    genCHadFlavour = cms.InputTag("matchGenCHadron","genCHadFlavour"),
    genCHadFromTopWeakDecay = cms.InputTag("matchGenCHadron","genCHadFromTopWeakDecay"),
    genCHadJetIndex = cms.InputTag("matchGenCHadron","genCHadJetIndex"),
    genJetAbsEtaMax = cms.double(2.4),
    genJetPtMin = cms.double(20),
    genJets = cms.InputTag("slimmedGenJets"),
    mightGet = cms.optional.untracked.vstring
)


process.cjetNN = cms.EDProducer("BJetEnergyRegressionMVA",
    backend = cms.string('ONNX'),
    batch_eval = cms.bool(True),
    inputTensorName = cms.string('ffwd_inp:0'),
    name = cms.string('JetRegNN'),
    outputFormulas = cms.vstring(
        'at(0)*0.24325256049633026+0.993854820728302',
        '0.5*(at(2)-at(1))*0.24325256049633026'
    ),
    outputNames = cms.vstring(
        'corr',
        'res'
    ),
    outputTensorName = cms.string('ffwd_out/BiasAdd:0'),
    pvsrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rhosrc = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("linkedObjects","jets"),
    svsrc = cms.InputTag("slimmedSecondaryVertices"),
    variables = cms.VPSet(
        cms.PSet(
            expr = cms.string("pt*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_pt')
        ),
        cms.PSet(
            expr = cms.string('eta'),
            name = cms.string('Jet_eta')
        ),
        cms.PSet(
            name = cms.string('rho')
        ),
        cms.PSet(
            expr = cms.string("mt*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_mt')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leadTrackPt\')"),
            name = cms.string('Jet_leadTrackPt')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leptonPtRelv0\')"),
            name = cms.string('Jet_leptonPtRel')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'leptonDeltaR\')"),
            name = cms.string('Jet_leptonDeltaR')
        ),
        cms.PSet(
            expr = cms.string('neutralHadronEnergyFraction()'),
            name = cms.string('Jet_neHEF')
        ),
        cms.PSet(
            expr = cms.string('neutralEmEnergyFraction()'),
            name = cms.string('Jet_neEmEF')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtxPt\')"),
            name = cms.string('Jet_vtxPt')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtxMass\')"),
            name = cms.string('Jet_vtxMass')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtx3dL\')"),
            name = cms.string('Jet_vtx3dL')
        ),
        cms.PSet(
            expr = cms.string("userInt(\'vtxNtrk\')"),
            name = cms.string('Jet_vtxNtrk')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'vtx3deL\')"),
            name = cms.string('Jet_vtx3deL')
        ),
        cms.PSet(
            name = cms.string('Jet_numDaughters_pt03')
        ),
        cms.PSet(
            expr = cms.string('chargedEmEnergyFraction()'),
            name = cms.string('Jet_chEmEF')
        ),
        cms.PSet(
            expr = cms.string('chargedHadronEnergyFraction()'),
            name = cms.string('Jet_chHEF')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'ptD\')"),
            name = cms.string('Jet_ptd')
        ),
        cms.PSet(
            expr = cms.string("mass*jecFactor(\'Uncorrected\')"),
            name = cms.string('Jet_mass')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_em_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_neut_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_ch_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR0_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR1_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR2_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR3_mu_Jet_rawEnergy')
        ),
        cms.PSet(
            name = cms.string('Jet_energyRing_dR4_mu_Jet_rawEnergy')
        )
    ),
    weightFile = cms.FileInPath('PhysicsTools/NanoAOD/data/creg_training_2018.onnx')
)


process.cleanedPatJetsPuppi = cms.EDProducer("PATJetCleaner",
    checkOverlaps = cms.PSet(
        electrons = cms.PSet(
            algorithm = cms.string('byDeltaR'),
            checkRecoComponents = cms.bool(False),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False),
            src = cms.InputTag("slimmedElectrons")
        ),
        muons = cms.PSet(
            algorithm = cms.string('byDeltaR'),
            checkRecoComponents = cms.bool(False),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False),
            src = cms.InputTag("slimmedMuons")
        )
    ),
    finalCut = cms.string(''),
    preselection = cms.string(''),
    src = cms.InputTag("jetSelectorForMetPuppi")
)


process.corrCaloMetType1 = cms.EDProducer("CaloJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("ak4CaloL2L3Corrector"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    src = cms.InputTag("ak4CaloJets"),
    srcMET = cms.InputTag("caloMetM"),
    type1JetPtThreshold = cms.double(20.0)
)


process.corrCaloMetType1Puppi = cms.EDProducer("CaloJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("ak4CaloL2L3CorrectorPuppi"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    src = cms.InputTag("ak4CaloJets"),
    srcMET = cms.InputTag("caloMetM"),
    type1JetPtThreshold = cms.double(20.0)
)


process.corrCaloMetType2 = cms.EDProducer("Type2CorrectionProducer",
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("corrCaloMetType1","type2"), cms.InputTag("muCaloMetCorr")),
    type2CorrFormula = cms.string('A + B*TMath::Exp(-C*x)'),
    type2CorrParameter = cms.PSet(
        A = cms.double(2.0),
        B = cms.double(1.3),
        C = cms.double(0.1)
    )
)


process.corrCaloMetType2Puppi = cms.EDProducer("Type2CorrectionProducer",
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("corrCaloMetType1Puppi","type2"), cms.InputTag("muCaloMetCorrPuppi")),
    type2CorrFormula = cms.string('A + B*TMath::Exp(-C*x)'),
    type2CorrParameter = cms.PSet(
        A = cms.double(2.0),
        B = cms.double(1.3),
        C = cms.double(0.1)
    )
)


process.corrPfMetType1 = cms.EDProducer("PFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("ak4PFCHSL1FastL2L3Corrector"),
    jetCorrLabelRes = cms.InputTag("ak4PFCHSL1FastL2L3ResidualCorrector"),
    offsetCorrLabel = cms.InputTag("ak4PFCHSL1FastjetCorrector"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("ak4PFJetsCHS"),
    type1JetPtThreshold = cms.double(15.0)
)


process.corrPfMetType1Puppi = cms.EDProducer("PFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("ak4PFPuppiL1FastL2L3Corrector"),
    jetCorrLabelRes = cms.InputTag("ak4PFPuppiL1FastL2L3ResidualCorrector"),
    offsetCorrLabel = cms.InputTag("ak4PFPuppiL1FastjetCorrector"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("ak4PFJetsPuppi"),
    type1JetPtThreshold = cms.double(15.0)
)


process.corrPfMetType2 = cms.EDProducer("Type2CorrectionProducer",
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("corrPfMetType1","type2"), cms.InputTag("corrPfMetType1","offset"), cms.InputTag("pfCandMETcorr")),
    type2CorrFormula = cms.string('A'),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.corrPfMetType2Puppi = cms.EDProducer("Type2CorrectionProducer",
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("corrPfMetType1Puppi","type2"), cms.InputTag("corrPfMetType1Puppi","offset"), cms.InputTag("pfCandMETcorrPuppi")),
    type2CorrFormula = cms.string('A'),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.corrT1METJetPuppiTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string('pt<15 && abs(eta)<9.9'),
    doc = cms.string('Additional low-pt ak4 Puppi jets for Type-1 MET re-correction'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('CorrT1METJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("updatedJetsPuppiWithUserData"),
    variables = cms.PSet(
        EmEF = cms.PSet(
            doc = cms.string('charged+neutral Electromagnetic Energy Fraction'),
            expr = cms.string('chargedEmEnergyFraction()+neutralEmEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        area = cms.PSet(
            doc = cms.string('jet catchment area, for JECs'),
            expr = cms.string('jetArea()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        muonSubtrDeltaEta = cms.PSet(
            doc = cms.string('muon-subtracted raw eta - eta'),
            expr = cms.string("userFloat(\'muonSubtrRawEta\') - eta()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrDeltaPhi = cms.PSet(
            doc = cms.string('muon-subtracted raw phi - phi'),
            expr = cms.string("userFloat(\'muonSubtrRawPhi\') - phi()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrFactor = cms.PSet(
            doc = cms.string('1-(muon-subtracted raw pt)/(raw pt)'),
            expr = cms.string("1-userFloat(\'muonSubtrRawPt\')/(pt()*jecFactor(\'Uncorrected\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        rawMass = cms.PSet(
            doc = cms.string("mass()*jecFactor(\'Uncorrected\')"),
            expr = cms.string("mass()*jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawPt = cms.PSet(
            doc = cms.string("pt()*jecFactor(\'Uncorrected\')"),
            expr = cms.string("pt()*jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.corrT1METJetTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string('pt<15 && abs(eta)<9.9'),
    doc = cms.string('Additional low-pt ak4 CHS jets for Type-1 MET re-correction'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('CorrT1METJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("updatedJetsWithUserData"),
    variables = cms.PSet(
        EmEF = cms.PSet(
            doc = cms.string('charged+neutral Electromagnetic Energy Fraction'),
            expr = cms.string('chargedEmEnergyFraction()+neutralEmEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        area = cms.PSet(
            doc = cms.string('jet catchment area, for JECs'),
            expr = cms.string('jetArea()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        muonSubtrDeltaEta = cms.PSet(
            doc = cms.string('muon-subtracted raw eta - eta'),
            expr = cms.string("userFloat(\'muonSubtrRawEta\') - eta()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrDeltaPhi = cms.PSet(
            doc = cms.string('muon-subtracted raw phi - phi'),
            expr = cms.string("userFloat(\'muonSubtrRawPhi\') - phi()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrFactor = cms.PSet(
            doc = cms.string('1-(muon-subtracted raw pt)/(raw pt)'),
            expr = cms.string("1-userFloat(\'muonSubtrRawPt\')/(pt()*jecFactor(\'Uncorrected\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        rawMass = cms.PSet(
            doc = cms.string("mass()*jecFactor(\'Uncorrected\')"),
            expr = cms.string("mass()*jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawPt = cms.PSet(
            doc = cms.string("pt()*jecFactor(\'Uncorrected\')"),
            expr = cms.string("pt()*jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.deepMetResolutionTuneTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('Deep MET trained with resolution tune'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('DeepMETResolutionTune'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('DeepmET ResolutionTune phi'),
            expr = cms.string("corPhi(\'RawDeepResolutionTune\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('DeepMET ResolutionTune pt'),
            expr = cms.string("corPt(\'RawDeepResolutionTune\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.deepMetResponseTuneTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('Deep MET trained with extra response tune'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('DeepMETResponseTune'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('DeepMET ResponseTune phi'),
            expr = cms.string("corPhi(\'RawDeepResponseTune\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('DeepMET ResponseTune pt'),
            expr = cms.string("corPt(\'RawDeepResponseTune\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.ecf = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('ECF'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfCbeta1 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('C'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfCbeta2 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('C'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfDbeta1 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(2),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('D'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfDbeta2 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(2),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('D'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfMbeta1 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('M'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfMbeta2 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('M'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfNbeta1 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('N'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfNbeta2 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('N'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfUbeta1 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('U'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.ecfUbeta2 = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('U'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppi"),
    srcWeights = cms.InputTag("puppi")
)


process.egmGsfElectronIDs = cms.EDProducer("VersionedGsfElectronIdProducer",
    physicsObjectIDs = cms.VPSet(
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(35.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.4442),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.566)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaEtaSeedClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.004),
                        cutValueEE = cms.double(0.006),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.06),
                        cutValueEE = cms.double(0.06),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleFull5x5SigmaIEtaIEtaWithSatCut'),
                        isIgnored = cms.bool(False),
                        maxNrSatCrysIn5x5EB = cms.int32(0),
                        maxNrSatCrysIn5x5EE = cms.int32(0),
                        maxSigmaIEtaIEtaEB = cms.double(9999),
                        maxSigmaIEtaIEtaEE = cms.double(0.03),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleFull5x5E2x5OverE5x5WithSatCut'),
                        isIgnored = cms.bool(False),
                        maxNrSatCrysIn5x5EB = cms.int32(0),
                        maxNrSatCrysIn5x5EE = cms.int32(0),
                        minE1x5OverE5x5EB = cms.double(0.83),
                        minE1x5OverE5x5EE = cms.double(-1.0),
                        minE2x5OverE5x5EB = cms.double(0.94),
                        minE2x5OverE5x5EE = cms.double(-1.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(1.0),
                        constTermEE = cms.double(5),
                        cutName = cms.string('GsfEleHadronicOverEMLinearCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        slopeStartEB = cms.double(0.0),
                        slopeStartEE = cms.double(0.0),
                        slopeTermEB = cms.double(0.05),
                        slopeTermEE = cms.double(0.05)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(5.0),
                        constTermEE = cms.double(5.0),
                        cutName = cms.string('GsfEleTrkPtIsoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        slopeStartEB = cms.double(0.0),
                        slopeStartEE = cms.double(0.0),
                        slopeTermEB = cms.double(0.0),
                        slopeTermEE = cms.double(0.0),
                        useHEEPIso = cms.bool(True)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(2.0),
                        constTermEE = cms.double(2.5),
                        cutName = cms.string('GsfEleEmHadD1IsoRhoCut'),
                        energyType = cms.string('EcalTrk'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll"),
                        rhoConstant = cms.double(0.28),
                        slopeStartEB = cms.double(0.0),
                        slopeStartEE = cms.double(50.0),
                        slopeTermEB = cms.double(0.03),
                        slopeTermEE = cms.double(0.03)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleDxyCut'),
                        dxyCutValueEB = cms.double(0.02),
                        dxyCutValueEE = cms.double(0.05),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        vertexSrc = cms.InputTag("offlinePrimaryVertices"),
                        vertexSrcMiniAOD = cms.InputTag("offlineSlimmedPrimaryVertices")
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleEcalDrivenCut'),
                        ecalDrivenEB = cms.int32(1),
                        ecalDrivenEE = cms.int32(1),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('heepElectronID-HEEPV70'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('49b6b60e9f16727f241eb34b9d345a8f'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Summer16ULIdIsoCategories"),
                    mvaCuts = cms.vstring(
                        '1.8949071018',
                        '1.80714210202',
                        '1.64751528517',
                        '0.339697782473',
                        '0.252039219555',
                        '-0.686263559006'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Summer16ULIdIsoRawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Summer16UL-ID-ISO-HZZ'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Summer17ULIdIsoCategories"),
                    mvaCuts = cms.vstring(
                        '1.54440585808',
                        '1.50294621563',
                        '1.77306202112',
                        '0.157262554087',
                        '0.0273932225081',
                        '-0.623050463489'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Summer17ULIdIsoRawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Summer17UL-ID-ISO-HZZ'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Summer18ULIdIsoCategories"),
                    mvaCuts = cms.vstring(
                        '1.49603193295',
                        '1.52414154008',
                        '1.77694249574',
                        '0.199463934736',
                        '0.076063564084',
                        '-0.572118857519'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Summer18ULIdIsoRawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Summer18UL-ID-ISO-HZZ'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Winter22HZZV1Categories"),
                    mvaCuts = cms.vstring(
                        '1.633973689084034',
                        '1.5499076306249353',
                        '2.0629564440753247',
                        '0.3685228146685872',
                        '0.2662407818935475',
                        '-0.5444837363886459'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Winter22HZZV1RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Winter22-HZZ-V1'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.00377),
                        cutValueEE = cms.double(0.00674),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.0884),
                        cutValueEE = cms.double(0.169),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0112),
                        cutValueEE = cms.double(0.0425),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.05),
                        barrelCE = cms.double(1.16),
                        barrelCr = cms.double(0.0324),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.0441),
                        endcapCE = cms.double(2.54),
                        endcapCr = cms.double(0.183),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.193),
                        cutValueEE = cms.double(0.111),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.112),
                        barrelCpt = cms.double(0.506),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
                        endcapC0 = cms.double(0.108),
                        endcapCpt = cms.double(0.963),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-Fall17-94X-V2-loose'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('5547e2c8b5c222192519c41bff05bc2e'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.0032),
                        cutValueEE = cms.double(0.00632),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.0547),
                        cutValueEE = cms.double(0.0394),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0106),
                        cutValueEE = cms.double(0.0387),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.046),
                        barrelCE = cms.double(1.16),
                        barrelCr = cms.double(0.0324),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.0275),
                        endcapCE = cms.double(2.52),
                        endcapCr = cms.double(0.183),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.184),
                        cutValueEE = cms.double(0.0721),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.0478),
                        barrelCpt = cms.double(0.506),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
                        endcapC0 = cms.double(0.0658),
                        endcapCpt = cms.double(0.963),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-Fall17-94X-V2-medium'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('48702f025a8df2c527f53927af8b66d0'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.00255),
                        cutValueEE = cms.double(0.00501),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.022),
                        cutValueEE = cms.double(0.0236),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0104),
                        cutValueEE = cms.double(0.0353),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.026),
                        barrelCE = cms.double(1.15),
                        barrelCr = cms.double(0.0324),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.0188),
                        endcapCE = cms.double(2.06),
                        endcapCr = cms.double(0.183),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.159),
                        cutValueEE = cms.double(0.0197),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.0287),
                        barrelCpt = cms.double(0.506),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
                        endcapC0 = cms.double(0.0445),
                        endcapCpt = cms.double(0.963),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-Fall17-94X-V2-tight'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('c06761e199f084f5b0f7868ac48a3e19'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.00463),
                        cutValueEE = cms.double(0.00814),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.148),
                        cutValueEE = cms.double(0.19),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0126),
                        cutValueEE = cms.double(0.0457),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.05),
                        barrelCE = cms.double(1.16),
                        barrelCr = cms.double(0.0324),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.05),
                        endcapCE = cms.double(2.54),
                        endcapCr = cms.double(0.183),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.209),
                        cutValueEE = cms.double(0.132),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.198),
                        barrelCpt = cms.double(0.506),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
                        endcapC0 = cms.double(0.203),
                        endcapCpt = cms.double(0.963),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(2),
                        maxMissingHitsEE = cms.uint32(3),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-Fall17-94X-V2-veto'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('74e217e3ece16b49bd337026a29fc3e9'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '3.53495358797 - exp(-pt / 3.07272325141) * 9.94262764352',
                        '3.06015605623 - exp(-pt / 1.95572234114) * 14.3091184421',
                        '3.02052519639 - exp(-pt / 1.59784164742) * 28.719380105',
                        '7.35752275071 - exp(-pt / 15.87907864) * 7.61288809226',
                        '6.41811074032 - exp(-pt / 14.730562874) * 6.96387331587',
                        '5.64936312428 - exp(-pt / 16.3664949747) * 7.19607610311'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-iso-V2-wp80'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '2.84704783417 - exp(-pt / 3.32529515837) * 9.38050947827',
                        '2.03833922005 - exp(-pt / 1.93288758682) * 15.364588247',
                        '1.82704158461 - exp(-pt / 1.89796754399) * 19.1236071158',
                        '6.12931925263 - exp(-pt / 13.281753835) * 8.71138432196',
                        '5.26289004857 - exp(-pt / 13.2154971491) * 8.0997882835',
                        '4.37338792902 - exp(-pt / 14.0776094696) * 8.48513324496'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-iso-V2-wp90'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '1.26402092475',
                        '1.17808089508',
                        '1.33051972806',
                        '2.36464785939',
                        '2.07880614597',
                        '1.08080644615'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-iso-V2-wpHZZ'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '0.700642584415',
                        '0.739335420875',
                        '1.45390456109',
                        '-0.146270871164',
                        '-0.0315850882679',
                        '-0.0321841194737'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-iso-V2-wpLoose'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '3.26449620468 - exp(-pt / 3.32657149223) * 8.84669783568',
                        '2.83557838497 - exp(-pt / 2.15150487651) * 11.0978016567',
                        '2.91994945177 - exp(-pt / 1.69875477522) * 24.024807824',
                        '7.1336238874 - exp(-pt / 16.5605268797) * 8.22531222391',
                        '6.18638275782 - exp(-pt / 15.2694634284) * 7.49764565324',
                        '5.43175865738 - exp(-pt / 15.4290075949) * 7.56899692285'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-noIso-V2-wp80'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '2.77072387339 - exp(-pt / 3.81500912145) * 8.16304860178',
                        '1.85602317813 - exp(-pt / 2.18697654938) * 11.8568936824',
                        '1.73489307814 - exp(-pt / 2.0163211971) * 17.013880078',
                        '5.9175992258 - exp(-pt / 13.4807294538) * 9.31966232685',
                        '5.01598837255 - exp(-pt / 13.1280451502) * 8.79418193765',
                        '4.16921343208 - exp(-pt / 13.2017224621) * 9.00720913211'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-noIso-V2-wp90'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2Categories"),
                    mvaCuts = cms.vstring(
                        '0.894411158628',
                        '0.791966464633',
                        '1.47104857173',
                        '-0.293962958665',
                        '-0.250424758584',
                        '-0.130985179031'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2RawValues"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-Fall17-noIso-V2-wpLoose'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.00691),
                        cutValueEE = cms.double(0.0121),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.175),
                        cutValueEE = cms.double(0.228),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0107),
                        cutValueEE = cms.double(0.0275),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.05),
                        barrelCE = cms.double(1.28),
                        barrelCr = cms.double(0.0422),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.05),
                        endcapCE = cms.double(2.3),
                        endcapCr = cms.double(0.262),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.138),
                        cutValueEE = cms.double(0.127),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.194),
                        barrelCpt = cms.double(0.535),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Run3_Winter22/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_122X.txt'),
                        endcapC0 = cms.double(0.184),
                        endcapCpt = cms.double(0.519),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-RunIIIWinter22-V1-loose'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('648b0cc1957047ffe3f027111389dcf5aa941edc'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.00481),
                        cutValueEE = cms.double(0.00951),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.127),
                        cutValueEE = cms.double(0.221),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0103),
                        cutValueEE = cms.double(0.0272),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.0241),
                        barrelCE = cms.double(1.28),
                        barrelCr = cms.double(0.0422),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.05),
                        endcapCE = cms.double(2.3),
                        endcapCr = cms.double(0.262),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.0966),
                        cutValueEE = cms.double(0.111),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.0837),
                        barrelCpt = cms.double(0.535),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Run3_Winter22/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_122X.txt'),
                        endcapC0 = cms.double(0.0741),
                        endcapCpt = cms.double(0.519),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-RunIIIWinter22-V1-medium'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('2626edc1ad1dc1673c0713c557df78f3e90a66f5'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.00411),
                        cutValueEE = cms.double(0.00938),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.116),
                        cutValueEE = cms.double(0.164),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0101),
                        cutValueEE = cms.double(0.027),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.02),
                        barrelCE = cms.double(1.16),
                        barrelCr = cms.double(0.0422),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.02),
                        endcapCE = cms.double(0.5),
                        endcapCr = cms.double(0.262),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.023),
                        cutValueEE = cms.double(0.018),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.0388),
                        barrelCpt = cms.double(0.535),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Run3_Winter22/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_122X.txt'),
                        endcapC0 = cms.double(0.0544),
                        endcapCpt = cms.double(0.519),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(1),
                        maxMissingHitsEE = cms.uint32(1),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-RunIIIWinter22-V1-tight'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('2331bfa0b099f80090aa1d48df03b7a134cf788e'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('GsfEleSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('? superCluster.isNonnull && superCluster.seed.isNonnull ?abs(deltaEtaSuperClusterTrackAtVtx - superCluster.eta + superCluster.seed.eta) : 999999.'),
                        cutValueEB = cms.double(0.0071),
                        cutValueEE = cms.double(0.0173),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(deltaPhiSuperClusterTrackAtVtx)'),
                        cutValueEB = cms.double(0.208),
                        cutValueEE = cms.double(0.234),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('full5x5_sigmaIetaIeta'),
                        cutValueEB = cms.double(0.0117),
                        cutValueEE = cms.double(0.0298),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.05),
                        barrelCE = cms.double(1.28),
                        barrelCr = cms.double(0.0422),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleHadronicOverEMEnergyScaledCut'),
                        endcapC0 = cms.double(0.05),
                        endcapCE = cms.double(2.3),
                        endcapCr = cms.double(0.262),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        cutName = cms.string('GsfEleEBEECut'),
                        cutString = cms.string('abs(1. - eSuperClusterOverP) / ecalEnergy'),
                        cutValueEB = cms.double(0.178),
                        cutValueEE = cms.double(0.137),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelC0 = cms.double(0.406),
                        barrelCpt = cms.double(0.535),
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleRelPFIsoScaledCut'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Run3_Winter22/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_122X.txt'),
                        endcapC0 = cms.double(0.342),
                        endcapCpt = cms.double(0.519),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        beamspotSrc = cms.InputTag("offlineBeamSpot"),
                        conversionSrc = cms.InputTag("allConversions"),
                        conversionSrcMiniAOD = cms.InputTag("reducedEgamma","reducedConversions"),
                        cutName = cms.string('GsfEleConversionVetoCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('GsfEleMissingHitsCut'),
                        isIgnored = cms.bool(False),
                        maxMissingHitsEB = cms.uint32(2),
                        maxMissingHitsEE = cms.uint32(3),
                        needsAdditionalProducts = cms.bool(False)
                    )
                ),
                idName = cms.string('cutBasedElectronID-RunIIIWinter22-V1-veto'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('04d495d199252c2017d5019ae8b478a7d8aebc79'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22IsoV1Categories"),
                    mvaCuts = cms.vstring(
                        '0.99776583820026143',
                        '0.99399710641666705',
                        '0.97627554114737425',
                        '0.99997133733482069',
                        '0.99991566148661426',
                        '0.99932288865775143'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22IsoV1Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-RunIIIWinter22-iso-V1-wp80'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22IsoV1Categories"),
                    mvaCuts = cms.vstring(
                        '0.9870981346957135',
                        '0.95756807831082225',
                        '0.81079745560696059',
                        '0.99981763428587134',
                        '0.99936974968805936',
                        '0.99293135832977431'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22IsoV1Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-RunIIIWinter22-iso-V1-wp90'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22NoIsoV1Categories"),
                    mvaCuts = cms.vstring(
                        '0.9806578295496566',
                        '0.9413641904670094',
                        '0.89762967983679642',
                        '0.9997826058686308',
                        '0.9993177946586951',
                        '0.99712023523348758'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22NoIsoV1Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-RunIIIWinter22-noIso-V1-wp80'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('GsfEleMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22NoIsoV1Categories"),
                    mvaCuts = cms.vstring(
                        '0.8774784815007495',
                        '0.6755302215938275',
                        '0.4195020250389494',
                        '0.9981164732135666',
                        '0.9926206339419237',
                        '0.96553633326857091'
                    ),
                    mvaValueMapName = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22NoIsoV1Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaEleID-RunIIIWinter22-noIso-V1-wp90'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string(''),
            isPOGApproved = cms.untracked.bool(True)
        )
    ),
    physicsObjectSrc = cms.InputTag("slimmedElectrons")
)


process.egmPhotonIDs = cms.EDProducer("VersionedPhotonIdProducer",
    physicsObjectIDs = cms.VPSet(
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('PhoSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhoFull5x5SigmaIEtaIEtaCut'),
                        cutValueEB = cms.double(0.011452),
                        cutValueEE = cms.double(0.027674),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.12999),
                        constTermEE = cms.double(0.15343),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('hcalOverEcal'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_coneBasedHoverE_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(1.8852),
                        constTermEE = cms.double(1.654),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('chargedHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ChgHadronIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.70379),
                        constTermEE = cms.double(6.61585),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('ecalPFClusterIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ECalClusterIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.70379),
                        linearPtTermEE = cms.double(6.61585),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(6.344),
                        constTermEE = cms.double(1.8588),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('hcalPFClusterIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_HCalClusterIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.010055),
                        linearPtTermEE = cms.double(0.0117),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(5.783e-05),
                        quadraticPtTermEE = cms.double(7.476e-05),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    )
                ),
                idName = cms.string('cutBasedPhotonID-RunIIIWinter22-122X-V1-loose'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('57d3fe8d9a1bff37aca5d13887138607233af1b5'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('PhoSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhoFull5x5SigmaIEtaIEtaCut'),
                        cutValueEB = cms.double(0.01001),
                        cutValueEE = cms.double(0.02687),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.058305),
                        constTermEE = cms.double(0.005181),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('hcalOverEcal'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_coneBasedHoverE_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.93929),
                        constTermEE = cms.double(0.97029),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('chargedHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ChgHadronIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.2277),
                        constTermEE = cms.double(1.124),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('ecalPFClusterIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ECalClusterIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.2277),
                        linearPtTermEE = cms.double(1.124),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(2.189),
                        constTermEE = cms.double(0.03367),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('hcalPFClusterIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_HCalClusterIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.010055),
                        linearPtTermEE = cms.double(0.0117),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(5.783e-05),
                        quadraticPtTermEE = cms.double(7.476e-05),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    )
                ),
                idName = cms.string('cutBasedPhotonID-RunIIIWinter22-122X-V1-medium'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('114b047ad28e2aae54869847420514d74f2540b8'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('PhoSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhoFull5x5SigmaIEtaIEtaCut'),
                        cutValueEB = cms.double(0.009993),
                        cutValueEE = cms.double(0.02687),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.0417588),
                        constTermEE = cms.double(0.0025426),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('hcalOverEcal'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_coneBasedHoverE_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.31631),
                        constTermEE = cms.double(0.29266),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('chargedHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ChgHadronIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.14189),
                        constTermEE = cms.double(1.04269),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('ecalPFClusterIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ECalClusterIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.14189),
                        linearPtTermEE = cms.double(1.04269),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(0.0),
                        quadraticPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.39057),
                        constTermEE = cms.double(0.029262),
                        cutName = cms.string('PhoGenericQuadraticRhoPtScaledCut'),
                        cutVariable = cms.string('hcalPFClusterIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_HCalClusterIso_95percentBased.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0100547),
                        linearPtTermEE = cms.double(0.0117),
                        needsAdditionalProducts = cms.bool(True),
                        quadEAflag = cms.bool(True),
                        quadraticPtTermEB = cms.double(5.783e-05),
                        quadraticPtTermEE = cms.double(7.476e-05),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    )
                ),
                idName = cms.string('cutBasedPhotonID-RunIIIWinter22-122X-V1-tight'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('2e56bbbca90e9bc089e5a716412cc51f3de47cb3'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('PhoMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Categories"),
                    mvaCuts = cms.vdouble(0.420473, 0.203451),
                    mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaPhoID-RunIIIWinter22-v1-wp80'),
                isPOGApproved = cms.bool(True)
            ),
            idMD5 = cms.string('c198ffac6a62f5b64b1db5190048903722d29a66'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('PhoMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Categories"),
                    mvaCuts = cms.vdouble(0.0439603, -0.249526),
                    mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaPhoID-RunIIIWinter22-v1-wp90'),
                isPOGApproved = cms.bool(True)
            ),
            idMD5 = cms.string('2720b451f89dd72162f4a1de626a03ee098c8352'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('PhoSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhotonHcalOverEcalBcCut'),
                        hcalOverEcalCutValueEB = cms.double(0.04596),
                        hcalOverEcalCutValueEE = cms.double(0.059),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhoFull5x5SigmaIEtaIEtaCut'),
                        cutValueEB = cms.double(0.0106),
                        cutValueEE = cms.double(0.0272),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(1.694),
                        constTermEE = cms.double(2.089),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('chargedHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfChargedHadrons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(0.0),
                        quadPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(24.032),
                        constTermEE = cms.double(19.722),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('neutralHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfNeutralHadrons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.01512),
                        linearPtTermEE = cms.double(0.0117),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(2.259e-05),
                        quadPtTermEE = cms.double(2.3e-05),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(2.876),
                        constTermEE = cms.double(4.162),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('photonIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfPhotons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.004017),
                        linearPtTermEE = cms.double(0.0037),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(0.0),
                        quadPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    )
                ),
                idName = cms.string('cutBasedPhotonID-Fall17-94X-V2-loose'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('4578dfcceb0bfd1ba5ac28973c843fd0'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('PhoSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhotonHcalOverEcalBcCut'),
                        hcalOverEcalCutValueEB = cms.double(0.02197),
                        hcalOverEcalCutValueEE = cms.double(0.0326),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhoFull5x5SigmaIEtaIEtaCut'),
                        cutValueEB = cms.double(0.01015),
                        cutValueEE = cms.double(0.0272),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(1.141),
                        constTermEE = cms.double(1.051),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('chargedHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfChargedHadrons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(0.0),
                        quadPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(1.189),
                        constTermEE = cms.double(2.718),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('neutralHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfNeutralHadrons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.01512),
                        linearPtTermEE = cms.double(0.0117),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(2.259e-05),
                        quadPtTermEE = cms.double(2.3e-05),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(2.08),
                        constTermEE = cms.double(3.867),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('photonIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfPhotons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.004017),
                        linearPtTermEE = cms.double(0.0037),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(0.0),
                        quadPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    )
                ),
                idName = cms.string('cutBasedPhotonID-Fall17-94X-V2-medium'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('28b186c301061395f394a81266c8d7de'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(
                    cms.PSet(
                        cutName = cms.string('MinPtCut'),
                        isIgnored = cms.bool(False),
                        minPt = cms.double(5.0),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        allowedEtaRanges = cms.VPSet(
                            cms.PSet(
                                maxEta = cms.double(1.479),
                                minEta = cms.double(0.0)
                            ),
                            cms.PSet(
                                maxEta = cms.double(2.5),
                                minEta = cms.double(1.479)
                            )
                        ),
                        cutName = cms.string('PhoSCEtaMultiRangeCut'),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False),
                        useAbsEta = cms.bool(True)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhotonHcalOverEcalBcCut'),
                        hcalOverEcalCutValueEB = cms.double(0.02148),
                        hcalOverEcalCutValueEE = cms.double(0.0321),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        barrelCutOff = cms.double(1.479),
                        cutName = cms.string('PhoFull5x5SigmaIEtaIEtaCut'),
                        cutValueEB = cms.double(0.00996),
                        cutValueEE = cms.double(0.0271),
                        isIgnored = cms.bool(False),
                        needsAdditionalProducts = cms.bool(False)
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.65),
                        constTermEE = cms.double(0.517),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('chargedHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfChargedHadrons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.0),
                        linearPtTermEE = cms.double(0.0),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(0.0),
                        quadPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(0.317),
                        constTermEE = cms.double(2.716),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('neutralHadronIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfNeutralHadrons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.01512),
                        linearPtTermEE = cms.double(0.0117),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(2.259e-05),
                        quadPtTermEE = cms.double(2.3e-05),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    ),
                    cms.PSet(
                        constTermEB = cms.double(2.044),
                        constTermEE = cms.double(3.032),
                        cutName = cms.string('PhoGenericRhoPtScaledCut'),
                        cutVariable = cms.string('photonIso'),
                        effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfPhotons_90percentBased_V2.txt'),
                        isIgnored = cms.bool(False),
                        lessThan = cms.bool(True),
                        linearPtTermEB = cms.double(0.004017),
                        linearPtTermEE = cms.double(0.0037),
                        needsAdditionalProducts = cms.bool(True),
                        quadPtTermEB = cms.double(0.0),
                        quadPtTermEE = cms.double(0.0),
                        rho = cms.InputTag("fixedGridRhoFastjetAll")
                    )
                ),
                idName = cms.string('cutBasedPhotonID-Fall17-94X-V2-tight'),
                isPOGApproved = cms.untracked.bool(True)
            ),
            idMD5 = cms.string('6f4f0ed6a8bf2de8dcf0bc3349b0546d'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('PhoMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Categories"),
                    mvaCuts = cms.vdouble(0.42, 0.14),
                    mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaPhoID-RunIIFall17-v2-wp80'),
                isPOGApproved = cms.bool(True)
            ),
            idMD5 = cms.string('3013ddce7a3ad8b54827c29f5d92282e'),
            isPOGApproved = cms.untracked.bool(True)
        ),
        cms.PSet(
            idDefinition = cms.PSet(
                cutFlow = cms.VPSet(cms.PSet(
                    cutName = cms.string('PhoMVACut'),
                    isIgnored = cms.bool(False),
                    mvaCategoriesMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Categories"),
                    mvaCuts = cms.vdouble(-0.02, -0.26),
                    mvaValueMapName = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Values"),
                    needsAdditionalProducts = cms.bool(True)
                )),
                idName = cms.string('mvaPhoID-RunIIFall17-v2-wp90'),
                isPOGApproved = cms.bool(True)
            ),
            idMD5 = cms.string('5c06832759b1faf7dd6fc45ed1aef3a2'),
            isPOGApproved = cms.untracked.bool(True)
        )
    ),
    physicsObjectSrc = cms.InputTag("slimmedPhotons")
)


process.electronMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==1 electrons or photons'),
    genparticles = cms.InputTag("finalGenParticles"),
    mapTauAnc = cms.InputTag("matchingElecPhoton","hasTauAnc"),
    mcMap = cms.InputTag("electronsMCMatchForTable"),
    mcMapDressedLep = cms.InputTag("electronsMCMatchForTableAlt"),
    objName = cms.string('Electron'),
    objType = cms.string('Electron'),
    src = cms.InputTag("linkedObjects","electrons")
)


process.electronMVAValueMapProducer = cms.EDProducer("ElectronMVAValueMapProducer",
    mvaConfigurations = cms.VPSet(
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Spring16HZZV1'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_HZZ_V1/electronID_mva_Spring16_HZZ_V1_EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'abs(superCluster.eta) < 0.800',
                'abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Spring16GeneralPurposeV1'),
            nCategories = cms.int32(3),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/Spring16_GeneralPurpose_V1/electronID_mva_Spring16_GeneralPurpose_V1_EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Fall17NoIsoV1'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Fall17V1Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_5_2017_puinfo_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_5_2017_puinfo_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_5_2017_puinfo_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_10_2017_puinfo_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_10_2017_puinfo_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_10_2017_puinfo_BDT.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Fall17IsoV1'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Fall17V1Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_5_2017_puinfo_iso_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_5_2017_puinfo_iso_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_5_2017_puinfo_iso_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB1_10_2017_puinfo_iso_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EB2_10_2017_puinfo_iso_BDT.weights.root',
                'RecoEgamma/ElectronIdentification/data/Fall17/EIDmva_EE_10_2017_puinfo_iso_BDT.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Fall17NoIsoV2'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17NoIsoV2/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Fall17IsoV2'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Fall17IsoV2/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('RunIIIWinter22NoIsoV1'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3NonIso.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22NoIsoV1/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('RunIIIWinter22IsoV1'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22IsoV1/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. & abs(superCluster.eta) < 0.800',
                'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
                'pt < 10. & abs(superCluster.eta) >= 1.479',
                'pt >= 10. & abs(superCluster.eta) < 0.800',
                'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
                'pt >= 10. & abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Summer16ULIdIso'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_16UL_ID_ISO/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. & abs(superCluster.eta) < 0.800',
                'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
                'pt < 10. & abs(superCluster.eta) >= 1.479',
                'pt >= 10. & abs(superCluster.eta) < 0.800',
                'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
                'pt >= 10. & abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Summer17ULIdIso'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_17UL_ID_ISO/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. & abs(superCluster.eta) < 0.800',
                'pt < 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
                'pt < 10. & abs(superCluster.eta) >= 1.479',
                'pt >= 10. & abs(superCluster.eta) < 0.800',
                'pt >= 10. & abs(superCluster.eta) >= 0.800 & abs(superCluster.eta) < 1.479',
                'pt >= 10. & abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Summer18ULIdIso'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronMVAEstimatorRun2Variables.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB1_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB2_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EE_5.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB1_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EB2_10.weights.root',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Summer_18UL_ID_ISO/EE_10.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'pt < 10. && abs(superCluster.eta) < 0.800',
                'pt < 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt < 10. && abs(superCluster.eta) >= 1.479',
                'pt >= 10. && abs(superCluster.eta) < 0.800',
                'pt >= 10. && abs(superCluster.eta) >= 0.800 && abs(superCluster.eta) < 1.479',
                'pt >= 10. && abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('ElectronMVAEstimatorRun2'),
            mvaTag = cms.string('Winter22HZZV1'),
            nCategories = cms.int32(6),
            variableDefinition = cms.string('RecoEgamma/ElectronIdentification/data/ElectronIDVariablesRun3.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB1_5.weights.xml.gz',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB2_5.weights.xml.gz',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EE_5.weights.xml.gz',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB1_10.weights.xml.gz',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EB2_10.weights.xml.gz',
                'RecoEgamma/ElectronIdentification/data/MVAWeightFiles/Winter22HZZV1/EE_10.weights.xml.gz'
            )
        )
    ),
    src = cms.InputTag("slimmedElectrons")
)


process.electronPROMPTMVA = cms.EDProducer("EleBaseMVAValueMapProducer",
    backend = cms.string('TMVA'),
    isClassifier = cms.bool(True),
    name = cms.string('electronPROMPTMVA'),
    src = cms.InputTag("linkedObjects","electrons"),
    variables = cms.VPSet(
        cms.PSet(
            expr = cms.string('pt'),
            name = cms.string('LepGood_pt')
        ),
        cms.PSet(
            expr = cms.string('eta'),
            name = cms.string('LepGood_eta')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'PFIsoAll\')/pt"),
            name = cms.string('LepGood_pfRelIso03_all')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'miniIsoChg_Fall17V2\')/pt"),
            name = cms.string('LepGood_miniRelIsoCharged')
        ),
        cms.PSet(
            expr = cms.string("(userFloat(\'miniIsoAll_Fall17V2\')-userFloat(\'miniIsoChg_Fall17V2\'))/pt"),
            name = cms.string('LepGood_miniRelIsoNeutral')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'jetNDauChargedMVASel\'):0"),
            name = cms.string('LepGood_jetNDauChargedMVASel')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'ptRel\'):0"),
            name = cms.string('LepGood_jetPtRelv2')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?max(userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:problepb\'),0.0):0.0"),
            name = cms.string('LepGood_jetDF')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?min(userFloat(\'ptRatio\'),1.5):1.0/(1.0+userFloat(\'PFIsoAll04_Fall17V2\')/pt)"),
            name = cms.string('LepGood_jetPtRatio')
        ),
        cms.PSet(
            expr = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
            name = cms.string('LepGood_sip3d')
        ),
        cms.PSet(
            expr = cms.string("log(abs(dB(\'PV2D\')))"),
            name = cms.string('LepGood_dxy')
        ),
        cms.PSet(
            expr = cms.string("log(abs(dB(\'PVDZ\')))"),
            name = cms.string('LepGood_dz')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'mvaIso\')"),
            name = cms.string('LepGood_mvaIso')
        )
    ),
    weightFile = cms.FileInPath('PhysicsTools/NanoAOD/data/el_BDTG_2022.weights.xml')
)


process.electronTable = cms.EDProducer("SimplePATElectronFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedElectrons after basic selection (pt > 5 )'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        fsrPhotonIdx = cms.PSet(
            doc = cms.string('Index of the lowest-dR/ET2 among associated FSR photons'),
            precision = cms.int32(-1),
            src = cms.InputTag("leptonFSRphotons","eleFsrIndex"),
            type = cms.string('int16')
        ),
        promptMVA = cms.PSet(
            doc = cms.string('Prompt MVA lepton ID score. Corresponds to the previous mvaTTH'),
            precision = cms.int32(14),
            src = cms.InputTag("electronPROMPTMVA"),
            type = cms.string('float')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Electron'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","electrons"),
    variables = cms.PSet(
        PreshowerEnergy = cms.PSet(
            doc = cms.string('energy deposited in preshower'),
            expr = cms.string('superCluster.preshowerEnergy'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        convVeto = cms.PSet(
            doc = cms.string('pass conversion veto'),
            expr = cms.string('passConversionVeto()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        cutBased = cms.PSet(
            doc = cms.string('cut-based ID RunIII Winter22: fail ==0, veto >=1 (to veto, ask for <1), loose >=2, medium >=3, tight >=4'),
            expr = cms.string("userInt(\'cutBasedID_veto\')+userInt(\'cutBasedID_loose\')+userInt(\'cutBasedID_medium\')+userInt(\'cutBasedID_tight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        cutBased_HEEP = cms.PSet(
            doc = cms.string('cut-based HEEP ID'),
            expr = cms.string("userInt(\'cutBasedID_HEEP\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        deltaEtaSC = cms.PSet(
            doc = cms.string('delta eta (SC,ele) with sign'),
            expr = cms.string('superCluster().eta()-eta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dr03EcalRecHitSumEt = cms.PSet(
            doc = cms.string('Non-PF Ecal isolation within a delta R cone of 0.3 with electron pt > 35 GeV'),
            expr = cms.string('?pt>35?dr03EcalRecHitSumEt():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        dr03HcalDepth1TowerSumEt = cms.PSet(
            doc = cms.string('Non-PF Hcal isolation within a delta R cone of 0.3 with electron pt > 35 GeV'),
            expr = cms.string('?pt>35?dr03HcalTowerSumEt(1):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        dr03TkSumPt = cms.PSet(
            doc = cms.string('Non-PF track isolation within a delta R cone of 0.3 with electron pt > 35 GeV'),
            expr = cms.string('?pt>35?dr03TkSumPt():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        dr03TkSumPtHEEP = cms.PSet(
            doc = cms.string('Non-PF track isolation within a delta R cone of 0.3 with electron pt > 35 GeV used in HEEP ID'),
            expr = cms.string('?pt>35?dr03TkSumPtHEEP():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        dxy = cms.PSet(
            doc = cms.string('dxy (with sign) wrt first PV, in cm'),
            expr = cms.string("dB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dxyErr = cms.PSet(
            doc = cms.string('dxy uncertainty, in cm'),
            expr = cms.string("edB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('dz (with sign) wrt first PV, in cm'),
            expr = cms.string("dB(\'PVDZ\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dzErr = cms.PSet(
            doc = cms.string('dz uncertainty, in cm'),
            expr = cms.string("abs(edB(\'PVDZ\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        eInvMinusPInv = cms.PSet(
            doc = cms.string('1/E_SC - 1/p_trk'),
            expr = cms.string('(1-eSuperClusterOverP())/ecalEnergy()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        ecalEnergy = cms.PSet(
            doc = cms.string('energy after ECAL-only regression applied'),
            expr = cms.string('ecalEnergy()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        ecalEnergyError = cms.PSet(
            doc = cms.string('ecalEnergy error'),
            expr = cms.string('ecalEnergyError'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        energyErr = cms.PSet(
            doc = cms.string('energy error of the cluster-track combination'),
            expr = cms.string("p4Error(\'P4_COMBINATION\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fbrem = cms.PSet(
            doc = cms.string('Fraction of brem'),
            expr = cms.string('fbrem()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        gsfTrketaMode = cms.PSet(
            doc = cms.string('GSF track etaMode'),
            expr = cms.string('gsfTrack().etaMode()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        gsfTrkpMode = cms.PSet(
            doc = cms.string('GSF track pMode'),
            expr = cms.string('gsfTrack().pMode()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        gsfTrkpModeErr = cms.PSet(
            doc = cms.string('GSF track pMode error'),
            expr = cms.string('abs(gsfTrack().qoverpModeError())*gsfTrack().pMode()*gsfTrack().pMode()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        gsfTrkphiMode = cms.PSet(
            doc = cms.string('GSF track phiMode'),
            expr = cms.string('gsfTrack().phiMode()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hoe = cms.PSet(
            doc = cms.string('H over E'),
            expr = cms.string('hadronicOverEm()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        ip3d = cms.PSet(
            doc = cms.string('3D impact parameter wrt first PV, in cm'),
            expr = cms.string("abs(dB(\'PV3D\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        isEB = cms.PSet(
            doc = cms.string('object in barrel if true derived from the seedCrystal and detID information'),
            expr = cms.string('isEB'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isEcalDriven = cms.PSet(
            doc = cms.string('is ECAL driven if true'),
            expr = cms.string('ecalDrivenSeed'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isPFcand = cms.PSet(
            doc = cms.string('electron is PF candidate'),
            expr = cms.string('pfCandidateRef().isNonnull()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        jetDF = cms.PSet(
            doc = cms.string('value of the DEEPJET b tagging algorithm discriminator of the associated jet (0 if none)'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?max(userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:problepb\'),0.0):0.0"),
            lazyEval = cms.untracked.bool(True),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        jetIdx = cms.PSet(
            doc = cms.string('index of the associated jet (-1 if none)'),
            expr = cms.string("?hasUserCand(\'jet\')?userCand(\'jet\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        jetNDauCharged = cms.PSet(
            doc = cms.string('number of charged daughters of the closest jet'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'jetNDauChargedMVASel\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        jetPtRelv2 = cms.PSet(
            doc = cms.string('Relative momentum of the lepton with respect to the closest jet after subtracting the lepton'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'ptRel\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        jetRelIso = cms.PSet(
            doc = cms.string('Relative isolation in matched jet (1/ptRatio-1), -1 if none'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?(1./userFloat(\'ptRatio\'))-1.:-1."),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        lostHits = cms.PSet(
            doc = cms.string('number of missing inner hits'),
            expr = cms.string("gsfTrack.hitPattern.numberOfLostHits(\'MISSING_INNER_HITS\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        miniPFRelIso_all = cms.PSet(
            doc = cms.string('mini PF relative isolation, total (with scaled rho*EA PU Winter22V1 corrections)'),
            expr = cms.string("userFloat(\'miniIsoAll\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        miniPFRelIso_chg = cms.PSet(
            doc = cms.string('mini PF relative isolation, charged component'),
            expr = cms.string("userFloat(\'miniIsoChg\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        mvaHZZIso = cms.PSet(
            doc = cms.string('HZZ MVA Iso ID score'),
            expr = cms.string("userFloat(\'mvaHZZIso\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        mvaIso = cms.PSet(
            doc = cms.string('MVA Iso ID score, Winter22V1'),
            expr = cms.string("userFloat(\'mvaIso\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        mvaIso_WP80 = cms.PSet(
            doc = cms.string('MVA Iso ID WP80, Winter22V1'),
            expr = cms.string("userInt(\'mvaIso_WP80\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mvaIso_WP90 = cms.PSet(
            doc = cms.string('MVA Iso ID WP90, Winter22V1'),
            expr = cms.string("userInt(\'mvaIso_WP90\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mvaIso_WPHZZ = cms.PSet(
            doc = cms.string('MVA Iso ID WPHZZ, Winter22V1'),
            expr = cms.string("userInt(\'mvaIso_WPHZZ\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mvaNoIso = cms.PSet(
            doc = cms.string('MVA noIso ID score, Winter22V1'),
            expr = cms.string("userFloat(\'mvaNoIso\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        mvaNoIso_WP80 = cms.PSet(
            doc = cms.string('MVA noIso ID WP80, Winter22V1'),
            expr = cms.string("userInt(\'mvaNoIso_WP80\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mvaNoIso_WP90 = cms.PSet(
            doc = cms.string('MVA noIso ID WP90, Winter22V1'),
            expr = cms.string("userInt(\'mvaNoIso_WP90\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        pfRelIso03_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, total (with rho*EA PU Winter22V1 corrections)'),
            expr = cms.string("userFloat(\'PFIsoAll\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfRelIso03_chg = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, charged component'),
            expr = cms.string("userFloat(\'PFIsoChg\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfRelIso04_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.4, total (with rho*EA PU Winter22V1 corrections)'),
            expr = cms.string("userFloat(\'PFIsoAll04\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        photonIdx = cms.PSet(
            doc = cms.string('index of the first associated photon (-1 if none)'),
            expr = cms.string("?overlaps(\'photons\').size()>0?overlaps(\'photons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        r9 = cms.PSet(
            doc = cms.string('R9 of the supercluster, calculated with full 5x5 region'),
            expr = cms.string('full5x5_r9()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawEnergy = cms.PSet(
            doc = cms.string('raw energy of Supercluster'),
            expr = cms.string('superCluster.rawEnergy'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        scEtOverPt = cms.PSet(
            doc = cms.string('(supercluster transverse energy)/pt-1'),
            expr = cms.string('(superCluster().energy()/(pt*cosh(superCluster().eta())))-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        seedGain = cms.PSet(
            doc = cms.string('Gain of the seed crystal'),
            expr = cms.string("userInt(\'seedGain\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        seediEtaOriX = cms.PSet(
            doc = cms.string('iEta or iX of seed crystal. iEta is barrel-only, iX is endcap-only. iEta runs from -85 to +85, with no crystal at iEta=0. iX runs from 1 to 100.'),
            expr = cms.string('superCluster().seedCrysIEtaOrIx'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        seediPhiOriY = cms.PSet(
            doc = cms.string('iPhi or iY of seed crystal. iPhi is barrel-only, iY is endcap-only. iPhi runs from 1 to 360. iY runs from 1 to 100.'),
            expr = cms.string('superCluster().seedCrysIPhiOrIy'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        sieie = cms.PSet(
            doc = cms.string('sigma_IetaIeta of the supercluster, calculated with full 5x5 region'),
            expr = cms.string('full5x5_sigmaIetaIeta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sip3d = cms.PSet(
            doc = cms.string('3D impact parameter significance wrt first PV, in cm'),
            expr = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        superclusterEta = cms.PSet(
            doc = cms.string('supercluster eta'),
            expr = cms.string('superCluster().eta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        svIdx = cms.PSet(
            doc = cms.string('index of matching secondary vertex'),
            expr = cms.string("?hasUserCand(\'vertex\')?userCand(\'vertex\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        tightCharge = cms.PSet(
            doc = cms.string('Tight charge criteria (0:none, 1:isGsfScPixChargeConsistent, 2:isGsfCtfScPixChargeConsistent)'),
            expr = cms.string('isGsfCtfScPixChargeConsistent() + isGsfScPixChargeConsistent()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        vidNestedWPBitmap = cms.PSet(
            doc = cms.string('VID compressed bitmap (MinPtCut,GsfEleSCEtaMultiRangeCut,GsfEleEBEECut,GsfEleEBEECut,GsfEleEBEECut,GsfEleHadronicOverEMEnergyScaledCut,GsfEleEBEECut,GsfEleRelPFIsoScaledCut,GsfEleConversionVetoCut,GsfEleMissingHitsCut), 3 bits per cut'),
            expr = cms.string("userInt(\'VIDNestedWPBitmap\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        vidNestedWPBitmapHEEP = cms.PSet(
            doc = cms.string('VID compressed bitmap (MinPtCut,GsfEleSCEtaMultiRangeCut,GsfEleEBEECut,GsfEleEBEECut,GsfEleFull5x5SigmaIEtaIEtaWithSatCut,GsfEleFull5x5E2x5OverE5x5WithSatCut,GsfEleHadronicOverEMLinearCut,GsfEleTrkPtIsoCut,GsfEleEmHadD1IsoRhoCut,GsfEleDxyCut,GsfEleMissingHitsCut,GsfEleEcalDrivenCut), 1 bits per cut'),
            expr = cms.string("userInt(\'VIDNestedWPBitmapHEEP\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        )
    )
)


process.electronTimeLifeInfoTable = cms.EDProducer("SimplePATElectron2TrackTimeLifeInfoFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('Additional time-life info for non-prompt electrons'),
    extension = cms.bool(True),
    externalTypedVariables = cms.PSet(
        IPx = cms.PSet(
            doc = cms.string('x coordinate of impact parameter vector'),
            expr = cms.string('ipVector().x()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("electronTimeLifeInfos"),
            type = cms.string('float')
        ),
        IPy = cms.PSet(
            doc = cms.string('y coordinate of impact parameter vector'),
            expr = cms.string('ipVector().y()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("electronTimeLifeInfos"),
            type = cms.string('float')
        ),
        IPz = cms.PSet(
            doc = cms.string('z coordinate of impact parameter vector'),
            expr = cms.string('ipVector().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("electronTimeLifeInfos"),
            type = cms.string('float')
        ),
        ipLengthSig = cms.PSet(
            doc = cms.string('significance of impact parameter'),
            expr = cms.string('ipLength().significance()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("electronTimeLifeInfos"),
            type = cms.string('float')
        )
    ),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Electron'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","electrons"),
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.electronTimeLifeInfos = cms.EDProducer("PATElectronTimeLifeInfoProducer",
    mightGet = cms.optional.untracked.vstring,
    pvChoice = cms.int32(0),
    pvSource = cms.InputTag("offlineSlimmedPrimaryVerticesWithBS"),
    selection = cms.string('pt > 15'),
    src = cms.InputTag("linkedObjects","electrons")
)


process.electronsMCMatchForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticles"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11, 22),
    mcStatus = cms.vint32(1),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","electrons")
)


process.electronsMCMatchForTableAlt = cms.EDProducer("GenJetMatcherDRPtByDR",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("matchingElecPhoton","merged"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11, 22),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","electrons")
)


process.extraFlagsTable = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string(''),
    variables = cms.PSet(
        Flag_BadChargedCandidateFilter = cms.PSet(
            doc = cms.string('Bad charged hadron flag'),
            precision = cms.int32(-1),
            src = cms.InputTag("BadChargedCandidateTagger"),
            type = cms.string('bool')
        ),
        Flag_BadGlobalMuon = cms.PSet(
            doc = cms.string('Bad muon flag'),
            precision = cms.int32(-1),
            src = cms.InputTag("badGlobalMuonTagger","notBadEvent"),
            type = cms.string('bool')
        ),
        Flag_BadPFMuonFilter = cms.PSet(
            doc = cms.string('Bad PF muon flag'),
            precision = cms.int32(-1),
            src = cms.InputTag("BadPFMuonTagger"),
            type = cms.string('bool')
        ),
        Flag_CloneGlobalMuon = cms.PSet(
            doc = cms.string('Clone muon flag'),
            precision = cms.int32(-1),
            src = cms.InputTag("cloneGlobalMuonTagger","notBadEvent"),
            type = cms.string('bool')
        )
    )
)


process.fatJetMCTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(' pt > 170'),
    doc = cms.string(''),
    extension = cms.bool(True),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('FatJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("finalJetsAK8"),
    variables = cms.PSet(
        genJetAK8Idx = cms.PSet(
            doc = cms.string('index of matched gen AK8 jet'),
            expr = cms.string('?genJetFwdRef().backRef().isNonnull() && genJetFwdRef().backRef().pt() > 100.?genJetFwdRef().backRef().key():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        hadronFlavour = cms.PSet(
            doc = cms.string('flavour from hadron ghost clustering'),
            expr = cms.string('hadronFlavour()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        )
    )
)


process.fatJetTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(' pt > 170'),
    doc = cms.string('slimmedJetsAK8, i.e. ak8 fat jets for boosted analysis'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        electronIdx3SJ = cms.PSet(
            doc = cms.string('index of electron matched to jet'),
            precision = cms.int32(-1),
            src = cms.InputTag("lepInAK8JetVars","eleIdx3SJ"),
            type = cms.string('int16')
        ),
        lsf3 = cms.PSet(
            doc = cms.string('Lepton Subjet Fraction (3 subjets)'),
            precision = cms.int32(10),
            src = cms.InputTag("lepInAK8JetVars","lsf3"),
            type = cms.string('float')
        ),
        muonIdx3SJ = cms.PSet(
            doc = cms.string('index of muon matched to jet'),
            precision = cms.int32(-1),
            src = cms.InputTag("lepInAK8JetVars","muIdx3SJ"),
            type = cms.string('int16')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('FatJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("finalJetsAK8"),
    variables = cms.PSet(
        area = cms.PSet(
            doc = cms.string('jet catchment area, for JECs'),
            expr = cms.string('jetArea()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chEmEF = cms.PSet(
            doc = cms.string('charged Electromagnetic Energy Fraction'),
            expr = cms.string('?isPFJet()?chargedEmEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chHEF = cms.PSet(
            doc = cms.string('charged Hadron Energy Fraction'),
            expr = cms.string('?isPFJet()?chargedHadronEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chMultiplicity = cms.PSet(
            doc = cms.string('(Puppi-weighted) Number of charged particles in the jet'),
            expr = cms.string('?isPFJet()?chargedMultiplicity():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        globalParT3_QCD = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 QCD score.'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_TopbWev = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 Top->bWev score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probTopbWev\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_TopbWmv = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 Top->bWmv score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probTopbWmv\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_TopbWq = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 Top->bWq score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probTopbWq\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_TopbWqq = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 Top->bWqq score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probTopbWqq\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_TopbWtauhv = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 Top->bWtauhv score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probTopbWtauhv\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_WvsQCD = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 (Xqq+Xcs/Xqq+Xcs+QCD) binarized score.'),
            expr = cms.string("?bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXqq\')+bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXcs\')+bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probQCD\')>0?(bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXqq\')+bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXcs\'))/(bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXqq\')+bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXcs\')+bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probQCD\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_XWW3q = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->WW3q score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXWW3q\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_XWW4q = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->WW4q score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXWW4q\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_XWWqqev = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->WWqqev score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXWWqqev\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_XWWqqmv = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->WWqqmv score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXWWqqmv\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xbb = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->bb score. Note: For sig vs bkg (e.g. bkg=QCD) tagging, use sig/(sig+bkg) to construct the discriminator'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXbb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xcc = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->cc score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXcc\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xcs = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->cs score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXcs\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xqq = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->qq (ss/dd/uu) score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXqq\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xtauhtaue = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->tauhtaue score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXtauhtaue\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xtauhtauh = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->tauhtauh score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXtauhtauh\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_Xtauhtaum = cms.PSet(
            doc = cms.string('Mass-decorrelated GlobalParT-3 X->tauhtaum score'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probXtauhtaum\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_massCorrGeneric = cms.PSet(
            doc = cms.string('GlobalParT-3 mass regression corrector with respect to the original jet mass, optimised for generic jet cases. Use (massCorrGeneric * mass * (1 - rawFactor)) to get the regressed mass'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:massCorrGeneric\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_massCorrX2p = cms.PSet(
            doc = cms.string('GlobalParT-3 mass regression corrector with respect to the original jet mass, optimised for resonance 2-prong (bb/cc/cs/ss/qq) jets. Use (massCorrX2p * mass * (1 - rawFactor)) to get the regressed mass'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:massCorrX2p\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_withMassTopvsQCD = cms.PSet(
            doc = cms.string('GlobalParT-3 tagger (w/mass) Top vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probWithMassTopvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_withMassWvsQCD = cms.PSet(
            doc = cms.string('GlobalParT-3 tagger (w/mass) W vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probWithMassWvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        globalParT3_withMassZvsQCD = cms.PSet(
            doc = cms.string('GlobalParT-3 tagger (w/mass) Z vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfGlobalParticleTransformerAK8JetTags:probWithMassZvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfEmEF = cms.PSet(
            doc = cms.string('electromagnetic Energy Fraction in HF'),
            expr = cms.string('?isPFJet()?HFEMEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfHEF = cms.PSet(
            doc = cms.string('hadronic Energy Fraction in HF'),
            expr = cms.string('?isPFJet()?HFHadronEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        msoftdrop = cms.PSet(
            doc = cms.string('Corrected soft drop mass with PUPPI'),
            expr = cms.string("groomedMass(\'SoftDropPuppi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muEF = cms.PSet(
            doc = cms.string('muon Energy Fraction'),
            expr = cms.string('?isPFJet()?muonEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        n2b1 = cms.PSet(
            doc = cms.string('N2 with beta=1 (for jets with raw pT>250 GeV)'),
            expr = cms.string("?hasUserFloat(\'nb1AK8PuppiSoftDrop:ecfN2\')?userFloat(\'nb1AK8PuppiSoftDrop:ecfN2\'):-99999."),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        n3b1 = cms.PSet(
            doc = cms.string('N3 with beta=1 (for jets with raw pT>250 GeV)'),
            expr = cms.string("?hasUserFloat(\'nb1AK8PuppiSoftDrop:ecfN3\')?userFloat(\'nb1AK8PuppiSoftDrop:ecfN3\'):-99999."),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        nConstituents = cms.PSet(
            doc = cms.string('Number of particles in the jet'),
            expr = cms.string('numberOfDaughters()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        neEmEF = cms.PSet(
            doc = cms.string('neutral Electromagnetic Energy Fraction'),
            expr = cms.string('?isPFJet()?neutralEmEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neHEF = cms.PSet(
            doc = cms.string('neutral Hadron Energy Fraction'),
            expr = cms.string('?isPFJet()?neutralHadronEnergyFraction():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neMultiplicity = cms.PSet(
            doc = cms.string('(Puppi-weighted) Number of neutral particles in the jet'),
            expr = cms.string('?isPFJet()?neutralMultiplicity():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        particleNetLegacy_QCD = cms.PSet(
            doc = cms.string('Mass-decorrelated ParticleNet Legacy Run-2 tagger raw QCD score'),
            expr = cms.string("bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probQCDbb\')+bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probQCDcc\')+bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probQCDb\')+bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probQCDc\')+bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probQCDothers\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetLegacy_Xbb = cms.PSet(
            doc = cms.string('Mass-decorrelated ParticleNet Legacy Run-2 tagger raw X->bb score. For X->bb vs QCD tagging, use Xbb/(Xbb+QCD)'),
            expr = cms.string("bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probXbb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetLegacy_Xcc = cms.PSet(
            doc = cms.string('Mass-decorrelated ParticleNet Legacy Run-2 tagger raw X->cc score. For X->cc vs QCD tagging, use Xcc/(Xcc+QCD)'),
            expr = cms.string("bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probXcc\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetLegacy_Xqq = cms.PSet(
            doc = cms.string('Mass-decorrelated ParticleNet Legacy Run-2 tagger raw X->qq (uds) score. For X->qq vs QCD tagging, use Xqq/(Xqq+QCD). For W vs QCD tagging, use (Xcc+Xqq)/(Xcc+Xqq+QCD)'),
            expr = cms.string("bDiscriminator(\'pfMassDecorrelatedParticleNetJetTags:probXqq\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetLegacy_mass = cms.PSet(
            doc = cms.string('ParticleNet Legacy Run-2 mass regression'),
            expr = cms.string("bDiscriminator(\'pfParticleNetMassRegressionJetTags:mass\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_H4qvsQCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/ mass) H(->VV->qqqq) vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfParticleNetDiscriminatorsJetTags:H4qvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_HbbvsQCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/mass) H(->bb) vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfParticleNetDiscriminatorsJetTags:HbbvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_HccvsQCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/mass) H(->cc) vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfParticleNetDiscriminatorsJetTags:HccvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_QCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/ mass) QCD(bb,cc,b,c,others) sum'),
            expr = cms.string("bDiscriminator(\'pfParticleNetJetTags:probQCDbb\')+bDiscriminator(\'pfParticleNetJetTags:probQCDcc\')+bDiscriminator(\'pfParticleNetJetTags:probQCDb\')+bDiscriminator(\'pfParticleNetJetTags:probQCDc\')+bDiscriminator(\'pfParticleNetJetTags:probQCDothers\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_TvsQCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/ mass) top vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfParticleNetDiscriminatorsJetTags:TvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_WvsQCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/ mass) W vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfParticleNetDiscriminatorsJetTags:WvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNetWithMass_ZvsQCD = cms.PSet(
            doc = cms.string('ParticleNet tagger (w/ mass) Z vs QCD discriminator'),
            expr = cms.string("bDiscriminator(\'pfParticleNetDiscriminatorsJetTags:ZvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_QCD = cms.PSet(
            doc = cms.string('ParticleNet tagger QCD(0+1+2HF) sum'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:probQCD2hf\')+bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:probQCD1hf\')+bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:probQCD0hf\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_QCD0HF = cms.PSet(
            doc = cms.string('ParticleNet tagger QCD 0 HF (b/c) score'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:probQCD0hf\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_QCD1HF = cms.PSet(
            doc = cms.string('ParticleNet tagger QCD 1 HF (b/c) score'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:probQCD1hf\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_QCD2HF = cms.PSet(
            doc = cms.string('ParticleNet tagger QCD 2 HF (b/c) score'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:probQCD2hf\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_WVsQCD = cms.PSet(
            doc = cms.string('ParticleNet W->qq vs. QCD score: Xqq+Xcc/(Xqq+Xcc+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:WvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XbbVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->bb vs. QCD score: Xbb/(Xbb+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HbbvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XccVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->cc vs. QCD score: Xcc/(Xcc+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HccvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XggVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->gg vs. QCD score: Xgg/(Xgg+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HggvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XqqVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->qq (uds) vs. QCD score: Xqq/(Xqq+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HqqvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XteVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->e tau_h vs. QCD score: Xte/(Xte+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HtevsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XtmVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->mu tau_h vs. QCD score: Xtm/(Xtm+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HtmvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_XttVsQCD = cms.PSet(
            doc = cms.string('ParticleNet X->tau_h tau_h vs. QCD score: Xtt/(Xtt+QCD)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8DiscriminatorsJetTags:HttvsQCD\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        particleNet_massCorr = cms.PSet(
            doc = cms.string('ParticleNet mass regression, relative correction to JEC-corrected jet mass (no softdrop)'),
            expr = cms.string("bDiscriminator(\'pfParticleNetFromMiniAODAK8JetTags:masscorr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawFactor = cms.PSet(
            doc = cms.string('1 - Factor to get back to raw pT'),
            expr = cms.string("1.-jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        subJetIdx1 = cms.PSet(
            doc = cms.string('index of first subjet'),
            expr = cms.string("?nSubjetCollections()>0 && subjets(\'SoftDropPuppi\').size()>0?subjets(\'SoftDropPuppi\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        subJetIdx2 = cms.PSet(
            doc = cms.string('index of second subjet'),
            expr = cms.string("?nSubjetCollections()>0 && subjets(\'SoftDropPuppi\').size()>1?subjets(\'SoftDropPuppi\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        tau1 = cms.PSet(
            doc = cms.string('Nsubjettiness (1 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Puppi:tau1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        tau2 = cms.PSet(
            doc = cms.string('Nsubjettiness (2 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Puppi:tau2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        tau3 = cms.PSet(
            doc = cms.string('Nsubjettiness (3 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Puppi:tau3\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        tau4 = cms.PSet(
            doc = cms.string('Nsubjettiness (4 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Puppi:tau4\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.finalGenParticles = cms.EDProducer("GenParticlePruner",
    select = cms.vstring(
        'drop *',
        'keep++ abs(pdgId) == 15 & (pt > 15 ||  isPromptDecayed() )',
        'keep+ abs(pdgId) == 15 ',
        '+keep pdgId == 22 && status == 1 && (pt > 10 || isPromptFinalState())',
        '+keep abs(pdgId) == 11 || abs(pdgId) == 13 || abs(pdgId) == 15',
        'drop abs(pdgId)= 2212 && abs(pz) > 1000',
        'keep (400 < abs(pdgId) < 600) || (4000 < abs(pdgId) < 6000)',
        'keep abs(pdgId) == 12 || abs(pdgId) == 14 || abs(pdgId) == 16',
        'keep status == 3 || (status > 20 && status < 30)',
        'keep isHardProcess() ||  fromHardProcessDecayed()  || fromHardProcessFinalState() || (statusFlags().fromHardProcess() && statusFlags().isLastCopy())',
        'keep  (status > 70 && status < 80 && pt > 15) ',
        'keep abs(pdgId) == 23 || abs(pdgId) == 24 || abs(pdgId) == 25 || abs(pdgId) == 37 ',
        'keep (1000001 <= abs(pdgId) <= 1000039 ) || ( 2000001 <= abs(pdgId) <= 2000015)'
    ),
    src = cms.InputTag("prunedGenParticles")
)


process.finalIsolatedTracks = cms.EDProducer("IsolatedTrackCleaner",
    cut = cms.string('((pt>5 && (abs(pdgId) == 11 || abs(pdgId) == 13)) || pt > 10) && (abs(pdgId) < 15 || abs(eta) < 2.5) && ((abs(dxy) < 0.2 && abs(dz) < 0.1) || pt>15) && ((pfIsolationDR03().chargedHadronIso < 5 && pt < 25) || pfIsolationDR03().chargedHadronIso/pt < 0.2)'),
    finalLeptons = cms.VInputTag(cms.InputTag("finalElectrons"), cms.InputTag("finalLooseMuons")),
    tracks = cms.InputTag("isolatedTracks")
)


process.finalJetsAK8ConstituentsTable = cms.EDProducer("SimplePatJetConstituentTableProducer",
    candIdxDoc = cms.string('Index in the PFCand table'),
    candIdxName = cms.string('pfCandIdx'),
    candidates = cms.InputTag("finalPFCandidates"),
    jetConstCut = cms.string(''),
    jetCut = cms.string(' pt > 170'),
    jets = cms.InputTag("finalJetsAK8"),
    name = cms.string('FatJetPFCand')
)


process.finalJetsAK8PFConstituents = cms.EDProducer("PatJetConstituentPtrSelector",
    cut = cms.string('abs(eta) <= 2.5'),
    src = cms.InputTag("finalJetsAK8")
)


process.finalPFCandidates = cms.EDProducer("PackedCandidatePtrMerger",
    skipNulls = cms.bool(True),
    src = cms.VInputTag(cms.InputTag("selectedFinalJetsAK8PFConstituents")),
    warnOnSkip = cms.bool(True)
)


process.fsrTable = cms.EDProducer("SimplePATGenericParticleFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('Final state radiation photons emitted by muons or electrons'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('FsrPhoton'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("leptonFSRphotons"),
    variables = cms.PSet(
        dROverEt2 = cms.PSet(
            doc = cms.string('deltaR to associated muon divided by photon et2'),
            expr = cms.string("userFloat(\'dROverEt2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        electronIdx = cms.PSet(
            doc = cms.string('index of associated electron'),
            expr = cms.string("?hasUserCand(\'associatedElectron\')?userCand(\'associatedElectron\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        muonIdx = cms.PSet(
            doc = cms.string('index of associated muon'),
            expr = cms.string("?hasUserCand(\'associatedMuon\')?userCand(\'associatedMuon\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        relIso03 = cms.PSet(
            doc = cms.string('relative isolation in a 0.3 cone without CHS'),
            expr = cms.string("userFloat(\'relIso03\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.genFilterTable = cms.EDProducer("SimpleGenFilterFlatTableProducerLumi",
    doc = cms.string('Generator filter information'),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenFilter'),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("genFilterEfficiencyProducer"),
    variables = cms.PSet(
        filterEfficiency = cms.PSet(
            doc = cms.string('generator filter: efficiency'),
            expr = cms.string('filterEfficiency()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        filterEfficiencyError = cms.PSet(
            doc = cms.string('generator filter: efficiency error'),
            expr = cms.string('filterEfficiencyError()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        numEventsPassed = cms.PSet(
            doc = cms.string('generator filter: passed number of events'),
            expr = cms.string('numEventsPassed()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('int')
        ),
        numEventsTotal = cms.PSet(
            doc = cms.string('generator filter: total number of events'),
            expr = cms.string('numEventsTotal()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('int')
        )
    )
)


process.genIso = cms.EDProducer("GenPartIsoProducer",
    additionalPdgId = cms.int32(22),
    genPart = cms.InputTag("finalGenParticles"),
    packedGenPart = cms.InputTag("packedGenParticles")
)


process.genJetAK8FlavourAssociation = cms.EDProducer("JetFlavourClustering",
    bHadrons = cms.InputTag("patJetPartonsNano","bHadrons"),
    cHadrons = cms.InputTag("patJetPartonsNano","cHadrons"),
    ghostRescaling = cms.double(1e-18),
    hadronFlavourHasPriority = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    jets = cms.InputTag("slimmedGenJetsAK8"),
    leptons = cms.InputTag("patJetPartonsNano","leptons"),
    partons = cms.InputTag("patJetPartonsNano","physicsPartons"),
    rParam = cms.double(0.8)
)


process.genJetAK8FlavourTable = cms.EDProducer("GenJetFlavourTableProducer",
    cut = cms.string('pt > 100.'),
    deltaR = cms.double(0.1),
    jetFlavourInfos = cms.InputTag("genJetAK8FlavourAssociation"),
    name = cms.string('GenJetAK8'),
    src = cms.InputTag("slimmedGenJetsAK8")
)


process.genJetAK8Table = cms.EDProducer("SimpleGenJetFlatTableProducer",
    cut = cms.string('pt > 100.'),
    doc = cms.string('slimmedGenJetsAK8, i.e. ak8 Jets made with visible genparticles'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenJetAK8'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedGenJetsAK8"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.genJetFlavourAssociation = cms.EDProducer("JetFlavourClustering",
    bHadrons = cms.InputTag("patJetPartonsNano","bHadrons"),
    cHadrons = cms.InputTag("patJetPartonsNano","cHadrons"),
    ghostRescaling = cms.double(1e-18),
    hadronFlavourHasPriority = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    jets = cms.InputTag("slimmedGenJets"),
    leptons = cms.InputTag("patJetPartonsNano","leptons"),
    partons = cms.InputTag("patJetPartonsNano","physicsPartons"),
    rParam = cms.double(0.4)
)


process.genJetFlavourTable = cms.EDProducer("GenJetFlavourTableProducer",
    cut = cms.string('pt > 10'),
    deltaR = cms.double(0.1),
    jetFlavourInfos = cms.InputTag("slimmedGenJetsFlavourInfos"),
    name = cms.string('GenJet'),
    src = cms.InputTag("slimmedGenJets")
)


process.genJetTable = cms.EDProducer("SimpleGenJetFlatTableProducer",
    cut = cms.string('pt > 10'),
    doc = cms.string('slimmedGenJets, i.e. ak4 Jets made with visible genparticles'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedGenJets"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.genParticleTable = cms.EDProducer("SimpleGenParticleFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('interesting gen particles '),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        iso = cms.PSet(
            doc = cms.string('Isolation for leptons'),
            precision = cms.int32(8),
            src = cms.InputTag("genIso"),
            type = cms.string('float')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenPart'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("finalGenParticles"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        genPartIdxMother = cms.PSet(
            doc = cms.string('index of the mother particle'),
            expr = cms.string('?numberOfMothers>0?motherRef(0).key():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        mass = cms.PSet(
            doc = cms.string('Mass stored for all particles with the exception of quarks (except top), leptons/neutrinos, photons with mass < 1 GeV, gluons, pi0(111), pi+(211), D0(421), and D+(411). For these particles, you can lookup the value from PDG.'),
            expr = cms.string('?!((abs(pdgId)>=1 && abs(pdgId)<=5) || (abs(pdgId)>=11 && abs(pdgId)<=16) || pdgId==21 || pdgId==111 || abs(pdgId)==211 || abs(pdgId)==421 || abs(pdgId)==411 || (pdgId==22 && mass<1))?mass:0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.string('?((abs(pdgId)==6 || abs(pdgId)>1000000) && statusFlags().isLastCopy())?20:8'),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG id'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        status = cms.PSet(
            doc = cms.string('Particle status. 1=stable'),
            expr = cms.string('status'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        statusFlags = cms.PSet(
            doc = cms.string('gen status flags stored bitwise, bits are: 0 : isPrompt, 1 : isDecayedLeptonHadron, 2 : isTauDecayProduct, 3 : isPromptTauDecayProduct, 4 : isDirectTauDecayProduct, 5 : isDirectPromptTauDecayProduct, 6 : isDirectHadronDecayProduct, 7 : isHardProcess, 8 : fromHardProcess, 9 : isHardProcessTauDecayProduct, 10 : isDirectHardProcessTauDecayProduct, 11 : fromHardProcessBeforeFSR, 12 : isFirstCopy, 13 : isLastCopy, 14 : isLastCopyBeforeFSR, '),
            expr = cms.string('statusFlags().isLastCopyBeforeFSR()                  * 16384 +statusFlags().isLastCopy()                           * 8192  +statusFlags().isFirstCopy()                          * 4096  +statusFlags().fromHardProcessBeforeFSR()             * 2048  +statusFlags().isDirectHardProcessTauDecayProduct()   * 1024  +statusFlags().isHardProcessTauDecayProduct()         * 512   +statusFlags().fromHardProcess()                      * 256   +statusFlags().isHardProcess()                        * 128   +statusFlags().isDirectHadronDecayProduct()           * 64    +statusFlags().isDirectPromptTauDecayProduct()        * 32    +statusFlags().isDirectTauDecayProduct()              * 16    +statusFlags().isPromptTauDecayProduct()              * 8     +statusFlags().isTauDecayProduct()                    * 4     +statusFlags().isDecayedLeptonHadron()                * 2     +statusFlags().isPrompt()                             * 1      '),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint16')
        )
    )
)


process.genParticles2HepMC = cms.EDProducer("GenParticles2HepMCConverter",
    genEventInfo = cms.InputTag("generator"),
    genParticles = cms.InputTag("mergedGenParticles"),
    signalParticlePdgIds = cms.vint32()
)


process.genParticles2HepMCHiggsVtx = cms.EDProducer("GenParticles2HepMCConverter",
    genEventInfo = cms.InputTag("generator"),
    genParticles = cms.InputTag("mergedGenParticles"),
    signalParticlePdgIds = cms.vint32(25)
)


process.genProtonTable = cms.EDProducer("GenProtonTableProducer",
    cut = cms.string('(pdgId == 2212) && (abs(pz) > 5200) && (abs(pz) < 6467.5)'),
    doc = cms.string('generator level information on (signal+PU) protons'),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenProton'),
    srcAltPUProtons = cms.InputTag("genPUProtons","genPUProtons"),
    srcPUProtons = cms.InputTag("genPUProtons"),
    srcPruned = cms.InputTag("prunedGenParticles"),
    tolerance = cms.double(0.001)
)


process.genSubJetAK8Table = cms.EDProducer("SimpleGenJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedGenJetsAK8SoftDropSubJets, i.e. subjets of ak8 Jets made with visible genparticles'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('SubGenJetAK8'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedGenJetsAK8SoftDropSubJets"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.genTable = cms.EDProducer("SimpleGenEventFlatTableProducer",
    doc = cms.string('Generator information'),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Generator'),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("generator"),
    variables = cms.PSet(
        binvar = cms.PSet(
            doc = cms.string('MC generation binning value'),
            expr = cms.string('?hasBinningValues()?binningValues()[0]:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        id1 = cms.PSet(
            doc = cms.string('id of first parton'),
            expr = cms.string('?hasPDF?pdf().id.first:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('int')
        ),
        id2 = cms.PSet(
            doc = cms.string('id of second parton'),
            expr = cms.string('?hasPDF?pdf().id.second:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('int')
        ),
        scalePDF = cms.PSet(
            doc = cms.string('Q2 scale for PDF'),
            expr = cms.string('?hasPDF?pdf().scalePDF:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        weight = cms.PSet(
            doc = cms.string('MC generator weight'),
            expr = cms.string('weight()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        x1 = cms.PSet(
            doc = cms.string('x1 fraction of proton momentum carried by the first parton'),
            expr = cms.string('?hasPDF?pdf().x.first:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        x2 = cms.PSet(
            doc = cms.string('x2 fraction of proton momentum carried by the second parton'),
            expr = cms.string('?hasPDF?pdf().x.second:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        xpdf1 = cms.PSet(
            doc = cms.string('x*pdf(x) for the first parton'),
            expr = cms.string('?hasPDF?pdf().xPDF.first:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        xpdf2 = cms.PSet(
            doc = cms.string('x*pdf(x) for the second parton'),
            expr = cms.string('?hasPDF?pdf().xPDF.second:-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        )
    )
)


process.genVertexT0Table = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenVtx'),
    variables = cms.PSet(
        t0 = cms.PSet(
            doc = cms.string('gen vertex t0'),
            precision = cms.int32(12),
            src = cms.InputTag("genParticles","t0"),
            type = cms.string('float')
        )
    )
)


process.genVertexTable = cms.EDProducer("SimpleXYZPointFlatTableProducer",
    doc = cms.string('Gen vertex'),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenVtx'),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("genParticles","xyz0"),
    variables = cms.PSet(
        x = cms.PSet(
            doc = cms.string('gen vertex x'),
            expr = cms.string('X'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        y = cms.PSet(
            doc = cms.string('gen vertex y'),
            expr = cms.string('Y'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        z = cms.PSet(
            doc = cms.string('gen vertex z'),
            expr = cms.string('Z'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        )
    )
)


process.genVisTauTable = cms.EDProducer("SimpleGenParticleFlatTableProducer",
    cut = cms.string('pt > 10.'),
    doc = cms.string('gen hadronic taus '),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenVisTau'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("genVisTaus"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        genPartIdxMother = cms.PSet(
            doc = cms.string('index of the mother particle'),
            expr = cms.string('?numberOfMothers>0?motherRef(0).key():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        status = cms.PSet(
            doc = cms.string('Hadronic tau decay mode. 0=OneProng0PiZero, 1=OneProng1PiZero, 2=OneProng2PiZero, 10=ThreeProng0PiZero, 11=ThreeProng1PiZero, 15=Other'),
            expr = cms.string('status'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        )
    )
)


process.genVisTaus = cms.EDProducer("GenVisTauProducer",
    src = cms.InputTag("tauGenJetsSelectorAllHadronsForNano"),
    srcGenParticles = cms.InputTag("finalGenParticles")
)


process.genWeightsTable = cms.EDProducer("GenWeightsTableProducer",
    allowedNumScaleWeights = cms.vuint32(9),
    debug = cms.untracked.bool(False),
    genEvent = cms.InputTag("generator"),
    genLumiInfoHeader = cms.InputTag("generator"),
    keepAllPSWeights = cms.bool(False),
    lheInfo = cms.VInputTag(cms.InputTag("externalLHEProducer"), cms.InputTag("source")),
    lheWeightPrecision = cms.int32(14),
    maxPdfWeights = cms.uint32(150),
    namedWeightIDs = cms.vstring(),
    namedWeightLabels = cms.vstring(),
    preferredPDFs = cms.VPSet(
        cms.PSet(
            lhaid = cms.uint32(306000),
            name = cms.string('NNPDF31_nnlo_hessian_pdfas')
        ),
        cms.PSet(
            lhaid = cms.uint32(304400),
            name = cms.string('NNPDF31_nnlo_as_0118_hessian')
        ),
        cms.PSet(
            lhaid = cms.uint32(325300),
            name = cms.string('NNPDF31_nnlo_as_0118_mc_hessian_pdfas')
        ),
        cms.PSet(
            lhaid = cms.uint32(316200),
            name = cms.string('NNPDF31_nnlo_as_0118_mc')
        ),
        cms.PSet(
            lhaid = cms.uint32(325500),
            name = cms.string('NNPDF31_nnlo_as_0118_nf_4_mc_hessian')
        ),
        cms.PSet(
            lhaid = cms.uint32(320900),
            name = cms.string('NNPDF31_nnlo_as_0118_nf_4')
        ),
        cms.PSet(
            lhaid = cms.uint32(260000),
            name = cms.string('NNPDF30_nlo_as_0118')
        ),
        cms.PSet(
            lhaid = cms.uint32(262000),
            name = cms.string('NNPDF30_lo_as_0130')
        ),
        cms.PSet(
            lhaid = cms.uint32(292000),
            name = cms.string('NNPDF30_nlo_nf_4_pdfas')
        ),
        cms.PSet(
            lhaid = cms.uint32(292200),
            name = cms.string('NNPDF30_nlo_nf_5_pdfas')
        ),
        cms.PSet(
            lhaid = cms.uint32(91400),
            name = cms.string('PDF4LHC15_nnlo_30_pdfas')
        ),
        cms.PSet(
            lhaid = cms.uint32(90400),
            name = cms.string('PDF4LHC15_nlo_30_pdfas')
        ),
        cms.PSet(
            lhaid = cms.uint32(90900),
            name = cms.string('PDF4LHC15_nlo_30')
        )
    )
)


process.globalVariablesTableProducer = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string(''),
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            precision = cms.int32(-1),
            src = cms.required.InputTag,
            type = cms.string('int')
        )
    )
)


process.hOverEForPho = cms.EDProducer("PhoHoverEValueMapProducer",
    QuadraticEAFile_HoverE = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_coneBasedHoverE_95percentBased.txt'),
    relative = cms.bool(False),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedPhotons")
)


process.hfJetPuppiShowerShapeforNanoAOD = cms.EDProducer("HFJetShowerShape",
    hfTowerEtaWidth = cms.double(0.175),
    hfTowerPhiWidth = cms.double(0.175),
    jetEtaThreshold = cms.double(2.9),
    jetPtThreshold = cms.double(25),
    jetReferenceRadius = cms.double(0.4),
    jets = cms.InputTag("updatedJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    offsetPerPU = cms.double(0.4),
    stripPtThreshold = cms.double(10),
    vertexRecoEffcy = cms.double(0.7),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    widthPtThreshold = cms.double(3)
)


process.hfJetShowerShape = cms.EDProducer("HFJetShowerShape",
    hfTowerEtaWidth = cms.double(0.175),
    hfTowerPhiWidth = cms.double(0.175),
    jetEtaThreshold = cms.double(2.9),
    jetPtThreshold = cms.double(25),
    jetReferenceRadius = cms.double(0.4),
    jets = cms.InputTag("ak4PFJetsCHS"),
    mightGet = cms.optional.untracked.vstring,
    offsetPerPU = cms.double(0.4),
    stripPtThreshold = cms.double(10),
    vertexRecoEffcy = cms.double(0.7),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    widthPtThreshold = cms.double(3)
)


process.isFromLostTrackForIsoTk = cms.EDProducer("IsFromLostTrackMapProducer",
    lostTracks = cms.InputTag("lostTracks"),
    srcIsoTracks = cms.InputTag("finalIsolatedTracks")
)


process.isoForEle = cms.EDProducer("EleIsoValueMapProducer",
    EAFile_MiniIso = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Run3_Winter22/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_122X.txt'),
    EAFile_PFIso = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Run3_Winter22/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_122X.txt'),
    relative = cms.bool(False),
    rho_MiniIso = cms.InputTag("fixedGridRhoFastjetAll"),
    rho_PFIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedElectrons")
)


process.isoForEleFall17V2 = cms.EDProducer("EleIsoValueMapProducer",
    EAFile_MiniIso = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
    EAFile_PFIso = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
    relative = cms.bool(False),
    rho_MiniIso = cms.InputTag("fixedGridRhoFastjetAll"),
    rho_PFIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedElectrons")
)


process.isoForIsoTk = cms.EDProducer("IsoTrackIsoValueMapProducer",
    EAFile_MiniIso = cms.FileInPath('PhysicsTools/NanoAOD/data/effAreaMuons_cone03_pfNeuHadronsAndPhotons_80X.txt'),
    relative = cms.bool(True),
    rho_MiniIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("finalIsolatedTracks")
)


process.isoForLowPtEle = cms.EDProducer("EleIsoValueMapProducer",
    EAFile_MiniIso = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
    EAFile_PFIso = cms.FileInPath('RecoEgamma/ElectronIdentification/data/Fall17/effAreaElectrons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
    relative = cms.bool(True),
    rho_MiniIso = cms.InputTag("fixedGridRhoFastjetAll"),
    rho_PFIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("updatedLowPtElectrons")
)


process.isoForMu = cms.EDProducer("MuonIsoValueMapProducer",
    EAFile_MiniIso = cms.FileInPath('PhysicsTools/NanoAOD/data/effAreaMuons_cone03_pfNeuHadronsAndPhotons_94X.txt'),
    relative = cms.bool(False),
    rho_MiniIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedMuonsUpdated")
)


process.isoForPho = cms.EDProducer("PhoIsoValueMapProducer",
    QuadraticEAFile_PFIso_Chg = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ChgHadronIso_95percentBased.txt'),
    QuadraticEAFile_PFIso_ECal = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ECalClusterIso_95percentBased.txt'),
    QuadraticEAFile_PFIso_HCal = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_HCalClusterIso_95percentBased.txt'),
    doQuadratic = cms.bool(True),
    relative = cms.bool(False),
    rho_PFIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedPhotons")
)


process.isoForPhoFall17V2 = cms.EDProducer("PhoIsoValueMapProducer",
    EAFile_PFIso_Chg = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfChargedHadrons_90percentBased_V2.txt'),
    EAFile_PFIso_Neu = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfNeutralHadrons_90percentBased_V2.txt'),
    EAFile_PFIso_Pho = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Fall17/effAreaPhotons_cone03_pfPhotons_90percentBased_V2.txt'),
    QuadraticEAFile_PFIso_Chg = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ChgHadronIso_95percentBased.txt'),
    QuadraticEAFile_PFIso_ECal = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_ECalClusterIso_95percentBased.txt'),
    QuadraticEAFile_PFIso_HCal = cms.FileInPath('RecoEgamma/PhotonIdentification/data/RunIII_Winter22/effectiveArea_HCalClusterIso_95percentBased.txt'),
    doQuadratic = cms.bool(False),
    relative = cms.bool(False),
    rho_PFIso = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedPhotons")
)


process.isoTrackTable = cms.EDProducer("SimplePATIsolatedTrackFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('isolated tracks after basic selection (((pt>5 && (abs(pdgId) == 11 || abs(pdgId) == 13)) || pt > 10) && (abs(pdgId) < 15 || abs(eta) < 2.5) && ((abs(dxy) < 0.2 && abs(dz) < 0.1) || pt>15) && ((pfIsolationDR03().chargedHadronIso < 5 && pt < 25) || pfIsolationDR03().chargedHadronIso/pt < 0.2)) and lepton veto'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        isFromLostTrack = cms.PSet(
            doc = cms.string('if isolated track comes from a lost track'),
            precision = cms.int32(-1),
            src = cms.InputTag("isFromLostTrackForIsoTk","isFromLostTrack"),
            type = cms.string('bool')
        ),
        miniPFRelIso_all = cms.PSet(
            doc = cms.string('mini PF relative isolation, total (with scaled rho*EA PU corrections)'),
            precision = cms.int32(10),
            src = cms.InputTag("isoForIsoTk","miniIsoAll"),
            type = cms.string('float')
        ),
        miniPFRelIso_chg = cms.PSet(
            doc = cms.string('mini PF relative isolation, charged component'),
            precision = cms.int32(10),
            src = cms.InputTag("isoForIsoTk","miniIsoChg"),
            type = cms.string('float')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('IsoTrack'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("finalIsolatedTracks"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        dxy = cms.PSet(
            doc = cms.string('dxy (with sign) wrt first PV, in cm'),
            expr = cms.string('dxy'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('dz (with sign) wrt first PV, in cm'),
            expr = cms.string('dz'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        fromPV = cms.PSet(
            doc = cms.string('isolated track comes from PV'),
            expr = cms.string('fromPV'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        isHighPurityTrack = cms.PSet(
            doc = cms.string('track is high purity'),
            expr = cms.string('isHighPurityTrack'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isPFcand = cms.PSet(
            doc = cms.string('if isolated track is a PF candidate'),
            expr = cms.string('packedCandRef().isNonnull()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG id of PF cand'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        pfRelIso03_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, total (deltaBeta corrections)'),
            expr = cms.string('(pfIsolationDR03().chargedHadronIso + max(pfIsolationDR03().neutralHadronIso + pfIsolationDR03().photonIso - pfIsolationDR03().puChargedHadronIso/2,0.0))/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pfRelIso03_chg = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, charged component'),
            expr = cms.string('pfIsolationDR03().chargedHadronIso/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.jercVars = cms.EDProducer("BetaStarPackedCandidateVarProducer",
    maxDR = cms.double(0.4),
    srcJet = cms.InputTag("updatedJets"),
    srcPF = cms.InputTag("packedPFCandidates")
)


process.jetCorrFactorsAK8 = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L1FastJet',
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK8PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedJetsAK8"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.jetCorrFactorsNano = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L1FastJet',
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFchs'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedJets"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.jetMCTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(True),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Jet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","jets"),
    variables = cms.PSet(
        genJetIdx = cms.PSet(
            doc = cms.string('index of matched gen jet'),
            expr = cms.string('?genJetFwdRef().backRef().isNonnull() && genJetFwdRef().backRef().pt() > 10.?genJetFwdRef().backRef().key():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        hadronFlavour = cms.PSet(
            doc = cms.string('flavour from hadron ghost clustering'),
            expr = cms.string('hadronFlavour()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        partonFlavour = cms.PSet(
            doc = cms.string('flavour from parton matching'),
            expr = cms.string('partonFlavour()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        )
    )
)


process.jetPuppiCorrFactorsNano = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L1FastJet',
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedJetsPuppi"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.jetPuppiTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedJetsPuppi, i.e. ak4 PFJets Puppi with JECs applied, after basic selection (pt > 15)'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Jet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","jets"),
    variables = cms.PSet(
        PNetRegPtRawCorr = cms.PSet(
            doc = cms.string('ParticleNet universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?abs(eta())<2.5?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:ptcorr\'):bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiForwardJetTags:ptcorr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        PNetRegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('ParticleNet universal flavor-aware pT regression neutrino correction, relative to visible. To apply full regression, multiply raw jet pT by both PNetRegPtRawCorr and PNetRegPtRawCorrNeutrino.'),
            expr = cms.string("?abs(eta())<2.5?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:ptnu\'):bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiForwardJetTags:ptnu\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        PNetRegPtRawRes = cms.PSet(
            doc = cms.string('ParticleNet universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?abs(eta())<2.5?0.5*(bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:ptreshigh\')-bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:ptreslow\')):0.5*(bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiForwardJetTags:ptreshigh\')-bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiForwardJetTags:ptreslow\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawCorr = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptcorr\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptcorr\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware pT regression neutrino correction, relative to visible. Correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptnu\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptnu\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawRes = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?(bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreshigh\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreslow\'))>0?0.5*(bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreshigh\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreslow\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4V1RegPtRawCorr = cms.PSet(
            doc = cms.string('UnifiedParT V1 universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptcorr\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptcorr\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4V1RegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('UnifiedParT V1 universal flavor-aware pT regression neutrino correction, relative to visible. Correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptnu\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptnu\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4V1RegPtRawRes = cms.PSet(
            doc = cms.string('UnifiedParT V1 universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?(bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreshigh\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreslow\'))>0?0.5*(bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreshigh\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreslow\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        area = cms.PSet(
            doc = cms.string('jet catchment area, for JECs'),
            expr = cms.string('jetArea()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavB = cms.PSet(
            doc = cms.string('DeepJet b+bb+lepb tag discriminator'),
            expr = cms.string("bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavCvB = cms.PSet(
            doc = cms.string('DeepJet c vs b+bb+lepb discriminator'),
            expr = cms.string("?(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\'))>0?bDiscriminator(\'pfDeepFlavourJetTags:probc\')/(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavCvL = cms.PSet(
            doc = cms.string('DeepJet c vs uds+g discriminator'),
            expr = cms.string("?(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\')+bDiscriminator(\'pfDeepFlavourJetTags:probg\'))>0?bDiscriminator(\'pfDeepFlavourJetTags:probc\')/(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\')+bDiscriminator(\'pfDeepFlavourJetTags:probg\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavQG = cms.PSet(
            doc = cms.string('DeepJet g vs uds discriminator'),
            expr = cms.string("?(bDiscriminator(\'pfDeepFlavourJetTags:probg\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\'))>0?bDiscriminator(\'pfDeepFlavourJetTags:probg\')/(bDiscriminator(\'pfDeepFlavourJetTags:probg\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetB = cms.PSet(
            doc = cms.string('ParticleNet b vs. udscg'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:BvsAll\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:BvsAll\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetCvB = cms.PSet(
            doc = cms.string('ParticleNet c vs. b'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:CvsB\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:CvsB\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetCvL = cms.PSet(
            doc = cms.string('ParticleNet c vs. udsg'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:CvsL\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:CvsL\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetCvNotB = cms.PSet(
            doc = cms.string('ParticleNet C vs notB'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:probb\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:probc\')/(1.-bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralJetTags:probb\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetQvG = cms.PSet(
            doc = cms.string('ParticleNet q (udsbc) vs. g'),
            expr = cms.string("?abs(eta())<2.5?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:QvsG\'):bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiForwardDiscriminatorsJetTags:QvsG\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetTauVJet = cms.PSet(
            doc = cms.string('ParticleNet tau vs. jet'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:TauVsJet\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTags:TauVsJet\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4B = cms.PSet(
            doc = cms.string('UnifiedParT b vs. udscg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:BvsAll\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:BvsAll\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4CvB = cms.PSet(
            doc = cms.string('UnifiedParT c vs. b'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsB\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsB\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4CvL = cms.PSet(
            doc = cms.string('UnifiedParT c vs. udsg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsL\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsL\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4CvNotB = cms.PSet(
            doc = cms.string('UnifiedParT c vs. not b'),
            expr = cms.string("?((bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probb\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probbb\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:problepb\')))>0?((bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probc\'))/(1.-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probb\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probbb\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:problepb\'))):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4Ele = cms.PSet(
            doc = cms.string('UnifiedParT electron raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probele\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4Mu = cms.PSet(
            doc = cms.string('UnifiedParT muon raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probmu\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4QvG = cms.PSet(
            doc = cms.string('UnifiedParT q (uds) vs. g'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:QvsG\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:QvsG\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4SvCB = cms.PSet(
            doc = cms.string('UnifiedParT s vs. bc'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsBC\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsBC\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4SvUDG = cms.PSet(
            doc = cms.string('UnifiedParT s vs. udg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsUDG\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsUDG\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4TauVJet = cms.PSet(
            doc = cms.string('UnifiedParT tau vs. jet'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:TauVsJet\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:TauVsJet\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4UDG = cms.PSet(
            doc = cms.string('UnifiedParT u+d+g raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probu\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probd\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probg\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4probb = cms.PSet(
            doc = cms.string('UnifiedParT b raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        btagUParTAK4probbb = cms.PSet(
            doc = cms.string('UnifiedParT bb raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probbb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        chEmEF = cms.PSet(
            doc = cms.string('charged Electromagnetic Energy Fraction'),
            expr = cms.string('chargedEmEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chHEF = cms.PSet(
            doc = cms.string('charged Hadron Energy Fraction'),
            expr = cms.string('chargedHadronEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chMultiplicity = cms.PSet(
            doc = cms.string('(Puppi-weighted) Number of charged particles in the jet'),
            expr = cms.string('chargedMultiplicity()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        electronIdx1 = cms.PSet(
            doc = cms.string('index of first matching electron'),
            expr = cms.string("?overlaps(\'electrons\').size()>0?overlaps(\'electrons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        electronIdx2 = cms.PSet(
            doc = cms.string('index of second matching electron'),
            expr = cms.string("?overlaps(\'electrons\').size()>1?overlaps(\'electrons\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        hfEmEF = cms.PSet(
            doc = cms.string('electromagnetic Energy Fraction in HF'),
            expr = cms.string('HFEMEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfHEF = cms.PSet(
            doc = cms.string('hadronic Energy Fraction in HF'),
            expr = cms.string('HFHadronEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfadjacentEtaStripsSize = cms.PSet(
            doc = cms.string('eta size of the strips next to the central tower strip in HF (noise discriminating variable)'),
            expr = cms.string("userInt(\'hfadjacentEtaStripsSize\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        hfcentralEtaStripSize = cms.PSet(
            doc = cms.string('eta size of the central tower strip in HF (noise discriminating variable)'),
            expr = cms.string("userInt(\'hfcentralEtaStripSize\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        hfsigmaEtaEta = cms.PSet(
            doc = cms.string('sigmaEtaEta for HF jets (noise discriminating variable)'),
            expr = cms.string("userFloat(\'hfsigmaEtaEta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfsigmaPhiPhi = cms.PSet(
            doc = cms.string('sigmaPhiPhi for HF jets (noise discriminating variable)'),
            expr = cms.string("userFloat(\'hfsigmaPhiPhi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muEF = cms.PSet(
            doc = cms.string('muon Energy Fraction'),
            expr = cms.string('muonEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonIdx1 = cms.PSet(
            doc = cms.string('index of first matching muon'),
            expr = cms.string("?overlaps(\'muons\').size()>0?overlaps(\'muons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        muonIdx2 = cms.PSet(
            doc = cms.string('index of second matching muon'),
            expr = cms.string("?overlaps(\'muons\').size()>1?overlaps(\'muons\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        muonSubtrDeltaEta = cms.PSet(
            doc = cms.string('muon-subtracted raw eta - eta'),
            expr = cms.string("userFloat(\'muonSubtrRawEta\') - eta()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrDeltaPhi = cms.PSet(
            doc = cms.string('muon-subtracted raw phi - phi'),
            expr = cms.string("userFloat(\'muonSubtrRawPhi\') - phi()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrFactor = cms.PSet(
            doc = cms.string('1-(muon-subtracted raw pt)/(raw pt)'),
            expr = cms.string("1-userFloat(\'muonSubtrRawPt\')/(pt()*jecFactor(\'Uncorrected\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        nConstituents = cms.PSet(
            doc = cms.string('Number of particles in the jet'),
            expr = cms.string('numberOfDaughters()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nElectrons = cms.PSet(
            doc = cms.string('number of electrons in the jet'),
            expr = cms.string("?hasOverlaps(\'electrons\')?overlaps(\'electrons\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nMuons = cms.PSet(
            doc = cms.string('number of muons in the jet'),
            expr = cms.string("?hasOverlaps(\'muons\')?overlaps(\'muons\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nSVs = cms.PSet(
            doc = cms.string('number of secondary vertices in the jet'),
            expr = cms.string("?hasOverlaps(\'vertices\')?overlaps(\'vertices\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        neEmEF = cms.PSet(
            doc = cms.string('neutral Electromagnetic Energy Fraction'),
            expr = cms.string('neutralEmEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neHEF = cms.PSet(
            doc = cms.string('neutral Hadron Energy Fraction'),
            expr = cms.string('neutralHadronEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neMultiplicity = cms.PSet(
            doc = cms.string('(Puppi-weighted) Number of neutral particles in the jet'),
            expr = cms.string('neutralMultiplicity()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        puIdDisc = cms.PSet(
            doc = cms.string('Pileup ID BDT discriminant with 133X Winter24 PuppiV18 training'),
            expr = cms.string("userFloat(\'pileupJetIdPuppi:fullDiscriminant\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawFactor = cms.PSet(
            doc = cms.string('1 - Factor to get back to raw pT'),
            expr = cms.string("1.-jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        svIdx1 = cms.PSet(
            doc = cms.string('index of first matching secondary vertex'),
            expr = cms.string("?overlaps(\'vertices\').size()>0?overlaps(\'vertices\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        svIdx2 = cms.PSet(
            doc = cms.string('index of second matching secondary vertex'),
            expr = cms.string("?overlaps(\'vertices\').size()>1?overlaps(\'vertices\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        )
    )
)


process.jetTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedJets, i.e. ak4 PFJets CHS with JECs applied, after basic selection (pt > 15)'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        bRegCorr = cms.PSet(
            doc = cms.string('pt correction for b-jet energy regression'),
            precision = cms.int32(10),
            src = cms.InputTag("bjetNN","corr"),
            type = cms.string('float')
        ),
        bRegRes = cms.PSet(
            doc = cms.string('res on pt corrected with b-jet regression'),
            precision = cms.int32(6),
            src = cms.InputTag("bjetNN","res"),
            type = cms.string('float')
        ),
        cRegCorr = cms.PSet(
            doc = cms.string('pt correction for c-jet energy regression'),
            precision = cms.int32(10),
            src = cms.InputTag("cjetNN","corr"),
            type = cms.string('float')
        ),
        cRegRes = cms.PSet(
            doc = cms.string('res on pt corrected with c-jet regression'),
            precision = cms.int32(6),
            src = cms.InputTag("cjetNN","res"),
            type = cms.string('float')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Jet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","jets"),
    variables = cms.PSet(
        PNetRegPtRawCorr = cms.PSet(
            doc = cms.string('ParticleNet universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?abs(eta())<2.5?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptcorr\'):bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSForwardJetTags:ptcorr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        PNetRegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('ParticleNet universal flavor-aware pT regression neutrino correction, relative to visible. To apply full regression, multiply raw jet pT by both PNetRegPtRawCorr and PNetRegPtRawCorrNeutrino.'),
            expr = cms.string("?abs(eta())<2.5?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptnu\'):bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSForwardJetTags:ptnu\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        PNetRegPtRawRes = cms.PSet(
            doc = cms.string('ParticleNet universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?abs(eta())<2.5?0.5*(bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptreshigh\')-bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptreslow\')):0.5*(bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSForwardJetTags:ptreshigh\')-bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSForwardJetTags:ptreslow\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawCorr = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptcorr\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptcorr\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware pT regression neutrino correction, relative to visible. To apply full regression, multiply raw jet pT by both UParTAK4RegPtRawCorr and UParTAK4RegPtRawCorrNeutrino.'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptnu\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptnu\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawRes = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?(bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreshigh\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreslow\'))>0?0.5*(bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreshigh\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreslow\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        area = cms.PSet(
            doc = cms.string('jet catchment area, for JECs'),
            expr = cms.string('jetArea()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavB = cms.PSet(
            doc = cms.string('DeepJet b+bb+lepb tag discriminator'),
            expr = cms.string("bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavCvB = cms.PSet(
            doc = cms.string('DeepJet c vs b+bb+lepb discriminator'),
            expr = cms.string("?(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\'))>0?bDiscriminator(\'pfDeepFlavourJetTags:probc\')/(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavCvL = cms.PSet(
            doc = cms.string('DeepJet c vs uds+g discriminator'),
            expr = cms.string("?(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\')+bDiscriminator(\'pfDeepFlavourJetTags:probg\'))>0?bDiscriminator(\'pfDeepFlavourJetTags:probc\')/(bDiscriminator(\'pfDeepFlavourJetTags:probc\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\')+bDiscriminator(\'pfDeepFlavourJetTags:probg\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavQG = cms.PSet(
            doc = cms.string('DeepJet g vs uds discriminator'),
            expr = cms.string("?(bDiscriminator(\'pfDeepFlavourJetTags:probg\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\'))>0?bDiscriminator(\'pfDeepFlavourJetTags:probg\')/(bDiscriminator(\'pfDeepFlavourJetTags:probg\')+bDiscriminator(\'pfDeepFlavourJetTags:probuds\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetB = cms.PSet(
            doc = cms.string('ParticleNet b vs. udscg'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:BvsAll\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:BvsAll\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetCvB = cms.PSet(
            doc = cms.string('ParticleNet c vs. b'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:CvsB\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:CvsB\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetCvL = cms.PSet(
            doc = cms.string('ParticleNet c vs. udsg'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:CvsL\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:CvsL\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetCvNotB = cms.PSet(
            doc = cms.string('ParticleNet C vs notB'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probb\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probc\')/(1.-bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probb\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetQvG = cms.PSet(
            doc = cms.string('ParticleNet q (udsbc) vs. g'),
            expr = cms.string("?abs(eta())<2.5?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:QvsG\'):bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSForwardDiscriminatorsJetTags:QvsG\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagPNetTauVJet = cms.PSet(
            doc = cms.string('ParticleNet tau vs. jet'),
            expr = cms.string("?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:TauVsJet\')>0?bDiscriminator(\'pfParticleNetFromMiniAODAK4CHSCentralDiscriminatorsJetTags:TauVsJet\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4B = cms.PSet(
            doc = cms.string('UnifiedParT b vs. udscg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:BvsAll\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:BvsAll\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4CvB = cms.PSet(
            doc = cms.string('UnifiedParT c vs. b'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsB\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsB\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4CvL = cms.PSet(
            doc = cms.string('UnifiedParT c vs. udsg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsL\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:CvsL\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4CvNotB = cms.PSet(
            doc = cms.string('UnifiedParT c vs. not b'),
            expr = cms.string("?((bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probb\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probbb\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:problepb\')))>0?((bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probc\'))/(1.-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probb\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probbb\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:problepb\'))):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4Ele = cms.PSet(
            doc = cms.string('UnifiedParT electron raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probele\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4Mu = cms.PSet(
            doc = cms.string('UnifiedParT muon raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probmu\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4QvG = cms.PSet(
            doc = cms.string('UnifiedParT q (uds) vs. g'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:QvsG\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:QvsG\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4SvCB = cms.PSet(
            doc = cms.string('UnifiedParT s vs. bc'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsBC\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsBC\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4SvUDG = cms.PSet(
            doc = cms.string('UnifiedParT s vs. udg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsUDG\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:SvsUDG\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4TauVJet = cms.PSet(
            doc = cms.string('UnifiedParT tau vs. jet'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:TauVsJet\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:TauVsJet\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4UDG = cms.PSet(
            doc = cms.string('UnifiedParT u+d+g raw score'),
            expr = cms.string("bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probu\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probd\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:probg\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chEmEF = cms.PSet(
            doc = cms.string('charged Electromagnetic Energy Fraction'),
            expr = cms.string('chargedEmEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chFPV0EF = cms.PSet(
            doc = cms.string('charged fromPV==0 Energy Fraction (energy excluded from CHS jets). Previously called betastar.'),
            expr = cms.string("userFloat(\'chFPV0EF\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        chHEF = cms.PSet(
            doc = cms.string('charged Hadron Energy Fraction'),
            expr = cms.string('chargedHadronEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        chMultiplicity = cms.PSet(
            doc = cms.string('Number of charged particles in the jet'),
            expr = cms.string('chargedMultiplicity()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        electronIdx1 = cms.PSet(
            doc = cms.string('index of first matching electron'),
            expr = cms.string("?overlaps(\'electrons\').size()>0?overlaps(\'electrons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        electronIdx2 = cms.PSet(
            doc = cms.string('index of second matching electron'),
            expr = cms.string("?overlaps(\'electrons\').size()>1?overlaps(\'electrons\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        hfEmEF = cms.PSet(
            doc = cms.string('electromagnetic Energy Fraction in HF'),
            expr = cms.string('HFEMEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfHEF = cms.PSet(
            doc = cms.string('hadronic Energy Fraction in HF'),
            expr = cms.string('HFHadronEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfadjacentEtaStripsSize = cms.PSet(
            doc = cms.string('eta size of the strips next to the central tower strip in HF (noise discriminating variable) '),
            expr = cms.string("userInt(\'hfJetShowerShape:adjacentEtaStripsSize\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        hfcentralEtaStripSize = cms.PSet(
            doc = cms.string('eta size of the central tower strip in HF (noise discriminating variable) '),
            expr = cms.string("userInt(\'hfJetShowerShape:centralEtaStripSize\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        hfsigmaEtaEta = cms.PSet(
            doc = cms.string('sigmaEtaEta for HF jets (noise discriminating variable)'),
            expr = cms.string("userFloat(\'hfJetShowerShape:sigmaEtaEta\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hfsigmaPhiPhi = cms.PSet(
            doc = cms.string('sigmaPhiPhi for HF jets (noise discriminating variable)'),
            expr = cms.string("userFloat(\'hfJetShowerShape:sigmaPhiPhi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muEF = cms.PSet(
            doc = cms.string('muon Energy Fraction'),
            expr = cms.string('muonEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonIdx1 = cms.PSet(
            doc = cms.string('index of first matching muon'),
            expr = cms.string("?overlaps(\'muons\').size()>0?overlaps(\'muons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        muonIdx2 = cms.PSet(
            doc = cms.string('index of second matching muon'),
            expr = cms.string("?overlaps(\'muons\').size()>1?overlaps(\'muons\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        muonSubtrDeltaEta = cms.PSet(
            doc = cms.string('muon-subtracted raw eta - eta'),
            expr = cms.string("userFloat(\'muonSubtrRawEta\') - eta()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrDeltaPhi = cms.PSet(
            doc = cms.string('muon-subtracted raw phi - phi'),
            expr = cms.string("userFloat(\'muonSubtrRawPhi\') - phi()"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muonSubtrFactor = cms.PSet(
            doc = cms.string('1-(muon-subtracted raw pt)/(raw pt)'),
            expr = cms.string("1-userFloat(\'muonSubtrRawPt\')/(pt()*jecFactor(\'Uncorrected\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        nConstituents = cms.PSet(
            doc = cms.string('Number of particles in the jet'),
            expr = cms.string('numberOfDaughters()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nElectrons = cms.PSet(
            doc = cms.string('number of electrons in the jet'),
            expr = cms.string("?hasOverlaps(\'electrons\')?overlaps(\'electrons\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nMuons = cms.PSet(
            doc = cms.string('number of muons in the jet'),
            expr = cms.string("?hasOverlaps(\'muons\')?overlaps(\'muons\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nSVs = cms.PSet(
            doc = cms.string('number of secondary vertices in the jet'),
            expr = cms.string("?hasOverlaps(\'vertices\')?overlaps(\'vertices\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        neEmEF = cms.PSet(
            doc = cms.string('neutral Electromagnetic Energy Fraction'),
            expr = cms.string('neutralEmEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neHEF = cms.PSet(
            doc = cms.string('neutral Hadron Energy Fraction'),
            expr = cms.string('neutralHadronEnergyFraction()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        neMultiplicity = cms.PSet(
            doc = cms.string('Number of neutral particles in the jet'),
            expr = cms.string('neutralMultiplicity()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        puId = cms.PSet(
            doc = cms.string('Pileup ID flags with 106X (2018) training'),
            expr = cms.string("userInt(\'puIdNanoId\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        puIdDisc = cms.PSet(
            doc = cms.string('Pileup ID discriminant with 106X (2018) training'),
            expr = cms.string("userFloat(\'puIdNanoDisc\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        qgl = cms.PSet(
            doc = cms.string('Quark vs Gluon likelihood discriminator'),
            expr = cms.string("?userFloat(\'qgl\')>0?userFloat(\'qgl\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawFactor = cms.PSet(
            doc = cms.string('1 - Factor to get back to raw pT'),
            expr = cms.string("1.-jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        svIdx1 = cms.PSet(
            doc = cms.string('index of first matching secondary vertex'),
            expr = cms.string("?overlaps(\'vertices\').size()>0?overlaps(\'vertices\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        svIdx2 = cms.PSet(
            doc = cms.string('index of second matching secondary vertex'),
            expr = cms.string("?overlaps(\'vertices\').size()>1?overlaps(\'vertices\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        )
    )
)


process.l1PreFiringEventWeightTable = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('L1PreFiringWeight'),
    variables = cms.PSet(
        Dn = cms.PSet(
            doc = cms.string('L1 pre-firing event correction weight (1-probability), down var.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbDown"),
            type = cms.string('float')
        ),
        ECAL_Dn = cms.PSet(
            doc = cms.string('ECAL L1 pre-firing event correction weight (1-probability), down var.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbECALDown"),
            type = cms.string('float')
        ),
        ECAL_Nom = cms.PSet(
            doc = cms.string('ECAL L1 pre-firing event correction weight (1-probability)'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbECAL"),
            type = cms.string('float')
        ),
        ECAL_Up = cms.PSet(
            doc = cms.string('ECAL L1 pre-firing event correction weight (1-probability), up var.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbECALUp"),
            type = cms.string('float')
        ),
        Muon_Nom = cms.PSet(
            doc = cms.string('Muon L1 pre-firing event correction weight (1-probability)'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbMuon"),
            type = cms.string('float')
        ),
        Muon_StatDn = cms.PSet(
            doc = cms.string('Muon L1 pre-firing event correction weight (1-probability), down var. stat.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbMuonStatDown"),
            type = cms.string('float')
        ),
        Muon_StatUp = cms.PSet(
            doc = cms.string('Muon L1 pre-firing event correction weight (1-probability), up var. stat.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbMuonStatUp"),
            type = cms.string('float')
        ),
        Muon_SystDn = cms.PSet(
            doc = cms.string('Muon L1 pre-firing event correction weight (1-probability), down var. syst.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbMuonSystDown"),
            type = cms.string('float')
        ),
        Muon_SystUp = cms.PSet(
            doc = cms.string('Muon L1 pre-firing event correction weight (1-probability), up var. syst.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbMuonSystUp"),
            type = cms.string('float')
        ),
        Nom = cms.PSet(
            doc = cms.string('L1 pre-firing event correction weight (1-probability)'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProb"),
            type = cms.string('float')
        ),
        Up = cms.PSet(
            doc = cms.string('L1 pre-firing event correction weight (1-probability), up var.'),
            precision = cms.int32(8),
            src = cms.InputTag("prefiringweight","nonPrefiringProbUp"),
            type = cms.string('float')
        )
    )
)


process.l1bits = cms.EDProducer("L1TriggerResultsConverter",
    legacyL1 = cms.bool(False),
    src = cms.InputTag("gtStage2Digis"),
    src_ext = cms.InputTag("simGtExtUnprefireable"),
    storeUnprefireableBits = cms.bool(True)
)


process.lepInAK8JetVars = cms.EDProducer("LepInJetProducer",
    src = cms.InputTag("updatedJetsAK8WithUserData"),
    srcEle = cms.InputTag("finalElectrons"),
    srcMu = cms.InputTag("finalMuons")
)


process.leptonFSRProducer = cms.EDProducer("LeptonFSRProducer",
    deltaROverEt2Max = cms.double(0.05),
    eleEtaMax = cms.double(2.5),
    elePtMin = cms.double(5),
    electrons = cms.InputTag("slimmedElectrons"),
    isolation = cms.double(2),
    mightGet = cms.optional.untracked.vstring,
    muonEtaMax = cms.double(2.4),
    muonPtMin = cms.double(3),
    muons = cms.InputTag("slimmedMuons"),
    packedPFCandidates = cms.InputTag("packedPFCandidates"),
    photonPtMin = cms.double(2),
    slimmedElectrons = cms.InputTag("slimmedElectrons")
)


process.leptonFSRphotons = cms.EDProducer("LeptonFSRProducer",
    deltaROverEt2Max = cms.double(0.05),
    eleEtaMax = cms.double(2.5),
    elePtMin = cms.double(5),
    electrons = cms.InputTag("linkedObjects","electrons"),
    isolation = cms.double(2),
    mightGet = cms.optional.untracked.vstring,
    muonEtaMax = cms.double(2.4),
    muonPtMin = cms.double(3),
    muons = cms.InputTag("linkedObjects","muons"),
    packedPFCandidates = cms.InputTag("packedPFCandidates"),
    photonPtMin = cms.double(2),
    slimmedElectrons = cms.InputTag("slimmedElectrons")
)


process.lhcInfoProducer = cms.EDProducer("LHCInfoProducer",
    lhcInfoLabel = cms.string(''),
    lhcInfoPerFillLabel = cms.string(''),
    lhcInfoPerLSLabel = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    useNewLHCInfo = cms.bool(True)
)


process.lhcInfoTable = cms.EDProducer("LHCInfoProducer",
    lhcInfoLabel = cms.string(''),
    lhcInfoPerFillLabel = cms.string(''),
    lhcInfoPerLSLabel = cms.string(''),
    mightGet = cms.optional.untracked.vstring,
    useNewLHCInfo = cms.bool(True)
)


process.lheInfoTable = cms.EDProducer("LHETablesProducer",
    lheInfo = cms.VInputTag(cms.InputTag("externalLHEProducer"), cms.InputTag("source")),
    precision = cms.int32(14),
    storeLHEParticles = cms.bool(True)
)


process.linkedObjects = cms.EDProducer("PATObjectCrossLinker",
    boostedTaus = cms.InputTag("finalBoostedTaus"),
    electrons = cms.InputTag("finalElectrons"),
    jets = cms.InputTag("finalJetsPuppi"),
    lowPtElectrons = cms.InputTag("finalLowPtElectrons"),
    muons = cms.InputTag("finalMuons"),
    photons = cms.InputTag("finalPhotons"),
    taus = cms.InputTag("finalTaus"),
    vertices = cms.InputTag("slimmedSecondaryVertices")
)


process.lowPtElectronMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==1 electrons or photons'),
    genparticles = cms.InputTag("finalGenParticles"),
    mapTauAnc = cms.InputTag("matchingLowPtElecPhoton","hasTauAnc"),
    mcMap = cms.InputTag("lowPtElectronsMCMatchForTable"),
    mcMapDressedLep = cms.InputTag("lowPtElectronsMCMatchForTableAlt"),
    objName = cms.string('LowPtElectron'),
    objType = cms.string('Electron'),
    src = cms.InputTag("linkedObjects","lowPtElectrons")
)


process.lowPtElectronTable = cms.EDProducer("SimplePATElectronFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string("slimmedLowPtElectrons after basic selection (pt > 1. && electronID(\'ID\') > -0.25)"),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('LowPtElectron'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","lowPtElectrons"),
    variables = cms.PSet(
        ID = cms.PSet(
            doc = cms.string('ID, BDT (raw) score'),
            expr = cms.string("electronID(\'ID\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        convVeto = cms.PSet(
            doc = cms.string('pass conversion veto'),
            expr = cms.string('passConversionVeto()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        convVtxRadius = cms.PSet(
            doc = cms.string('conversion vertex radius (cm)'),
            expr = cms.string("userFloat(\'convVtxRadius\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(7),
            type = cms.string('float')
        ),
        convWP = cms.PSet(
            doc = cms.string('conversion flag bit map: 1=Veto, 2=Loose, 3=Tight'),
            expr = cms.string("userInt(\'convOpen\')*1 + userInt(\'convLoose\')*2 + userInt(\'convTight\')*4"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        deltaEtaSC = cms.PSet(
            doc = cms.string('delta eta (SC,ele) with sign'),
            expr = cms.string('superCluster().eta()-eta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dxy = cms.PSet(
            doc = cms.string('dxy (with sign) wrt first PV, in cm'),
            expr = cms.string("dB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dxyErr = cms.PSet(
            doc = cms.string('dxy uncertainty, in cm'),
            expr = cms.string("edB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('dz (with sign) wrt first PV, in cm'),
            expr = cms.string("dB(\'PVDZ\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dzErr = cms.PSet(
            doc = cms.string('dz uncertainty, in cm'),
            expr = cms.string("abs(edB(\'PVDZ\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        eInvMinusPInv = cms.PSet(
            doc = cms.string('1/E_SC - 1/p_trk'),
            expr = cms.string('(1-eSuperClusterOverP())/ecalEnergy()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        electronIdx = cms.PSet(
            doc = cms.string('index of the overlapping PF electron (-1 if none)'),
            expr = cms.string("?overlaps(\'electrons\').size()>0?overlaps(\'electrons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        energyErr = cms.PSet(
            doc = cms.string('energy error of the cluster-track combination'),
            expr = cms.string("p4Error(\'P4_COMBINATION\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        hoe = cms.PSet(
            doc = cms.string('H over E'),
            expr = cms.string('hadronicOverEm()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        lostHits = cms.PSet(
            doc = cms.string('number of missing inner hits'),
            expr = cms.string("gsfTrack.hitPattern.numberOfLostHits(\'MISSING_INNER_HITS\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        miniPFRelIso_all = cms.PSet(
            doc = cms.string('mini PF relative isolation, total (with scaled rho*EA PU corrections)'),
            expr = cms.string("userFloat(\'miniIsoAll\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        miniPFRelIso_chg = cms.PSet(
            doc = cms.string('mini PF relative isolation, charged component'),
            expr = cms.string("userFloat(\'miniIsoChg\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        photonIdx = cms.PSet(
            doc = cms.string('index of the first associated photon (-1 if none)'),
            expr = cms.string("?overlaps(\'photons\').size()>0?overlaps(\'photons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptbiased = cms.PSet(
            doc = cms.string('ElectronSeed, pT- and dxy- dependent BDT (raw) score'),
            expr = cms.string("electronID(\'ptbiased\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        r9 = cms.PSet(
            doc = cms.string('R9 of the SC, calculated with full 5x5 region'),
            expr = cms.string('full5x5_r9()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        scEtOverPt = cms.PSet(
            doc = cms.string('(SC energy)/pt-1'),
            expr = cms.string('(superCluster().energy()/(pt*cosh(superCluster().eta())))-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        sieie = cms.PSet(
            doc = cms.string('sigma_IetaIeta of the SC, calculated with full 5x5 region'),
            expr = cms.string('full5x5_sigmaIetaIeta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        unbiased = cms.PSet(
            doc = cms.string('ElectronSeed, pT- and dxy- agnostic BDT (raw) score'),
            expr = cms.string("electronID(\'unbiased\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.lowPtElectronsMCMatchForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticles"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11),
    mcStatus = cms.vint32(1),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","lowPtElectrons")
)


process.lowPtElectronsMCMatchForTableAlt = cms.EDProducer("GenJetMatcherDRPtByDR",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("matchingLowPtElecPhoton","merged"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11, 22),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","lowPtElectrons")
)


process.lowPtGsfElectronID = cms.EDProducer("LowPtGsfElectronIDProducer",
    MaxPtThreshold = cms.double(15),
    MinPtThreshold = cms.double(0.5),
    ModelNames = cms.vstring(''),
    ModelThresholds = cms.vdouble(-99),
    ModelWeights = cms.vstring('RecoEgamma/ElectronIdentification/data/LowPtElectrons/LowPtElectrons_ID_2020Nov28.root'),
    PassThrough = cms.bool(False),
    Version = cms.string('V1'),
    electrons = cms.InputTag("lowPtGsfElectrons"),
    gsfToTrack = cms.InputTag("lowPtGsfToTrackLinks"),
    mightGet = cms.optional.untracked.vstring,
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    unbiased = cms.InputTag("lowPtGsfElectronSeedValueMaps","unbiased"),
    useGsfToTrack = cms.bool(False),
    usePAT = cms.bool(False)
)


process.lowPtPATElectronID = cms.EDProducer("LowPtGsfElectronIDProducer",
    MaxPtThreshold = cms.double(15),
    MinPtThreshold = cms.double(0.5),
    ModelNames = cms.vstring(''),
    ModelThresholds = cms.vdouble(-99),
    ModelWeights = cms.vstring('RecoEgamma/ElectronIdentification/data/LowPtElectrons/LowPtElectrons_ID_2020Nov28.root'),
    PassThrough = cms.bool(False),
    Version = cms.string('V1'),
    electrons = cms.InputTag("updatedLowPtElectrons"),
    gsfToTrack = cms.InputTag("lowPtGsfToTrackLinks"),
    mightGet = cms.optional.untracked.vstring,
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    unbiased = cms.InputTag(""),
    useGsfToTrack = cms.bool(False),
    usePAT = cms.bool(True)
)


process.matchGenBHadron = cms.EDProducer("GenHFHadronMatcher",
    flavour = cms.int32(5),
    genParticles = cms.InputTag("prunedGenParticles"),
    jetFlavourInfos = cms.InputTag("slimmedGenJetsFlavourInfos"),
    noBBbarResonances = cms.bool(False),
    onlyJetClusteredHadrons = cms.bool(True)
)


process.matchGenCHadron = cms.EDProducer("GenHFHadronMatcher",
    flavour = cms.int32(4),
    genParticles = cms.InputTag("prunedGenParticles"),
    jetFlavourInfos = cms.InputTag("slimmedGenJetsFlavourInfos"),
    noBBbarResonances = cms.bool(False),
    onlyJetClusteredHadrons = cms.bool(True)
)


process.matchingElecPhoton = cms.EDProducer("GenJetGenPartMerger",
    cut = cms.string('pt > 3'),
    hasTauAnc = cms.InputTag("tautaggerForMatching"),
    srcJet = cms.InputTag("particleLevel","leptons"),
    srcPart = cms.InputTag("particleLevel","photons")
)


process.matchingLowPtElecPhoton = cms.EDProducer("GenJetGenPartMerger",
    cut = cms.string(''),
    hasTauAnc = cms.InputTag("tautaggerForMatching"),
    srcJet = cms.InputTag("particleLevel","leptons"),
    srcPart = cms.InputTag("particleLevel","photons")
)


process.mergedGenParticles = cms.EDProducer("MergedGenParticleProducer",
    inputPacked = cms.InputTag("packedGenParticles"),
    inputPruned = cms.InputTag("prunedGenParticles")
)


process.metMCTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('Gen MET'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('genMET.phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('genMET.pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.metrawCaloPuppi = cms.EDProducer("RecoMETExtractor",
    correctionLevel = cms.string('rawCalo'),
    metSource = cms.InputTag("slimmedMETsPuppi","","@skipCurrentProcess")
)


process.modifiedLowPtElectrons = cms.EDProducer("ModifiedElectronProducer",
    modifierConfig = cms.PSet(
        modifications = cms.VPSet(cms.PSet(
            addExtraUserVars = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            conversions = cms.InputTag("gsfTracksOpenConversions","gsfTracksOpenConversions"),
            modifierName = cms.string('LowPtElectronModifier'),
            vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
        ))
    ),
    src = cms.InputTag("slimmedLowPtElectrons")
)


process.muCaloMetCorr = cms.EDProducer("MuonMETcorrInputProducer",
    src = cms.InputTag("muons"),
    srcMuonCorrections = cms.InputTag("muonMETValueMapProducer","muCorrData")
)


process.muCaloMetCorrPuppi = cms.EDProducer("MuonMETcorrInputProducer",
    src = cms.InputTag("muons"),
    srcMuonCorrections = cms.InputTag("muonMETValueMapProducer","muCorrData")
)


process.multiRPTable = cms.EDProducer("SimpleProtonTrackFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('bon'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        arm = cms.PSet(
            doc = cms.string('0 = sector45, 1 = sector56'),
            precision = cms.int32(-1),
            src = cms.InputTag("protonTable","arm"),
            type = cms.string('uint8')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Proton_multiRP'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(True),
    src = cms.InputTag("ctppsProtons","multiRP"),
    variables = cms.PSet(
        t = cms.PSet(
            doc = cms.string('Mandelstam variable t'),
            expr = cms.string('t'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(13),
            type = cms.string('float')
        ),
        thetaX = cms.PSet(
            doc = cms.string('theta x'),
            expr = cms.string('thetaX'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(13),
            type = cms.string('float')
        ),
        thetaY = cms.PSet(
            doc = cms.string('theta y'),
            expr = cms.string('thetaY'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(13),
            type = cms.string('float')
        ),
        time = cms.PSet(
            doc = cms.string('time'),
            expr = cms.string('time()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        ),
        timeUnc = cms.PSet(
            doc = cms.string('time uncertainty'),
            expr = cms.string('timeError'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(13),
            type = cms.string('float')
        ),
        xi = cms.PSet(
            doc = cms.string('xi or dp/p'),
            expr = cms.string('xi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.muonBPH = cms.EDProducer("MuonTriggerSelector",
    HLTPaths = cms.vstring(
        'HLT_DoubleMu4_LowMass_Displaced',
        'HLT_DoubleMu4_3_LowMass',
        'HLT_Mu8',
        'HLT_Mu3_PFJet40',
        'HLT_Mu4_L1DoubleMu',
        'HLT_Mu0_L1DoubleMu'
    ),
    bits = cms.InputTag("TriggerResults","","HLT"),
    maxdR_matching = cms.double(0.3),
    muonCollection = cms.InputTag("slimmedMuons"),
    muonSelection = cms.string('pt > 3 && abs(eta) < 2.4'),
    objects = cms.InputTag("slimmedPatTrigger"),
    prescales = cms.InputTag("patTrigger")
)


process.muonBPHMCMatch = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticlesBPH"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.05),
    mcPdgId = cms.vint32(13),
    mcStatus = cms.vint32(1),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("muonBPH","SelectedMuons")
)


process.muonBSConstrain = cms.EDProducer("MuonBeamspotConstraintValueMapProducer",
    src = cms.InputTag("linkedObjects","muons")
)


process.muonMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==1 muons'),
    mcMap = cms.InputTag("muonsMCMatchForTable"),
    objName = cms.string('Muon'),
    objType = cms.string('Muon'),
    src = cms.InputTag("linkedObjects","muons")
)


process.muonMVAID = cms.EDProducer("EvaluateMuonMVAID",
    backend = cms.string('ONNX'),
    batch_eval = cms.bool(True),
    inputTensorName = cms.string('float_input'),
    name = cms.string('muonMVAID'),
    outputFormulas = cms.vstring(
        'at(1)',
        '? at(1) > 0.08 ? 1 : 0',
        '? at(1) > 0.20 ? 1 : 0'
    ),
    outputNames = cms.vstring(
        'probGOOD',
        'wpMedium',
        'wpTight'
    ),
    outputTensorName = cms.string('probabilities'),
    src = cms.InputTag("slimmedMuonsUpdated"),
    variables = cms.VPSet(
        cms.PSet(
            expr = cms.string('isGlobalMuon'),
            name = cms.string('LepGood_global_muon')
        ),
        cms.PSet(
            expr = cms.string('?innerTrack.isNonnull?innerTrack().validFraction:-99'),
            name = cms.string('LepGood_validFraction')
        ),
        cms.PSet(
            name = cms.string('Muon_norm_chi2_extended')
        ),
        cms.PSet(
            expr = cms.string('combinedQuality().chi2LocalPosition'),
            name = cms.string('LepGood_local_chi2')
        ),
        cms.PSet(
            expr = cms.string('combinedQuality().trkKink'),
            name = cms.string('LepGood_kink')
        ),
        cms.PSet(
            expr = cms.string('segmentCompatibility'),
            name = cms.string('LepGood_segmentComp')
        ),
        cms.PSet(
            name = cms.string('Muon_n_Valid_hits_extended')
        ),
        cms.PSet(
            expr = cms.string('numberOfMatchedStations()'),
            name = cms.string('LepGood_n_MatchedStations')
        ),
        cms.PSet(
            expr = cms.string('?innerTrack.isNonnull()?innerTrack().hitPattern().numberOfValidPixelHits():-99'),
            name = cms.string('LepGood_Valid_pixel')
        ),
        cms.PSet(
            expr = cms.string('?innerTrack.isNonnull()?innerTrack().hitPattern().trackerLayersWithMeasurement():-99'),
            name = cms.string('LepGood_tracker_layers')
        ),
        cms.PSet(
            expr = cms.string('pt'),
            name = cms.string('LepGood_pt')
        ),
        cms.PSet(
            expr = cms.string('eta'),
            name = cms.string('LepGood_eta')
        )
    ),
    weightFile = cms.FileInPath('RecoMuon/MuonIdentification/data/mvaID.onnx')
)


process.muonMVALowPt = cms.EDProducer("MuonBaseMVAValueMapProducer",
    backend = cms.string('TMVA'),
    isClassifier = cms.bool(True),
    name = cms.string('muonMVALowPt'),
    src = cms.InputTag("linkedObjects","muons"),
    variables = cms.VPSet(
        cms.PSet(
            expr = cms.string('pt'),
            name = cms.string('LepGood_pt')
        ),
        cms.PSet(
            expr = cms.string('eta'),
            name = cms.string('LepGood_eta')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'jetNDauChargedMVASel\'):0"),
            name = cms.string('LepGood_jetNDauChargedMVASel')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'miniIsoChg\')/pt"),
            name = cms.string('LepGood_miniRelIsoCharged')
        ),
        cms.PSet(
            expr = cms.string("(userFloat(\'miniIsoAll\')-userFloat(\'miniIsoChg\'))/pt"),
            name = cms.string('LepGood_miniRelIsoNeutral')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'ptRel\'):0"),
            name = cms.string('LepGood_jetPtRelv2')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?max(userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:problepb\'),0.0):0.0"),
            name = cms.string('LepGood_jetDF')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?min(userFloat(\'ptRatio\'),1.5):1.0/(1.0+(pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt)"),
            name = cms.string('LepGood_jetPtRatio')
        ),
        cms.PSet(
            expr = cms.string("log(abs(dB(\'PV2D\')))"),
            name = cms.string('LepGood_dxy')
        ),
        cms.PSet(
            expr = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
            name = cms.string('LepGood_sip3d')
        ),
        cms.PSet(
            expr = cms.string("log(abs(dB(\'PVDZ\')))"),
            name = cms.string('LepGood_dz')
        ),
        cms.PSet(
            expr = cms.string('segmentCompatibility'),
            name = cms.string('LepGood_segmentComp')
        )
    ),
    weightFile = cms.FileInPath('PhysicsTools/NanoAOD/data/mu_BDTG_lowpt.weights.xml')
)


process.muonPNetScores = cms.EDProducer("MuonPNETProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'light',
        'prompt',
        'tau',
        'heavy'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('PhysicsTools/NanoAOD/data/PNetMuonId/model.onnx'),
    preprocess_json = cms.string('PhysicsTools/NanoAOD/data/PNetMuonId/preprocess.json'),
    src = cms.InputTag("muonPNetVariables"),
    srcLeps = cms.InputTag("linkedObjects","muons")
)


process.muonPNetVariables = cms.EDProducer("MuonTagInfoCollectionProducer",
    leptonVars = cms.PSet(
        MuonSelected_LepGood_dz = cms.string("log(abs(dB(\'PVDZ\')))"),
        MuonSelected_LepGood_eta = cms.string('eta'),
        MuonSelected_LepGood_jetDF = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?max(userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:problepb\'),0.0):0.0"),
        MuonSelected_LepGood_jetNDauChargedMVASel = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'jetNDauChargedMVASel\'):0"),
        MuonSelected_LepGood_jetPtRatio = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?min(userFloat(\'ptRatio\'),1.5):1.0/(1.0+(pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt)"),
        MuonSelected_LepGood_jetPtRelv2 = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'ptRel\'):0"),
        MuonSelected_LepGood_miniRelIsoCharged = cms.string("userFloat(\'miniIsoChg\')/pt"),
        MuonSelected_LepGood_miniRelIsoNeutral = cms.string("(userFloat(\'miniIsoAll\')-userFloat(\'miniIsoChg\'))/pt"),
        MuonSelected_LepGood_pt = cms.string('pt'),
        MuonSelected_Valid_pixel = cms.string('?innerTrack.isNonnull()?innerTrack().hitPattern().numberOfValidPixelHits():-99'),
        MuonSelected_dxy = cms.string("log(abs(dB(\'PV2D\')))"),
        MuonSelected_dz = cms.string("log(abs(dB(\'PVDZ\')))"),
        MuonSelected_global_muon = cms.string('isGlobalMuon'),
        MuonSelected_kink = cms.string('combinedQuality().trkKink'),
        MuonSelected_local_chi2 = cms.string('combinedQuality().chi2LocalPosition'),
        MuonSelected_mvaId = cms.string("userFloat(\'mvaIDMuon\')"),
        MuonSelected_n_MatchedStations = cms.string('numberOfMatchedStations()'),
        MuonSelected_segmentComp = cms.string('segmentCompatibility'),
        MuonSelected_sip3d = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
        MuonSelected_tracker_layers = cms.string('?innerTrack.isNonnull()?innerTrack().hitPattern().trackerLayersWithMeasurement():-99'),
        MuonSelected_validFraction = cms.string('?innerTrack.isNonnull?innerTrack().validFraction:-99')
    ),
    leptonVarsExt = cms.PSet(
        MuonSelected_mvaTTH = cms.InputTag("muonPROMPTMVA")
    ),
    mightGet = cms.optional.untracked.vstring,
    pfCandidates = cms.InputTag("packedPFCandidates"),
    pfVars = cms.PSet(
        PF_charge = cms.string('charge'),
        PF_dxySig = cms.string('?hasTrackDetails?dxy/max(dxyError,1.e-6):0'),
        PF_dzSig = cms.string('?hasTrackDetails?dz/max(dzError,1.e-6):0'),
        PF_fromPV = cms.string('fromPV'),
        PF_hcalFraction = cms.string('hcalFraction'),
        PF_isChargedHadron = cms.string('?abs(pdgId)==211?1:0'),
        PF_isElectron = cms.string('?abs(pdgId)==11?1:0'),
        PF_isMuon = cms.string('?abs(pdgId)==13?1:0'),
        PF_isNeutralHadron = cms.string('?abs(pdgId)==130?1:0'),
        PF_isPhoton = cms.string('?abs(pdgId)==22?1:0'),
        PF_mask = cms.string('1'),
        PF_numberOfPixelHits = cms.string('numberOfPixelHits'),
        PF_pt = cms.string('pt'),
        PF_puppiWeightNoLep = cms.string('puppiWeightNoLep'),
        PF_trackerLayersWithMeasurement = cms.string('?hasTrackDetails?bestTrack().hitPattern().trackerLayersWithMeasurement:0')
    ),
    pvSrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    src = cms.InputTag("linkedObjects","muons"),
    svVars = cms.PSet(
        SV_chi2 = cms.string('vertexChi2'),
        SV_eta = cms.string('eta'),
        SV_mask = cms.string('1'),
        SV_mass = cms.string('mass'),
        SV_nTracks = cms.string('numberOfDaughters'),
        SV_ndof = cms.string('vertexNdof'),
        SV_phi = cms.string('phi'),
        SV_pt = cms.string('pt')
    )
)


process.muonPROMPTMVA = cms.EDProducer("MuonBaseMVAValueMapProducer",
    backend = cms.string('TMVA'),
    isClassifier = cms.bool(True),
    name = cms.string('muonPROMPTMVA'),
    src = cms.InputTag("linkedObjects","muons"),
    variables = cms.VPSet(
        cms.PSet(
            expr = cms.string('pt'),
            name = cms.string('LepGood_pt')
        ),
        cms.PSet(
            expr = cms.string('eta'),
            name = cms.string('LepGood_eta')
        ),
        cms.PSet(
            expr = cms.string('(pfIsolationR03().sumChargedHadronPt + max(pfIsolationR03().sumNeutralHadronEt + pfIsolationR03().sumPhotonEt - pfIsolationR03().sumPUPt/2,0.0))/pt'),
            name = cms.string('LepGood_pfRelIso03_all')
        ),
        cms.PSet(
            expr = cms.string("userFloat(\'miniIsoChg\')/pt"),
            name = cms.string('LepGood_miniRelIsoCharged')
        ),
        cms.PSet(
            expr = cms.string("(userFloat(\'miniIsoAll\')-userFloat(\'miniIsoChg\'))/pt"),
            name = cms.string('LepGood_miniRelIsoNeutral')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'jetNDauChargedMVASel\'):0"),
            name = cms.string('LepGood_jetNDauChargedMVASel')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'ptRel\'):0"),
            name = cms.string('LepGood_jetPtRelv2')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?max(userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:problepb\'),0.0):0.0"),
            name = cms.string('LepGood_jetDF')
        ),
        cms.PSet(
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?min(userFloat(\'ptRatio\'),1.5):1.0/(1.0+(pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt)"),
            name = cms.string('LepGood_jetPtRatio')
        ),
        cms.PSet(
            expr = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
            name = cms.string('LepGood_sip3d')
        ),
        cms.PSet(
            expr = cms.string("log(abs(dB(\'PV2D\')))"),
            name = cms.string('LepGood_dxy')
        ),
        cms.PSet(
            expr = cms.string("log(abs(dB(\'PVDZ\')))"),
            name = cms.string('LepGood_dz')
        ),
        cms.PSet(
            expr = cms.string('segmentCompatibility'),
            name = cms.string('LepGood_segmentComp')
        )
    ),
    weightFile = cms.FileInPath('PhysicsTools/NanoAOD/data/mu_BDTG_2022.weights.xml')
)


process.muonTable = cms.EDProducer("SimplePATMuonFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string("slimmedMuons after basic selection (pt > 15 || (pt > 3 && (passed(\'CutBasedIdLoose\') || passed(\'SoftCutBasedId\') || passed(\'SoftMvaId\') || passed(\'CutBasedIdGlobalHighPt\') || passed(\'CutBasedIdTrkHighPt\'))))"),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        bsConstrainedChi2 = cms.PSet(
            doc = cms.string('chi2 of beamspot constraint'),
            precision = cms.int32(6),
            src = cms.InputTag("muonBSConstrain","muonBSConstrainedChi2"),
            type = cms.string('float')
        ),
        bsConstrainedPt = cms.PSet(
            doc = cms.string('pT with beamspot constraint'),
            precision = cms.int32(-1),
            src = cms.InputTag("muonBSConstrain","muonBSConstrainedPt"),
            type = cms.string('float')
        ),
        bsConstrainedPtErr = cms.PSet(
            doc = cms.string('pT error with beamspot constraint '),
            precision = cms.int32(6),
            src = cms.InputTag("muonBSConstrain","muonBSConstrainedPtErr"),
            type = cms.string('float')
        ),
        fsrPhotonIdx = cms.PSet(
            doc = cms.string('Index of the lowest-dR/ET2 among associated FSR photons'),
            precision = cms.int32(-1),
            src = cms.InputTag("leptonFSRphotons","muFsrIndex"),
            type = cms.string('int16')
        ),
        mvaLowPt = cms.PSet(
            doc = cms.string('Low pt muon ID score'),
            precision = cms.int32(14),
            src = cms.InputTag("muonMVALowPt"),
            type = cms.string('float')
        ),
        pnScore_heavy = cms.PSet(
            doc = cms.string('PNet muon ID score for lepton from B or D hadrons'),
            precision = cms.int32(14),
            src = cms.InputTag("muonPNetScores","heavy"),
            type = cms.string('float')
        ),
        pnScore_light = cms.PSet(
            doc = cms.string('PNet muon ID score for lepton from hadrons w/o b or c quarks OR w/o generator matching'),
            precision = cms.int32(14),
            src = cms.InputTag("muonPNetScores","light"),
            type = cms.string('float')
        ),
        pnScore_prompt = cms.PSet(
            doc = cms.string('PNet muon ID score for lepton from W/Z/H bosons'),
            precision = cms.int32(14),
            src = cms.InputTag("muonPNetScores","prompt"),
            type = cms.string('float')
        ),
        pnScore_tau = cms.PSet(
            doc = cms.string('PNet muon ID score for decay of tau to light leptons (mu)'),
            precision = cms.int32(14),
            src = cms.InputTag("muonPNetScores","tau"),
            type = cms.string('float')
        ),
        promptMVA = cms.PSet(
            doc = cms.string('Prompt MVA lepton ID score. Corresponds to the previous mvaTTH'),
            precision = cms.int32(14),
            src = cms.InputTag("muonPROMPTMVA"),
            type = cms.string('float')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Muon'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","muons"),
    variables = cms.PSet(
        VXBS_Cov00 = cms.PSet(
            doc = cms.string('0, 0 element of the VXBS Covariance matrix'),
            expr = cms.string('? tunePMuonBestTrack().isNonnull() && tunePMuonBestTrack().isAvailable() ? tunePMuonBestTrack().covariance(0,0) : -999'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        ),
        VXBS_Cov03 = cms.PSet(
            doc = cms.string('0, 3 element of the VXBS Covariance matrix'),
            expr = cms.string('? tunePMuonBestTrack().isNonnull() && tunePMuonBestTrack().isAvailable() ? tunePMuonBestTrack().covariance(0,3) : -999'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        ),
        VXBS_Cov33 = cms.PSet(
            doc = cms.string('3, 3 element of the VXBS Covariance matrix'),
            expr = cms.string('? tunePMuonBestTrack().isNonnull() && tunePMuonBestTrack().isAvailable() ? tunePMuonBestTrack().covariance(3,3) : -999'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        ),
        bestTrackType = cms.PSet(
            doc = cms.string('Type of track used (1=inner, 2=STA, 3=global, 4=TPFMS, 5=Picky, 6=DYT)'),
            expr = cms.string('muonBestTrackType()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        dxy = cms.PSet(
            doc = cms.string('dxy (with sign) wrt first PV, in cm'),
            expr = cms.string("dB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dxyErr = cms.PSet(
            doc = cms.string('dxy uncertainty, in cm'),
            expr = cms.string("edB(\'PV2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dxybs = cms.PSet(
            doc = cms.string('dxy (with sign) wrt the beam spot, in cm'),
            expr = cms.string("dB(\'BS2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dxybsErr = cms.PSet(
            doc = cms.string('dxy uncertainty wrt the beam spot, in cm'),
            expr = cms.string("edB(\'BS2D\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('dz (with sign) wrt first PV, in cm'),
            expr = cms.string("dB(\'PVDZ\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dzErr = cms.PSet(
            doc = cms.string('dz uncertainty, in cm'),
            expr = cms.string("abs(edB(\'PVDZ\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        ),
        highPtId = cms.PSet(
            doc = cms.string('high-pT cut-based ID (1 = tracker high pT, 2 = global high pT, which includes tracker high pT)'),
            expr = cms.string("?passed(\'CutBasedIdGlobalHighPt\')?2:passed(\'CutBasedIdTrkHighPt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        highPurity = cms.PSet(
            doc = cms.string('inner track is high purity'),
            expr = cms.string("?track.isNonnull?innerTrack().quality(\'highPurity\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        inTimeMuon = cms.PSet(
            doc = cms.string('inTimeMuon ID'),
            expr = cms.string("passed(\'InTimeMuon\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        ip3d = cms.PSet(
            doc = cms.string('3D impact parameter wrt first PV, in cm'),
            expr = cms.string("abs(dB(\'PV3D\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        isGlobal = cms.PSet(
            doc = cms.string('muon is global muon'),
            expr = cms.string('isGlobalMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isPFcand = cms.PSet(
            doc = cms.string('muon is PF candidate'),
            expr = cms.string('isPFMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isStandalone = cms.PSet(
            doc = cms.string('muon is a standalone muon'),
            expr = cms.string('isStandAloneMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isTracker = cms.PSet(
            doc = cms.string('muon is tracker muon'),
            expr = cms.string('isTrackerMuon'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        jetDF = cms.PSet(
            doc = cms.string('value of the DEEPJET b tagging algorithm discriminator of the associated jet (0 if none)'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?max(userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:probb\')+userCand(\'jetForLepJetVar\').bDiscriminator(\'pfDeepFlavourJetTags:problepb\'),0.0):0.0"),
            lazyEval = cms.untracked.bool(True),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        jetIdx = cms.PSet(
            doc = cms.string('index of the associated jet (-1 if none)'),
            expr = cms.string("?hasUserCand(\'jet\')?userCand(\'jet\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        jetNDauCharged = cms.PSet(
            doc = cms.string('number of charged daughters of the closest jet'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'jetNDauChargedMVASel\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        jetPtRelv2 = cms.PSet(
            doc = cms.string('Relative momentum of the lepton with respect to the closest jet after subtracting the lepton'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?userFloat(\'ptRel\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        jetRelIso = cms.PSet(
            doc = cms.string('Relative isolation in matched jet (1/ptRatio-1), -1 if none'),
            expr = cms.string("?userCand(\'jetForLepJetVar\').isNonnull()?(1./userFloat(\'ptRatio\'))-1.:-1."),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        looseId = cms.PSet(
            doc = cms.string('muon is loose muon'),
            expr = cms.string("passed(\'CutBasedIdLoose\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mediumId = cms.PSet(
            doc = cms.string('cut-based ID, medium WP'),
            expr = cms.string("passed(\'CutBasedIdMedium\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mediumPromptId = cms.PSet(
            doc = cms.string('cut-based ID, medium prompt WP'),
            expr = cms.string("passed(\'CutBasedIdMediumPrompt\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        miniIsoId = cms.PSet(
            doc = cms.string('MiniIso ID from miniAOD selector (1=MiniIsoLoose, 2=MiniIsoMedium, 3=MiniIsoTight, 4=MiniIsoVeryTight)'),
            expr = cms.string("passed(\'MiniIsoLoose\')+passed(\'MiniIsoMedium\')+passed(\'MiniIsoTight\')+passed(\'MiniIsoVeryTight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        miniPFRelIso_all = cms.PSet(
            doc = cms.string('mini PF relative isolation, total (with scaled rho*EA PU corrections)'),
            expr = cms.string("userFloat(\'miniIsoAll\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        miniPFRelIso_chg = cms.PSet(
            doc = cms.string('mini PF relative isolation, charged component'),
            expr = cms.string("userFloat(\'miniIsoChg\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        multiIsoId = cms.PSet(
            doc = cms.string('MultiIsoId from miniAOD selector (1=MultiIsoLoose, 2=MultiIsoMedium)'),
            expr = cms.string("?passed(\'MultiIsoMedium\')?2:passed(\'MultiIsoLoose\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        mvaMuID = cms.PSet(
            doc = cms.string('MVA-based ID score'),
            expr = cms.string("userFloat(\'mvaIDMuon\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        mvaMuID_WP = cms.PSet(
            doc = cms.string('MVA-based ID selector WPs (1=MVAIDwpMedium,2=MVAIDwpTight)'),
            expr = cms.string("userFloat(\'mvaIDMuon_wpMedium\') + userFloat(\'mvaIDMuon_wpTight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nStations = cms.PSet(
            doc = cms.string('number of matched stations with default arbitration (segment & track)'),
            expr = cms.string('numberOfMatchedStations'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nTrackerLayers = cms.PSet(
            doc = cms.string('number of layers in the tracker'),
            expr = cms.string('?track.isNonnull?innerTrack().hitPattern().trackerLayersWithMeasurement():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        pfIsoId = cms.PSet(
            doc = cms.string('PFIso ID from miniAOD selector (1=PFIsoVeryLoose, 2=PFIsoLoose, 3=PFIsoMedium, 4=PFIsoTight, 5=PFIsoVeryTight, 6=PFIsoVeryVeryTight)'),
            expr = cms.string("passed(\'PFIsoVeryLoose\')+passed(\'PFIsoLoose\')+passed(\'PFIsoMedium\')+passed(\'PFIsoTight\')+passed(\'PFIsoVeryTight\')+passed(\'PFIsoVeryVeryTight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        pfRelIso03_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, total (deltaBeta corrections)'),
            expr = cms.string('(pfIsolationR03().sumChargedHadronPt + max(pfIsolationR03().sumNeutralHadronEt + pfIsolationR03().sumPhotonEt - pfIsolationR03().sumPUPt/2,0.0))/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfRelIso03_chg = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, charged component'),
            expr = cms.string('pfIsolationR03().sumChargedHadronPt/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfRelIso04_all = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.4, total (deltaBeta corrections)'),
            expr = cms.string('(pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptErr = cms.PSet(
            doc = cms.string('ptError of the muon track'),
            expr = cms.string('bestTrack().ptError()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        puppiIsoId = cms.PSet(
            doc = cms.string('PuppiIsoId from miniAOD selector (1=Loose, 2=Medium, 3=Tight)'),
            expr = cms.string("passed(\'PuppiIsoLoose\')+passed(\'PuppiIsoMedium\')+passed(\'PuppiIsoTight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        segmentComp = cms.PSet(
            doc = cms.string('muon segment compatibility'),
            expr = cms.string('segmentCompatibility()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        sip3d = cms.PSet(
            doc = cms.string('3D impact parameter significance wrt first PV'),
            expr = cms.string("abs(dB(\'PV3D\')/edB(\'PV3D\'))"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        softId = cms.PSet(
            doc = cms.string('soft cut-based ID'),
            expr = cms.string("passed(\'SoftCutBasedId\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        softMva = cms.PSet(
            doc = cms.string('soft MVA ID score'),
            expr = cms.string('softMvaValue()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        softMvaId = cms.PSet(
            doc = cms.string('soft MVA ID'),
            expr = cms.string("passed(\'SoftMvaId\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        softMvaRun3 = cms.PSet(
            doc = cms.string('soft MVA Run3 ID score'),
            expr = cms.string('softMvaRun3Value()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        svIdx = cms.PSet(
            doc = cms.string('index of matching secondary vertex'),
            expr = cms.string("?hasUserCand(\'vertex\')?userCand(\'vertex\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        tightCharge = cms.PSet(
            doc = cms.string('Tight charge criterion using pterr/pt of muonBestTrack (0:fail, 2:pass)'),
            expr = cms.string('?(muonBestTrack().ptError()/muonBestTrack().pt() < 0.2)?2:0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        tightId = cms.PSet(
            doc = cms.string('cut-based ID, tight WP'),
            expr = cms.string("passed(\'CutBasedIdTight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        tkIsoId = cms.PSet(
            doc = cms.string('TkIso ID (1=TkIsoLoose, 2=TkIsoTight)'),
            expr = cms.string("?passed(\'TkIsoTight\')?2:passed(\'TkIsoLoose\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        tkRelIso = cms.PSet(
            doc = cms.string('Tracker-based relative isolation dR=0.3 for highPt, trkIso/pt'),
            expr = cms.string('isolationR03().sumPt/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        triggerIdLoose = cms.PSet(
            doc = cms.string('TriggerIdLoose ID'),
            expr = cms.string("passed(\'TriggerIdLoose\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        tuneP_charge = cms.PSet(
            doc = cms.string('tunePMuonBestTrack() charge'),
            expr = cms.string('? tunePMuonBestTrack().isNonnull() && tunePMuonBestTrack().isAvailable() ? tunePMuonBestTrack().charge(): -99'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        tuneP_pterr = cms.PSet(
            doc = cms.string('pTerr from tunePMuonBestTrack'),
            expr = cms.string('tunePMuonBestTrack().ptError()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        tunepRelPt = cms.PSet(
            doc = cms.string('TuneP relative pt, tunePpt/pt'),
            expr = cms.string('tunePMuonBestTrack().pt/pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        )
    )
)


process.muonTimeLifeInfoTable = cms.EDProducer("SimplePATMuon2TrackTimeLifeInfoFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('Additional time-life info for non-prompt muon'),
    extension = cms.bool(True),
    externalTypedVariables = cms.PSet(
        IPx = cms.PSet(
            doc = cms.string('x coordinate of impact parameter vector'),
            expr = cms.string('ipVector().x()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("muonTimeLifeInfos"),
            type = cms.string('float')
        ),
        IPy = cms.PSet(
            doc = cms.string('y coordinate of impact parameter vector'),
            expr = cms.string('ipVector().y()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("muonTimeLifeInfos"),
            type = cms.string('float')
        ),
        IPz = cms.PSet(
            doc = cms.string('z coordinate of impact parameter vector'),
            expr = cms.string('ipVector().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("muonTimeLifeInfos"),
            type = cms.string('float')
        ),
        ipLengthSig = cms.PSet(
            doc = cms.string('significance of impact parameter'),
            expr = cms.string('ipLength().significance()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("muonTimeLifeInfos"),
            type = cms.string('float')
        )
    ),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Muon'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","muons"),
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.muonTimeLifeInfos = cms.EDProducer("PATMuonTimeLifeInfoProducer",
    mightGet = cms.optional.untracked.vstring,
    pvChoice = cms.int32(0),
    pvSource = cms.InputTag("offlineSlimmedPrimaryVerticesWithBS"),
    selection = cms.string('pt > 15'),
    src = cms.InputTag("linkedObjects","muons")
)


process.muonsMCMatchForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticles"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(13),
    mcStatus = cms.vint32(1),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","muons")
)


process.nanoMetadata = cms.EDProducer("UniqueStringProducer",
    strings = cms.PSet(
        tag = cms.string('untagged')
    )
)


process.nb1AK8PuppiSoftDrop = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        'pt > 250'
    ),
    ecftype = cms.string('N'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    srcWeights = cms.InputTag("packedpuppi")
)


process.nb1AK8PuppiSoftDropSubjets = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(1),
    beta = cms.double(1),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('N'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    srcWeights = cms.InputTag("packedpuppi")
)


process.nb2AK8PuppiSoftDrop = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        'pt > 250'
    ),
    ecftype = cms.string('N'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    srcWeights = cms.InputTag("packedpuppi")
)


process.nb2AK8PuppiSoftDropSubjets = cms.EDProducer("ECFAdder",
    Njets = cms.vuint32(1, 2, 3),
    alpha = cms.double(2.0),
    beta = cms.double(2.0),
    cuts = cms.vstring(
        '',
        '',
        ''
    ),
    ecftype = cms.string('N'),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    srcWeights = cms.InputTag("packedpuppi")
)


process.packedPatJetsAK8 = cms.EDProducer("JetSubstructurePacker",
    algoLabels = cms.vstring('SoftDropPuppi'),
    algoTags = cms.VInputTag(cms.InputTag("slimmedJetsAK8PFPuppiSoftDropPacked")),
    distMax = cms.double(0.8),
    fixDaughters = cms.bool(False),
    jetSrc = cms.InputTag("selectedPatJetsAK8Puppi"),
    packedPFCandidates = cms.InputTag("packedPFCandidates")
)


process.packedpuppi = cms.EDProducer("PuppiProducer",
    DeltaZCut = cms.double(0.3),
    DeltaZCutForChargedFromPUVtxs = cms.double(0.2),
    EtaMaxCharged = cms.double(99999),
    EtaMaxPhotons = cms.double(2.5),
    EtaMinUseDeltaZ = cms.double(2.4),
    MinPuppiWeight = cms.double(0.01),
    NumOfPUVtxsForCharged = cms.uint32(2),
    PUProxyValue = cms.InputTag(""),
    PtMaxCharged = cms.double(20.0),
    PtMaxNeutrals = cms.double(200),
    PtMaxNeutralsStartSlope = cms.double(20.0),
    PtMaxPhotons = cms.double(20.0),
    PtMinForFromPV2Recovery = cms.double(4.0),
    UseDeltaZCut = cms.bool(True),
    UseDeltaZCutForPileup = cms.bool(False),
    UseFromPV2Recovery = cms.bool(True),
    UseFromPVLooseTight = cms.bool(False),
    algos = cms.VPSet(
        cms.PSet(
            EtaMaxExtrap = cms.double(2),
            MedEtaSF = cms.vdouble(1),
            MinNeutralPt = cms.vdouble(0.2),
            MinNeutralPtSlope = cms.vdouble(0.015),
            RMSEtaSF = cms.vdouble(1),
            etaMax = cms.vdouble(2.5),
            etaMin = cms.vdouble(0),
            ptMin = cms.vdouble(0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(True)
            ))
        ),
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(0.9, 0.75),
            MinNeutralPt = cms.vdouble(1.7, 2.0),
            MinNeutralPtSlope = cms.vdouble(0.08, 0.08),
            RMSEtaSF = cms.vdouble(1.2, 0.95),
            etaMax = cms.vdouble(3.0, 10.0),
            etaMin = cms.vdouble(2.5, 3.0),
            ptMin = cms.vdouble(0.0, 0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.5),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(False)
            ))
        ), 
        template = cms.PSetTemplate(
            EtaMaxExtrap = cms.double(2),
            MedEtaSF = cms.vdouble(1),
            MinNeutralPt = cms.vdouble(0.2),
            MinNeutralPtSlope = cms.vdouble(0.015),
            RMSEtaSF = cms.vdouble(1),
            etaMax = cms.vdouble(2.5),
            etaMin = cms.vdouble(0),
            ptMin = cms.vdouble(0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(False),
                combOpt = cms.int32(5),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1),
                useCharged = cms.bool(False)
            ), 
            template = cms.PSetTemplate(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(False),
                combOpt = cms.int32(5),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1),
                useCharged = cms.bool(False)
            ))
        )
    ),
    applyCHS = cms.bool(True),
    applyPhotonProtectionForExistingWeights = cms.bool(False),
    candName = cms.InputTag("packedPFCandidates"),
    clonePackedCands = cms.bool(False),
    invertPuppi = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    puppiDiagnostics = cms.bool(False),
    puppiNoLep = cms.bool(False),
    useExistingWeights = cms.bool(False),
    useExp = cms.bool(False),
    usePUProxyValue = cms.bool(False),
    useVertexAssociation = cms.bool(False),
    vertexAssociation = cms.InputTag(""),
    vertexAssociationQuality = cms.int32(0),
    vertexName = cms.InputTag("offlineSlimmedPrimaryVertices"),
    vtxNdofCut = cms.int32(4),
    vtxZCut = cms.double(24)
)


process.packedpuppiNoLep = cms.EDProducer("PuppiProducer",
    DeltaZCut = cms.double(0.3),
    DeltaZCutForChargedFromPUVtxs = cms.double(0.2),
    EtaMaxCharged = cms.double(99999),
    EtaMaxPhotons = cms.double(2.5),
    EtaMinUseDeltaZ = cms.double(2.4),
    MinPuppiWeight = cms.double(0.01),
    NumOfPUVtxsForCharged = cms.uint32(2),
    PUProxyValue = cms.InputTag(""),
    PtMaxCharged = cms.double(20.0),
    PtMaxNeutrals = cms.double(200),
    PtMaxNeutralsStartSlope = cms.double(20.0),
    PtMaxPhotons = cms.double(20.0),
    PtMinForFromPV2Recovery = cms.double(4.0),
    UseDeltaZCut = cms.bool(True),
    UseDeltaZCutForPileup = cms.bool(False),
    UseFromPV2Recovery = cms.bool(True),
    UseFromPVLooseTight = cms.bool(False),
    algos = cms.VPSet(
        cms.PSet(
            EtaMaxExtrap = cms.double(2),
            MedEtaSF = cms.vdouble(1),
            MinNeutralPt = cms.vdouble(0.2),
            MinNeutralPtSlope = cms.vdouble(0.015),
            RMSEtaSF = cms.vdouble(1),
            etaMax = cms.vdouble(2.5),
            etaMin = cms.vdouble(0),
            ptMin = cms.vdouble(0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(True)
            ))
        ),
        cms.PSet(
            EtaMaxExtrap = cms.double(2.0),
            MedEtaSF = cms.vdouble(0.9, 0.75),
            MinNeutralPt = cms.vdouble(1.7, 2.0),
            MinNeutralPtSlope = cms.vdouble(0.08, 0.08),
            RMSEtaSF = cms.vdouble(1.2, 0.95),
            etaMax = cms.vdouble(3.0, 10.0),
            etaMin = cms.vdouble(2.5, 3.0),
            ptMin = cms.vdouble(0.0, 0.0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(True),
                combOpt = cms.int32(0),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.5),
                rmsScaleFactor = cms.double(1.0),
                useCharged = cms.bool(False)
            ))
        ), 
        template = cms.PSetTemplate(
            EtaMaxExtrap = cms.double(2),
            MedEtaSF = cms.vdouble(1),
            MinNeutralPt = cms.vdouble(0.2),
            MinNeutralPtSlope = cms.vdouble(0.015),
            RMSEtaSF = cms.vdouble(1),
            etaMax = cms.vdouble(2.5),
            etaMin = cms.vdouble(0),
            ptMin = cms.vdouble(0),
            puppiAlgos = cms.VPSet(cms.PSet(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(False),
                combOpt = cms.int32(5),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1),
                useCharged = cms.bool(False)
            ), 
            template = cms.PSetTemplate(
                algoId = cms.int32(5),
                applyLowPUCorr = cms.bool(False),
                combOpt = cms.int32(5),
                cone = cms.double(0.4),
                rmsPtMin = cms.double(0.1),
                rmsScaleFactor = cms.double(1),
                useCharged = cms.bool(False)
            ))
        )
    ),
    applyCHS = cms.bool(True),
    applyPhotonProtectionForExistingWeights = cms.bool(False),
    candName = cms.InputTag("packedPFCandidates"),
    clonePackedCands = cms.bool(False),
    invertPuppi = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    puppiDiagnostics = cms.bool(False),
    puppiNoLep = cms.bool(True),
    useExistingWeights = cms.bool(False),
    useExp = cms.bool(False),
    usePUProxyValue = cms.bool(False),
    useVertexAssociation = cms.bool(False),
    vertexAssociation = cms.InputTag(""),
    vertexAssociationQuality = cms.int32(0),
    vertexName = cms.InputTag("offlineSlimmedPrimaryVertices"),
    vtxNdofCut = cms.int32(4),
    vtxZCut = cms.double(24)
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    avfParameters = cms.PSet(
        Tini = cms.double(256),
        ratio = cms.double(0.25),
        sigmacut = cms.double(6)
    ),
    debug = cms.untracked.bool(False),
    longSize = cms.double(5),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    mightGet = cms.optional.untracked.vstring,
    minAdaptWeight = cms.double(0.5),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(1.8),
    switchOff2TrackVertex = cms.untracked.bool(True),
    tecCut = cms.double(220),
    tobCut = cms.double(100),
    tracksSelectorParameters = cms.PSet(
        bSelectTracks = cms.bool(True),
        dxy_min = cms.double(0.2),
        nChi2_max = cms.double(5),
        nChi2_min = cms.double(0.5),
        nHits_min = cms.int32(6),
        nOuterHits_max = cms.int32(9),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    transvSize = cms.double(1),
    verbose = cms.untracked.bool(False),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    vertexIdentifierParameters = cms.PSet(
        angles = cms.vdouble(15, 15),
        bIdentifyVertices = cms.bool(True),
        logPrimSec_min = cms.double(0),
        looper_eta_max = cms.double(0.1),
        masses = cms.vdouble(
            0.05, 0.485, 0.515, 0.48, 0.52,
            1.107, 1.125, 0.2
        ),
        pt_kink_min = cms.double(3),
        pt_min = cms.double(0.5)
    )
)


process.particleFlowPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlow")
)


process.particleFlowPtrsPuppi = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlow")
)


process.particleLevel = cms.EDProducer("ParticleLevelProducer",
    doJetClustering = cms.bool(False),
    excludeNeutrinosFromJetClustering = cms.bool(True),
    excludePromptLeptonsFromJetClustering = cms.bool(False),
    fatJetConeSize = cms.double(0.8),
    fatJetMaxEta = cms.double(999.0),
    fatJetMinPt = cms.double(170.0),
    jetConeSize = cms.double(0.4),
    jetMaxEta = cms.double(999.0),
    jetMinPt = cms.double(10.0),
    lepConeSize = cms.double(0.1),
    lepMaxEta = cms.double(2.5),
    lepMinPt = cms.double(1.0),
    particleMaxEta = cms.double(5.0),
    particleMinPt = cms.double(0.0),
    phoIsoConeSize = cms.double(0.4),
    phoMaxEta = cms.double(2.5),
    phoMaxRelIso = cms.double(0.5),
    phoMinPt = cms.double(1.0),
    src = cms.InputTag("genParticles2HepMC","unsmeared"),
    usePromptFinalStates = cms.bool(True)
)


process.patCHSMet = cms.EDProducer("PATMETProducer",
    addEfficiencies = cms.bool(False),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    addResolutions = cms.bool(False),
    computeMETSignificance = cms.bool(False),
    computeMETSignificant = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genMETSource = cms.InputTag(""),
    metSource = cms.InputTag("pfMetCHS"),
    muonSource = cms.InputTag("muons"),
    parameters = cms.PSet(
        dRMatch = cms.double(0.4),
        jetThreshold = cms.double(15),
        jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
        jpar = cms.vdouble(1.39, 1.26, 1.21, 1.23, 1.28),
        pjpar = cms.vdouble(-0.2586, 0.6173)
    ),
    resolutions = cms.PSet(

    ),
    srcJetResPhi = cms.string('AK4PFchs_phi'),
    srcJetResPt = cms.string('AK4PFchs_pt'),
    srcJetSF = cms.string('AK4PFchs'),
    srcJets = cms.InputTag("cleanedPatJets"),
    srcLeptons = cms.VInputTag("selectedPatElectrons", "selectedPatMuons", "selectedPatPhotons"),
    srcPFCands = cms.InputTag("particleFlow"),
    srcRho = cms.InputTag("fixedGridRhoAll"),
    srcWeights = cms.InputTag(""),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patCaloMet = cms.EDProducer("PATMETProducer",
    addEfficiencies = cms.bool(False),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    addResolutions = cms.bool(False),
    computeMETSignificance = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genMETSource = cms.InputTag(""),
    metSource = cms.InputTag("metrawCaloPuppi"),
    muonSource = cms.InputTag("muons"),
    parameters = cms.PSet(
        dRMatch = cms.double(0.4),
        jetThreshold = cms.double(15),
        jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
        jpar = cms.vdouble(1.39, 1.26, 1.21, 1.23, 1.28),
        pjpar = cms.vdouble(-0.2586, 0.6173)
    ),
    resolutions = cms.PSet(

    ),
    srcJetResPhi = cms.string('AK4PFchs_phi'),
    srcJetResPt = cms.string('AK4PFchs_pt'),
    srcJetSF = cms.string('AK4PFchs'),
    srcJets = cms.InputTag("cleanedPatJets"),
    srcLeptons = cms.VInputTag("selectedPatElectrons", "selectedPatMuons", "selectedPatPhotons"),
    srcPFCands = cms.InputTag("particleFlow"),
    srcRho = cms.InputTag("fixedGridRhoAll"),
    srcWeights = cms.InputTag(""),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patJetCorrFactors = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L1FastJet',
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFchs'),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("ak4PFJetsCHS"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsAK8PFPuppiSoftDrop = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK8PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsAK8PFPuppiSoftDropSubjets = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFchs'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedJetsAK8PFPuppiSoftDropSubjetsNoDeepTags"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsAK8Puppi = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK8PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("ak8PFJetsPuppi"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsPuppi = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("ak4PFJetsPuppi"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsSlimmedAK8DeepTags = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFchs'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedJetsAK8NoDeepTags"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsSlimmedDeepFlavour = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFchs'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("slimmedJetsPuppiNoDeepTags"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsTransientCorrectedAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsTransientCorrectedSlimmedAK8DeepTags = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK8PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("updatedPatJetsSlimmedAK8DeepTags"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetCorrFactorsTransientCorrectedSlimmedDeepFlavour = cms.EDProducer("JetCorrFactorsProducer",
    emf = cms.bool(False),
    extraJPTOffset = cms.string('L1FastJet'),
    flavorType = cms.string('J'),
    levels = cms.vstring(
        'L2Relative',
        'L3Absolute',
        'L2L3Residual'
    ),
    mightGet = cms.optional.untracked.vstring,
    payload = cms.string('AK4PFPuppi'),
    primaryVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    src = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    useNPV = cms.bool(True),
    useRho = cms.bool(True)
)


process.patJetFlavourAssociationAK8PFPuppiSoftDropSubjets = cms.EDProducer("JetFlavourClustering",
    bHadrons = cms.InputTag("patJetPartons","bHadrons"),
    cHadrons = cms.InputTag("patJetPartons","cHadrons"),
    ghostRescaling = cms.double(1e-18),
    groomedJets = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    hadronFlavourHasPriority = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    jets = cms.InputTag("ak8PFJetsPuppi"),
    leptons = cms.InputTag("patJetPartons","leptons"),
    partons = cms.InputTag("patJetPartons","physicsPartons"),
    rParam = cms.double(0.8),
    subjets = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    weights = cms.InputTag("packedpuppi")
)


process.patJetFlavourAssociationLegacyAK8PFPuppiSoftDropSubjets = cms.EDProducer("JetFlavourIdentifier",
    physicsDefinition = cms.bool(False),
    srcByReference = cms.InputTag("patJetPartonAssociationLegacyAK8PFPuppiSoftDropSubjets")
)


process.patJetGenJetMatchAK8PFPuppiSoftDrop = cms.EDProducer("GenJetMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("slimmedGenJetsAK8"),
    maxDeltaR = cms.double(0.4),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop")
)


process.patJetGenJetMatchAK8PFPuppiSoftDropSubjets = cms.EDProducer("GenJetMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("slimmedGenJetsAK8SoftDropSubJets"),
    maxDeltaR = cms.double(0.8),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets")
)


process.patJetGenJetMatchAK8Puppi = cms.EDProducer("GenJetMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("slimmedGenJetsAK8"),
    maxDeltaR = cms.double(0.8),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak8PFJetsPuppi")
)


process.patJetGenJetMatchPuppi = cms.EDProducer("GenJetMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("slimmedGenJets"),
    maxDeltaR = cms.double(0.4),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak4PFJetsPuppi")
)


process.patJetPartonAssociationLegacyAK8PFPuppiSoftDropSubjets = cms.EDProducer("JetPartonMatcher",
    coneSizeToAssociate = cms.double(0.3),
    jets = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    partons = cms.InputTag("patJetPartonsLegacy")
)


process.patJetPartonMatchAK8PFPuppiSoftDrop = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("prunedGenParticles"),
    maxDPtRel = cms.double(3.0),
    maxDeltaR = cms.double(0.4),
    mcPdgId = cms.vint32(
        1, 2, 3, 4, 5,
        21
    ),
    mcStatus = cms.vint32(3, 23),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop")
)


process.patJetPartonMatchAK8PFPuppiSoftDropSubjets = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("prunedGenParticles"),
    maxDPtRel = cms.double(3.0),
    maxDeltaR = cms.double(0.4),
    mcPdgId = cms.vint32(
        1, 2, 3, 4, 5,
        21
    ),
    mcStatus = cms.vint32(3, 23),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets")
)


process.patJetPartonMatchAK8Puppi = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("prunedGenParticles"),
    maxDPtRel = cms.double(3.0),
    maxDeltaR = cms.double(0.4),
    mcPdgId = cms.vint32(
        1, 2, 3, 4, 5,
        21
    ),
    mcStatus = cms.vint32(3, 23),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak8PFJetsPuppi")
)


process.patJetPartonMatchPuppi = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("prunedGenParticles"),
    maxDPtRel = cms.double(3.0),
    maxDeltaR = cms.double(0.4),
    mcPdgId = cms.vint32(
        1, 2, 3, 4, 5,
        21
    ),
    mcStatus = cms.vint32(3, 23),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(False),
    src = cms.InputTag("ak4PFJetsPuppi")
)


process.patJetPartons = cms.EDProducer("HadronAndPartonSelector",
    fullChainPhysPartons = cms.bool(True),
    particles = cms.InputTag("prunedGenParticles"),
    partonMode = cms.string('Auto'),
    src = cms.InputTag("generator")
)


process.patJetPartonsLegacy = cms.EDProducer("PartonSelector",
    src = cms.InputTag("prunedGenParticles"),
    withLeptons = cms.bool(False)
)


process.patJetPartonsNano = cms.EDProducer("HadronAndPartonSelector",
    fullChainPhysPartons = cms.bool(True),
    particles = cms.InputTag("prunedGenParticles"),
    partonMode = cms.string('Auto'),
    src = cms.InputTag("generator")
)


process.patJetPuppiCharge = cms.EDProducer("JetChargeProducer",
    exp = cms.double(1.0),
    src = cms.InputTag("ak4PFJetsPuppiTracksAssociatorAtVertex"),
    var = cms.string('Pt')
)


process.patJetsAK8PFPuppiSoftDrop = cms.EDProducer("PATJetProducer",
    JetFlavourInfoSource = cms.InputTag(""),
    JetPartonMapSource = cms.InputTag(""),
    addAssociatedTracks = cms.bool(False),
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addEfficiencies = cms.bool(False),
    addGenJetMatch = cms.bool(False),
    addGenPartonMatch = cms.bool(False),
    addJetCharge = cms.bool(False),
    addJetCorrFactors = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addJetID = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(
        "pfJetBProbabilityBJetTags", "pfJetProbabilityBJetTags", "pfTrackCountingHighEffBJetTags", "pfDeepCSVJetTags:probb", "pfDeepCSVJetTags:probc",
        "pfDeepCSVJetTags:probudsg", "pfDeepCSVJetTags:probbb"
    ),
    efficiencies = cms.PSet(

    ),
    embedCaloTowers = cms.bool(False),
    embedGenJetMatch = cms.bool(True),
    embedGenPartonMatch = cms.bool(False),
    embedPFCandidates = cms.bool(False),
    genJetMatch = cms.InputTag(""),
    genPartonMatch = cms.InputTag(""),
    getJetMCFlavour = cms.bool(False),
    jetChargeSource = cms.InputTag(""),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsAK8PFPuppiSoftDrop")),
    jetIDMap = cms.InputTag("ak4JetID"),
    jetSource = cms.InputTag("ak8PFJetsPuppiSoftDrop"),
    mightGet = cms.optional.untracked.vstring,
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    resolutions = cms.PSet(

    ),
    tagInfoSources = cms.VInputTag(),
    trackAssociationSource = cms.InputTag(""),
    useLegacyJetMCFlavour = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("", "nb1AK8PuppiSoftDrop:ecfN2", "nb1AK8PuppiSoftDrop:ecfN3", "nb2AK8PuppiSoftDrop:ecfN2", "nb2AK8PuppiSoftDrop:ecfN3")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patJetsAK8PFPuppiSoftDropSubjets = cms.EDProducer("PATJetProducer",
    JetFlavourInfoSource = cms.InputTag(""),
    JetPartonMapSource = cms.InputTag(""),
    addAssociatedTracks = cms.bool(False),
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addEfficiencies = cms.bool(False),
    addGenJetMatch = cms.bool(False),
    addGenPartonMatch = cms.bool(False),
    addJetCharge = cms.bool(False),
    addJetCorrFactors = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addJetID = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(
        "pfJetBProbabilityBJetTags", "pfJetProbabilityBJetTags", "pfTrackCountingHighEffBJetTags", "pfDeepCSVJetTags:probb", "pfDeepCSVJetTags:probc",
        "pfDeepCSVJetTags:probudsg", "pfDeepCSVJetTags:probbb"
    ),
    efficiencies = cms.PSet(

    ),
    embedCaloTowers = cms.bool(False),
    embedGenJetMatch = cms.bool(True),
    embedGenPartonMatch = cms.bool(False),
    embedPFCandidates = cms.bool(False),
    genJetMatch = cms.InputTag(""),
    genPartonMatch = cms.InputTag(""),
    getJetMCFlavour = cms.bool(False),
    jetChargeSource = cms.InputTag(""),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsAK8PFPuppiSoftDropSubjets")),
    jetIDMap = cms.InputTag("ak4JetID"),
    jetSource = cms.InputTag("ak8PFJetsPuppiSoftDrop","SubJets"),
    mightGet = cms.optional.untracked.vstring,
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    resolutions = cms.PSet(

    ),
    tagInfoSources = cms.VInputTag(),
    trackAssociationSource = cms.InputTag(""),
    useLegacyJetMCFlavour = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag(
                "", "nb1AK8PuppiSoftDropSubjets:ecfN2", "nb1AK8PuppiSoftDropSubjets:ecfN3", "nb2AK8PuppiSoftDropSubjets:ecfN2", "nb2AK8PuppiSoftDropSubjets:ecfN3",
                "NjettinessAK8Subjets:tau1", "NjettinessAK8Subjets:tau2", "NjettinessAK8Subjets:tau3", "NjettinessAK8Subjets:tau4"
            )
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patJetsAK8Puppi = cms.EDProducer("PATJetProducer",
    JetFlavourInfoSource = cms.InputTag(""),
    JetPartonMapSource = cms.InputTag(""),
    addAssociatedTracks = cms.bool(False),
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addEfficiencies = cms.bool(False),
    addGenJetMatch = cms.bool(False),
    addGenPartonMatch = cms.bool(False),
    addJetCharge = cms.bool(False),
    addJetCorrFactors = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addJetID = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(
        "pfJetBProbabilityBJetTags", "pfJetProbabilityBJetTags", "pfTrackCountingHighEffBJetTags", "pfDeepCSVJetTags:probb", "pfDeepCSVJetTags:probc",
        "pfDeepCSVJetTags:probudsg", "pfDeepCSVJetTags:probbb"
    ),
    efficiencies = cms.PSet(

    ),
    embedCaloTowers = cms.bool(False),
    embedGenJetMatch = cms.bool(True),
    embedGenPartonMatch = cms.bool(False),
    embedPFCandidates = cms.bool(False),
    genJetMatch = cms.InputTag(""),
    genPartonMatch = cms.InputTag(""),
    getJetMCFlavour = cms.bool(False),
    jetChargeSource = cms.InputTag(""),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsAK8Puppi")),
    jetIDMap = cms.InputTag("ak4JetID"),
    jetSource = cms.InputTag("ak8PFJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    resolutions = cms.PSet(

    ),
    tagInfoSources = cms.VInputTag(),
    trackAssociationSource = cms.InputTag(""),
    useLegacyJetMCFlavour = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("ak8PFJetsPuppiSoftDropMass", "NjettinessAK8Puppi:tau1", "NjettinessAK8Puppi:tau2", "NjettinessAK8Puppi:tau3", "NjettinessAK8Puppi:tau4")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patJetsPuppi = cms.EDProducer("PATJetProducer",
    JetFlavourInfoSource = cms.InputTag(""),
    JetPartonMapSource = cms.InputTag(""),
    addAssociatedTracks = cms.bool(False),
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addEfficiencies = cms.bool(False),
    addGenJetMatch = cms.bool(False),
    addGenPartonMatch = cms.bool(False),
    addJetCharge = cms.bool(False),
    addJetCorrFactors = cms.bool(True),
    addJetFlavourInfo = cms.bool(False),
    addJetID = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(
        "pfJetBProbabilityBJetTags", "pfJetProbabilityBJetTags", "pfTrackCountingHighEffBJetTags", "pfDeepCSVJetTags:probb", "pfDeepCSVJetTags:probc",
        "pfDeepCSVJetTags:probudsg", "pfDeepCSVJetTags:probbb"
    ),
    efficiencies = cms.PSet(

    ),
    embedCaloTowers = cms.bool(False),
    embedGenJetMatch = cms.bool(True),
    embedGenPartonMatch = cms.bool(False),
    embedPFCandidates = cms.bool(False),
    genJetMatch = cms.InputTag(""),
    genPartonMatch = cms.InputTag(""),
    getJetMCFlavour = cms.bool(False),
    jetChargeSource = cms.InputTag("patJetPuppiCharge"),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsPuppi")),
    jetIDMap = cms.InputTag("ak4JetID"),
    jetSource = cms.InputTag("ak4PFJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    resolutions = cms.PSet(

    ),
    tagInfoSources = cms.VInputTag(),
    trackAssociationSource = cms.InputTag(""),
    useLegacyJetMCFlavour = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("", cms.InputTag("pileupJetIdPuppi","fullDiscriminant"))
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("", cms.InputTag("pileupJetIdPuppi","fullId"))
        )
    )
)


process.patMETs = cms.EDProducer("PATMETProducer",
    addEfficiencies = cms.bool(False),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    addResolutions = cms.bool(False),
    computeMETSignificance = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genMETSource = cms.InputTag(""),
    metSource = cms.InputTag("pfMetT1"),
    muonSource = cms.InputTag("muons"),
    parameters = cms.PSet(
        dRMatch = cms.double(0.4),
        jetThreshold = cms.double(15),
        jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
        jpar = cms.vdouble(1.39, 1.26, 1.21, 1.23, 1.28),
        pjpar = cms.vdouble(-0.2586, 0.6173)
    ),
    resolutions = cms.PSet(

    ),
    srcJetResPhi = cms.string('AK4PFchs_phi'),
    srcJetResPt = cms.string('AK4PFchs_pt'),
    srcJetSF = cms.string('AK4PFchs'),
    srcJets = cms.InputTag("cleanedPatJets"),
    srcLeptons = cms.VInputTag("selectedPatElectrons", "selectedPatMuons", "selectedPatPhotons"),
    srcPFCands = cms.InputTag("particleFlow"),
    srcRho = cms.InputTag("fixedGridRhoAll"),
    srcWeights = cms.InputTag(""),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patPFMet = cms.EDProducer("PATMETProducer",
    addEfficiencies = cms.bool(False),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    addResolutions = cms.bool(False),
    computeMETSignificance = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genMETSource = cms.InputTag(""),
    metSource = cms.InputTag("pfMet"),
    muonSource = cms.InputTag("muons"),
    parameters = cms.PSet(
        dRMatch = cms.double(0.4),
        jetThreshold = cms.double(15),
        jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
        jpar = cms.vdouble(1.39, 1.26, 1.21, 1.23, 1.28),
        pjpar = cms.vdouble(-0.2586, 0.6173)
    ),
    resolutions = cms.PSet(

    ),
    srcJetResPhi = cms.string('AK4PFchs_phi'),
    srcJetResPt = cms.string('AK4PFchs_pt'),
    srcJetSF = cms.string('AK4PFchs'),
    srcJets = cms.InputTag("cleanedPatJets"),
    srcLeptons = cms.VInputTag("selectedPatElectrons", "selectedPatMuons", "selectedPatPhotons"),
    srcPFCands = cms.InputTag("particleFlow"),
    srcRho = cms.InputTag("fixedGridRhoAll"),
    srcWeights = cms.InputTag(""),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patPFMetPuppi = cms.EDProducer("PATMETProducer",
    addEfficiencies = cms.bool(False),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    addResolutions = cms.bool(False),
    computeMETSignificance = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genMETSource = cms.InputTag(""),
    metSource = cms.InputTag("pfMetPuppi"),
    muonSource = cms.InputTag("muons"),
    parameters = cms.PSet(
        dRMatch = cms.double(0.4),
        jetThreshold = cms.double(15),
        jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
        jpar = cms.vdouble(1.38, 1.28, 1.22, 1.16, 1.1),
        pjpar = cms.vdouble(0.0033, 0.5802)
    ),
    resolutions = cms.PSet(

    ),
    srcJetResPhi = cms.string('AK4PFPuppi_phi'),
    srcJetResPt = cms.string('AK4PFPuppi_pt'),
    srcJetSF = cms.string('AK4PFPuppi'),
    srcJets = cms.InputTag("cleanedPatJetsPuppi"),
    srcLeptons = cms.VInputTag(cms.InputTag("slimmedElectrons"), cms.InputTag("slimmedMuons"), cms.InputTag("slimmedPhotons")),
    srcPFCands = cms.InputTag("packedPFCandidates"),
    srcRho = cms.InputTag("fixedGridRhoAll"),
    srcWeights = cms.InputTag("packedpuppiNoLep"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.patPFMetT0Corr = cms.EDProducer("Type0PFMETcorrInputProducer",
    correction = cms.PSet(
        formula = cms.string('(x<35)?(-( [0]+x*[1]+pow(x, 2)*[2]+pow(x, 3)*[3] )):(-( [0]+35*[1]+pow(35, 2)*[2]+pow(35, 3)*[3] ))'),
        par0 = cms.double(-0.181414),
        par1 = cms.double(-0.476934),
        par2 = cms.double(0.00863564),
        par3 = cms.double(-4.94181e-05)
    ),
    minDz = cms.double(0.2),
    srcHardScatterVertex = cms.InputTag("selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0"),
    srcPFCandidateToVertexAssociations = cms.InputTag("pfCandidateToVertexAssociation")
)


process.patPFMetT0CorrPuppi = cms.EDProducer("Type0PFMETcorrInputProducer",
    correction = cms.PSet(
        formula = cms.string('(x<35)?(-( [0]+x*[1]+pow(x, 2)*[2]+pow(x, 3)*[3] )):(-( [0]+35*[1]+pow(35, 2)*[2]+pow(35, 3)*[3] ))'),
        par0 = cms.double(-0.181414),
        par1 = cms.double(-0.476934),
        par2 = cms.double(0.00863564),
        par3 = cms.double(-4.94181e-05)
    ),
    minDz = cms.double(0.2),
    srcHardScatterVertex = cms.InputTag("selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0Puppi"),
    srcPFCandidateToVertexAssociations = cms.InputTag("pfCandidateToVertexAssociation")
)


process.patPFMetT0pcT1 = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetT0Corr"))
)


process.patPFMetT0pcT1Puppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"), cms.InputTag("patPFMetT0CorrPuppi"))
)


process.patPFMetT0pcT1Smear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetT0Corr"))
)


process.patPFMetT0pcT1T2 = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetT2Corr","type2"), cms.InputTag("patPFMetT0Corr"))
)


process.patPFMetT0pcT1T2Puppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"), cms.InputTag("patPFMetT2CorrPuppi","type2"), cms.InputTag("patPFMetT0CorrPuppi"))
)


process.patPFMetT0pcT1T2Smear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetT2SmearCorr","type2"), cms.InputTag("patPFMetT0Corr"))
)


process.patPFMetT0pcT1T2Txy = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetT2Corr","type2"), cms.InputTag("patPFMetT0Corr"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT0pcT1T2TxySmear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetT2SmearCorr","type2"), cms.InputTag("patPFMetT0Corr"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT0pcT1Txy = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetT0Corr"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT0pcT1TxySmear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetT0Corr"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT1 = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"))
)


process.patPFMetT1ElectronEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrElectronEnDownPuppi"))
)


process.patPFMetT1ElectronEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrElectronEnUpPuppi"))
)


process.patPFMetT1JetEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrJetEnDownPuppi"))
)


process.patPFMetT1JetEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrJetEnUpPuppi"))
)


process.patPFMetT1JetResDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"))
)


process.patPFMetT1JetResUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"))
)


process.patPFMetT1MuonEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrMuonEnDownPuppi"))
)


process.patPFMetT1MuonEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrMuonEnUpPuppi"))
)


process.patPFMetT1PhotonEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrPhotonEnDownPuppi"))
)


process.patPFMetT1PhotonEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrPhotonEnUpPuppi"))
)


process.patPFMetT1Puppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"))
)


process.patPFMetT1Smear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1")
)


process.patPFMetT1SmearElectronEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrElectronEnDownPuppi"))
)


process.patPFMetT1SmearElectronEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrElectronEnUpPuppi"))
)


process.patPFMetT1SmearJetEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrJetEnDownPuppi"))
)


process.patPFMetT1SmearJetEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrJetEnUpPuppi"))
)


process.patPFMetT1SmearJetResDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2SmearCorrPuppi","type1"))
)


process.patPFMetT1SmearJetResUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2SmearCorrPuppi","type1"))
)


process.patPFMetT1SmearMuonEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrMuonEnDownPuppi"))
)


process.patPFMetT1SmearMuonEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrMuonEnUpPuppi"))
)


process.patPFMetT1SmearPhotonEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrPhotonEnDownPuppi"))
)


process.patPFMetT1SmearPhotonEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrPhotonEnUpPuppi"))
)


process.patPFMetT1SmearPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2SmearCorrPuppi","type1"))
)


process.patPFMetT1SmearTauEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrTauEnDownPuppi"))
)


process.patPFMetT1SmearTauEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrTauEnUpPuppi"))
)


process.patPFMetT1SmearUnclusteredEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrUnclusteredEnDownPuppi"))
)


process.patPFMetT1SmearUnclusteredEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1SmearPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrUnclusteredEnUpPuppi"))
)


process.patPFMetT1T2 = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetT2Corr","type2"))
)


process.patPFMetT1T2Corr = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("selectedPatJetsForMetT1T2Corr"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT1T2CorrPuppi = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag(""),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("cleanedPatJetsPuppi"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT1T2Puppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"), cms.InputTag("patPFMetT2CorrPuppi","type2"))
)


process.patPFMetT1T2Smear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetT2SmearCorr","type2"))
)


process.patPFMetT1T2SmearCorr = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("selectedPatJetsForMetT1T2SmearCorr"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT1T2SmearCorrPuppi = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag(""),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("selectedPatJetsForMetT1T2SmearCorrPuppi"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT1T2Txy = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetT2Corr","type2"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT1T2TxySmear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetT2SmearCorr","type2"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT1TauEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrTauEnDownPuppi"))
)


process.patPFMetT1TauEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrTauEnUpPuppi"))
)


process.patPFMetT1Txy = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2Corr","type1"), cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT1TxyPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetT1T2CorrPuppi","type1"), cms.InputTag("patPFMetTxyCorrPuppi"))
)


process.patPFMetT1TxySmear = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    srcCorrections = cms.VInputTag("patPFMetT1T2SmearCorr:type1", cms.InputTag("patPFMetTxyCorr"))
)


process.patPFMetT1UnclusteredEnDownPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrUnclusteredEnDownPuppi"))
)


process.patPFMetT1UnclusteredEnUpPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetT1Puppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("shiftedPatMETCorrUnclusteredEnUpPuppi"))
)


process.patPFMetT2Corr = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("selectedPatJetsForMetT2Corr"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT2CorrPuppi = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag(""),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("cleanedPatJetsPuppi"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT2SmearCorr = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("selectedPatJetsForMetT2SmearCorr"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetT2SmearCorrPuppi = cms.EDProducer("PATPFJetMETcorrInputProducer",
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.InputTag("L3Absolute"),
    jetCorrLabelRes = cms.InputTag("L2L3Residual"),
    mightGet = cms.optional.untracked.vstring,
    offsetCorrLabel = cms.InputTag("L1FastJet"),
    skipEM = cms.bool(True),
    skipEMfractionThreshold = cms.double(0.9),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    skipMuons = cms.bool(True),
    src = cms.InputTag("selectedPatJetsForMetT2SmearCorrPuppi"),
    type1JetPtThreshold = cms.double(15)
)


process.patPFMetTxyCorr = cms.EDProducer("MultShiftMETcorrInputProducer",
    parameters = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(0),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hEtaPlus'),
            px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
            py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
            type = cms.int32(1),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(0),
            etaMin = cms.double(-2.7),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hEtaMinus'),
            px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
            py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
            type = cms.int32(1),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('h0Barrel'),
            px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
            py = cms.vdouble(0.00798098092474, -0.000103998219585),
            type = cms.int32(5),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(3),
            etaMin = cms.double(1.392),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('h0EndcapPlus'),
            px = cms.vdouble(-0.00305719113962, -0.00032676418359),
            py = cms.vdouble(-0.00345131507897, 0.000164816815994),
            type = cms.int32(5),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('h0EndcapMinus'),
            px = cms.vdouble(-0.000159031461755, 0.00012231873804),
            py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
            type = cms.int32(5),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('gammaBarrel'),
            px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
            py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
            type = cms.int32(4),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(3.0),
            etaMin = cms.double(1.479),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('gammaEndcapPlus'),
            px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
            py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
            type = cms.int32(4),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('gammaEndcapMinus'),
            px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
            py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
            type = cms.int32(4),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(5.2),
            etaMin = cms.double(2.901376),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hHFPlus'),
            px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
            py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
            type = cms.int32(6),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hHFMinus'),
            px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
            py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
            type = cms.int32(6),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(5.2),
            etaMin = cms.double(2.901376),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('egammaHFPlus'),
            px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
            py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
            type = cms.int32(7),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('egammaHFMinus'),
            px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
            py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
            type = cms.int32(7),
            varType = cms.int32(0)
        )
    ),
    srcPFlow = cms.InputTag("particleFlow"),
    srcWeights = cms.InputTag(""),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.patPFMetTxyCorrPuppi = cms.EDProducer("MultShiftMETcorrInputProducer",
    parameters = cms.VPSet(
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(0),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hEtaPlus'),
            px = cms.vdouble(-0.00229295500096, 3.15487850373e-07),
            py = cms.vdouble(0.000114282381437, -1.58467325852e-08),
            type = cms.int32(1),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(0),
            etaMin = cms.double(-2.7),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hEtaMinus'),
            px = cms.vdouble(-0.000198571488347, -1.94054852726e-07),
            py = cms.vdouble(-0.00137832489313, -2.02238617742e-06),
            type = cms.int32(1),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('h0Barrel'),
            px = cms.vdouble(-0.0153652906396, -3.80210366974e-05),
            py = cms.vdouble(0.00798098092474, -0.000103998219585),
            type = cms.int32(5),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(3),
            etaMin = cms.double(1.392),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('h0EndcapPlus'),
            px = cms.vdouble(-0.00305719113962, -0.00032676418359),
            py = cms.vdouble(-0.00345131507897, 0.000164816815994),
            type = cms.int32(5),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('h0EndcapMinus'),
            px = cms.vdouble(-0.000159031461755, 0.00012231873804),
            py = cms.vdouble(0.0260436390996, -8.17994745657e-05),
            type = cms.int32(5),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('gammaBarrel'),
            px = cms.vdouble(-0.00163144589987, 3.17557692226e-06),
            py = cms.vdouble(-0.000710945802217, 6.45810884842e-06),
            type = cms.int32(4),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(3.0),
            etaMin = cms.double(1.479),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('gammaEndcapPlus'),
            px = cms.vdouble(-0.00108893779312, -2.53584544941e-05),
            py = cms.vdouble(0.00188026342884, 8.15028097381e-05),
            type = cms.int32(4),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('gammaEndcapMinus'),
            px = cms.vdouble(-0.00130486432072, 1.72313009972e-05),
            py = cms.vdouble(-0.00367119684052, -1.63143116342e-05),
            type = cms.int32(4),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(5.2),
            etaMin = cms.double(2.901376),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hHFPlus'),
            px = cms.vdouble(-0.000218928792083, -1.0492437382e-06),
            py = cms.vdouble(2.7982430778e-05, -6.87804028426e-08),
            type = cms.int32(6),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('hHFMinus'),
            px = cms.vdouble(-0.000851170798547, 3.18768998961e-07),
            py = cms.vdouble(6.10447368609e-05, -5.92655106387e-07),
            type = cms.int32(6),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(5.2),
            etaMin = cms.double(2.901376),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('egammaHFPlus'),
            px = cms.vdouble(0.00138084425101, -6.39459000901e-06),
            py = cms.vdouble(-0.000532336534523, 2.21305870813e-06),
            type = cms.int32(7),
            varType = cms.int32(0)
        ),
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            fx = cms.string('(x*[0])+(sq(x)*[1])'),
            fy = cms.string('(x*[0])+(sq(x)*[1])'),
            name = cms.string('egammaHFMinus'),
            px = cms.vdouble(0.00102598393499, -3.37284909389e-06),
            py = cms.vdouble(0.000439449053802, -2.3750891943e-06),
            type = cms.int32(7),
            varType = cms.int32(0)
        )
    ),
    srcPFlow = cms.InputTag("packedPFCandidates"),
    srcWeights = cms.InputTag("packedpuppiNoLep"),
    vertexCollection = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.patPFMetTxyPuppi = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPuppi"),
    srcCorrections = cms.VInputTag(cms.InputTag("patPFMetTxyCorrPuppi"))
)


process.patSmearedJets = cms.EDProducer("SmearedPATJetProducer",
    algo = cms.string('AK4PFchs'),
    algopt = cms.string('AK4PFchs_pt'),
    dPtMaxFactor = cms.double(3),
    dRMax = cms.double(0.2),
    debug = cms.untracked.bool(False),
    enabled = cms.bool(True),
    genJets = cms.InputTag("ak4GenJetsNoNu"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    seed = cms.uint32(37428479),
    skipGenMatching = cms.bool(False),
    src = cms.InputTag("patJets"),
    useDeterministicSeed = cms.bool(True),
    variation = cms.int32(0)
)


process.patSmearedJetsPuppi = cms.EDProducer("SmearedPATJetProducer",
    algo = cms.string('AK4PFPuppi'),
    algopt = cms.string('AK4PFPuppi_pt'),
    dPtMaxFactor = cms.double(3),
    dRMax = cms.double(0.2),
    debug = cms.untracked.bool(False),
    enabled = cms.bool(True),
    genJets = cms.InputTag("slimmedGenJets"),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    seed = cms.uint32(37428479),
    skipGenMatching = cms.bool(False),
    src = cms.InputTag("cleanedPatJetsPuppi"),
    useDeterministicSeed = cms.bool(True),
    variation = cms.int32(0)
)


process.patTauSignalCandidatesProducer = cms.EDProducer("PATTauSignalCandidatesProducer",
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("slimmedTaus"),
    storeLostTracks = cms.bool(True)
)


process.patTrkMet = cms.EDProducer("PATMETProducer",
    addEfficiencies = cms.bool(False),
    addGenMET = cms.bool(False),
    addMuonCorrections = cms.bool(False),
    addResolutions = cms.bool(False),
    computeMETSignificance = cms.bool(False),
    computeMETSignificant = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genMETSource = cms.InputTag(""),
    metSource = cms.InputTag("pfMetTrk"),
    muonSource = cms.InputTag("muons"),
    parameters = cms.PSet(
        dRMatch = cms.double(0.4),
        jetThreshold = cms.double(15),
        jeta = cms.vdouble(0.8, 1.3, 1.9, 2.5),
        jpar = cms.vdouble(1.39, 1.26, 1.21, 1.23, 1.28),
        pjpar = cms.vdouble(-0.2586, 0.6173)
    ),
    resolutions = cms.PSet(

    ),
    srcJetResPhi = cms.string('AK4PFchs_phi'),
    srcJetResPt = cms.string('AK4PFchs_pt'),
    srcJetSF = cms.string('AK4PFchs'),
    srcJets = cms.InputTag("cleanedPatJets"),
    srcLeptons = cms.VInputTag("selectedPatElectrons", "selectedPatMuons", "selectedPatPhotons"),
    srcPFCands = cms.InputTag("particleFlow"),
    srcRho = cms.InputTag("fixedGridRhoAll"),
    srcWeights = cms.InputTag(""),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.pfCandMETcorr = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("pfCandsNotInJetsForMetCorr"),
    srcWeights = cms.InputTag("")
)


process.pfCandMETcorrPuppi = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("pfCandsNotInJetsForMetCorrPuppi"),
    srcWeights = cms.InputTag("")
)


process.pfCandidateToVertexAssociation = cms.EDProducer("PFCand_AssoMap",
    AssociationType = cms.InputTag("Both"),
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ConversionsCollection = cms.InputTag("allConversions"),
    FinalAssociation = cms.untracked.int32(1),
    GetCleanedCollections = cms.bool(False),
    MaxNumberOfAssociations = cms.int32(1),
    NIVertexCollection = cms.InputTag("particleFlowDisplacedVertex"),
    PFCandidateCollection = cms.InputTag("particleFlow"),
    UseBeamSpotCompatibility = cms.untracked.bool(True),
    V0KshortCollection = cms.InputTag("generalV0Candidates","Kshort"),
    V0LambdaCollection = cms.InputTag("generalV0Candidates","Lambda"),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    doReassociation = cms.bool(True),
    ignoreMissingCollection = cms.bool(True),
    nTrackWeight = cms.double(0.001)
)


process.pfCandidatesTable = cms.EDProducer("SimplePATCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('PF candidate constituents of AK8 puppi jets (FatJet) with |eta| <= 2.5'),
    extension = cms.bool(False),
    name = cms.string('PFCand'),
    singleton = cms.bool(False),
    src = cms.InputTag("finalPFCandidates"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('Puppi-weighted mass'),
            expr = cms.string('mass * puppiWeight()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PF candidate type (+/-211 = ChgHad, 130 = NeuHad, 22 = Photon, +/-11 = Electron, +/-13 = Muon, 1 = HFHad, 2 = HFEM)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('Puppi-weighted pt'),
            expr = cms.string('pt * puppiWeight()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.pfCandsForUnclusteredUncPuppi = cms.EDProducer("CandPtrProjector",
    extendVetoBySingleSourcePtr = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("pfCandsNoJetsNoEleNoMuNoTauPuppi"),
    useDeltaRforFootprint = cms.bool(False),
    veto = cms.InputTag("slimmedPhotons")
)


process.pfCandsNoJetsNoEleNoMuNoTauPuppi = cms.EDProducer("CandPtrProjector",
    extendVetoBySingleSourcePtr = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("pfCandsNoJetsNoEleNoMuPuppi"),
    useDeltaRforFootprint = cms.bool(False),
    veto = cms.InputTag("slimmedTaus")
)


process.pfCandsNoJetsNoEleNoMuPuppi = cms.EDProducer("CandPtrProjector",
    extendVetoBySingleSourcePtr = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("pfCandsNoJetsNoElePuppi"),
    useDeltaRforFootprint = cms.bool(False),
    veto = cms.InputTag("slimmedMuons")
)


process.pfCandsNoJetsNoElePuppi = cms.EDProducer("CandPtrProjector",
    extendVetoBySingleSourcePtr = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("pfCandsNoJetsPuppi"),
    useDeltaRforFootprint = cms.bool(False),
    veto = cms.InputTag("slimmedElectrons")
)


process.pfCandsNoJetsPuppi = cms.EDProducer("CandPtrProjector",
    extendVetoBySingleSourcePtr = cms.bool(True),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("packedPFCandidates"),
    useDeltaRforFootprint = cms.bool(False),
    veto = cms.InputTag("cleanedPatJetsPuppi")
)


process.pfCandsNotInJetsForMetCorr = cms.EDProducer("PFCandidateFromFwdPtrProducer",
    src = cms.InputTag("pfCandsNotInJetsPtrForMetCorr")
)


process.pfCandsNotInJetsForMetCorrPuppi = cms.EDProducer("PFCandidateFromFwdPtrProducer",
    src = cms.InputTag("pfCandsNotInJetsPtrForMetCorrPuppi")
)


process.pfCandsNotInJetsPtrForMetCorr = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    matchByPtrDirect = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.untracked.string('noJet'),
    topCollection = cms.InputTag("pfJetsPtrForMetCorr")
)


process.pfCandsNotInJetsPtrForMetCorrPuppi = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrsPuppi"),
    enable = cms.bool(True),
    matchByPtrDirect = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.untracked.string('noJet'),
    topCollection = cms.InputTag("pfJetsPtrForMetCorrPuppi")
)


process.pfDeepCSVTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
)


process.pfDeepCSVTagInfosSlimmedDeepFlavour = cms.EDProducer("DeepNNTagInfoProducer",
    computer = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    svTagInfos = cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfosSlimmedDeepFlavour")
)


process.pfDeepFlavourJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("DeepFlavourONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probuds',
        'probg'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5'
    ),
    jets = cms.InputTag("hltAK4PFPuppiJets"),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepFlavourV04_12X_training/DeepJet_Run3_122X.onnx'),
    output_names = cms.vstring('ID_pred/Softmax:0'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfDeepFlavourTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
)


process.pfDeepFlavourJetTagsSlimmedDeepFlavour = cms.EDProducer("DeepFlavourONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probuds',
        'probg'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5'
    ),
    jets = cms.InputTag("hltAK4PFPuppiJets"),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/DeepFlavourV04_12X_training/DeepJet_Run3_122X.onnx'),
    output_names = cms.vstring('ID_pred/Softmax:0'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfDeepFlavourTagInfosSlimmedDeepFlavour")
)


process.pfDeepFlavourTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("DeepFlavourTagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    compute_probabilities = cms.bool(False),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    flip = cms.bool(False),
    is_weighted_jet = cms.bool(True),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(15),
    puppi_value_map = cms.InputTag("packedpuppi"),
    run_deepVertex = cms.bool(False),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    shallow_tag_infos = cms.InputTag("pfDeepCSVTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfDeepFlavourTagInfosSlimmedDeepFlavour = cms.EDProducer("DeepFlavourTagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    compute_probabilities = cms.bool(False),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    flip = cms.bool(False),
    is_weighted_jet = cms.bool(False),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.95),
    min_jet_pt = cms.double(15),
    puppi_value_map = cms.InputTag("packedpuppi"),
    run_deepVertex = cms.bool(False),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    shallow_tag_infos = cms.InputTag("pfDeepCSVTagInfosSlimmedDeepFlavour"),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring( (
        'probXbb',
        'probXcc',
        'probXcs',
        'probXqq',
        'probXtauhtaue',
        'probXtauhtaum',
        'probXtauhtauh',
        'probXWW4q',
        'probXWW3q',
        'probXWWqqev',
        'probXWWqqmv',
        'probTopbWqq',
        'probTopbWq',
        'probTopbWev',
        'probTopbWmv',
        'probTopbWtauhv',
        'probQCD',
        'massCorrX2p',
        'massCorrGeneric',
        'probWithMassTopvsQCD',
        'probWithMassWvsQCD',
        'probWithMassZvsQCD',
        'hidNeuron000',
        'hidNeuron001',
        'hidNeuron002',
        'hidNeuron003',
        'hidNeuron004',
        'hidNeuron005',
        'hidNeuron006',
        'hidNeuron007',
        'hidNeuron008',
        'hidNeuron009',
        'hidNeuron010',
        'hidNeuron011',
        'hidNeuron012',
        'hidNeuron013',
        'hidNeuron014',
        'hidNeuron015',
        'hidNeuron016',
        'hidNeuron017',
        'hidNeuron018',
        'hidNeuron019',
        'hidNeuron020',
        'hidNeuron021',
        'hidNeuron022',
        'hidNeuron023',
        'hidNeuron024',
        'hidNeuron025',
        'hidNeuron026',
        'hidNeuron027',
        'hidNeuron028',
        'hidNeuron029',
        'hidNeuron030',
        'hidNeuron031',
        'hidNeuron032',
        'hidNeuron033',
        'hidNeuron034',
        'hidNeuron035',
        'hidNeuron036',
        'hidNeuron037',
        'hidNeuron038',
        'hidNeuron039',
        'hidNeuron040',
        'hidNeuron041',
        'hidNeuron042',
        'hidNeuron043',
        'hidNeuron044',
        'hidNeuron045',
        'hidNeuron046',
        'hidNeuron047',
        'hidNeuron048',
        'hidNeuron049',
        'hidNeuron050',
        'hidNeuron051',
        'hidNeuron052',
        'hidNeuron053',
        'hidNeuron054',
        'hidNeuron055',
        'hidNeuron056',
        'hidNeuron057',
        'hidNeuron058',
        'hidNeuron059',
        'hidNeuron060',
        'hidNeuron061',
        'hidNeuron062',
        'hidNeuron063',
        'hidNeuron064',
        'hidNeuron065',
        'hidNeuron066',
        'hidNeuron067',
        'hidNeuron068',
        'hidNeuron069',
        'hidNeuron070',
        'hidNeuron071',
        'hidNeuron072',
        'hidNeuron073',
        'hidNeuron074',
        'hidNeuron075',
        'hidNeuron076',
        'hidNeuron077',
        'hidNeuron078',
        'hidNeuron079',
        'hidNeuron080',
        'hidNeuron081',
        'hidNeuron082',
        'hidNeuron083',
        'hidNeuron084',
        'hidNeuron085',
        'hidNeuron086',
        'hidNeuron087',
        'hidNeuron088',
        'hidNeuron089',
        'hidNeuron090',
        'hidNeuron091',
        'hidNeuron092',
        'hidNeuron093',
        'hidNeuron094',
        'hidNeuron095',
        'hidNeuron096',
        'hidNeuron097',
        'hidNeuron098',
        'hidNeuron099',
        'hidNeuron100',
        'hidNeuron101',
        'hidNeuron102',
        'hidNeuron103',
        'hidNeuron104',
        'hidNeuron105',
        'hidNeuron106',
        'hidNeuron107',
        'hidNeuron108',
        'hidNeuron109',
        'hidNeuron110',
        'hidNeuron111',
        'hidNeuron112',
        'hidNeuron113',
        'hidNeuron114',
        'hidNeuron115',
        'hidNeuron116',
        'hidNeuron117',
        'hidNeuron118',
        'hidNeuron119',
        'hidNeuron120',
        'hidNeuron121',
        'hidNeuron122',
        'hidNeuron123',
        'hidNeuron124',
        'hidNeuron125',
        'hidNeuron126',
        'hidNeuron127',
        'hidNeuron128',
        'hidNeuron129',
        'hidNeuron130',
        'hidNeuron131',
        'hidNeuron132',
        'hidNeuron133',
        'hidNeuron134',
        'hidNeuron135',
        'hidNeuron136',
        'hidNeuron137',
        'hidNeuron138',
        'hidNeuron139',
        'hidNeuron140',
        'hidNeuron141',
        'hidNeuron142',
        'hidNeuron143',
        'hidNeuron144',
        'hidNeuron145',
        'hidNeuron146',
        'hidNeuron147',
        'hidNeuron148',
        'hidNeuron149',
        'hidNeuron150',
        'hidNeuron151',
        'hidNeuron152',
        'hidNeuron153',
        'hidNeuron154',
        'hidNeuron155',
        'hidNeuron156',
        'hidNeuron157',
        'hidNeuron158',
        'hidNeuron159',
        'hidNeuron160',
        'hidNeuron161',
        'hidNeuron162',
        'hidNeuron163',
        'hidNeuron164',
        'hidNeuron165',
        'hidNeuron166',
        'hidNeuron167',
        'hidNeuron168',
        'hidNeuron169',
        'hidNeuron170',
        'hidNeuron171',
        'hidNeuron172',
        'hidNeuron173',
        'hidNeuron174',
        'hidNeuron175',
        'hidNeuron176',
        'hidNeuron177',
        'hidNeuron178',
        'hidNeuron179',
        'hidNeuron180',
        'hidNeuron181',
        'hidNeuron182',
        'hidNeuron183',
        'hidNeuron184',
        'hidNeuron185',
        'hidNeuron186',
        'hidNeuron187',
        'hidNeuron188',
        'hidNeuron189',
        'hidNeuron190',
        'hidNeuron191',
        'hidNeuron192',
        'hidNeuron193',
        'hidNeuron194',
        'hidNeuron195',
        'hidNeuron196',
        'hidNeuron197',
        'hidNeuron198',
        'hidNeuron199',
        'hidNeuron200',
        'hidNeuron201',
        'hidNeuron202',
        'hidNeuron203',
        'hidNeuron204',
        'hidNeuron205',
        'hidNeuron206',
        'hidNeuron207',
        'hidNeuron208',
        'hidNeuron209',
        'hidNeuron210',
        'hidNeuron211',
        'hidNeuron212',
        'hidNeuron213',
        'hidNeuron214',
        'hidNeuron215',
        'hidNeuron216',
        'hidNeuron217',
        'hidNeuron218',
        'hidNeuron219',
        'hidNeuron220',
        'hidNeuron221',
        'hidNeuron222',
        'hidNeuron223',
        'hidNeuron224',
        'hidNeuron225',
        'hidNeuron226',
        'hidNeuron227',
        'hidNeuron228',
        'hidNeuron229',
        'hidNeuron230',
        'hidNeuron231',
        'hidNeuron232',
        'hidNeuron233',
        'hidNeuron234',
        'hidNeuron235',
        'hidNeuron236',
        'hidNeuron237',
        'hidNeuron238',
        'hidNeuron239',
        'hidNeuron240',
        'hidNeuron241',
        'hidNeuron242',
        'hidNeuron243',
        'hidNeuron244',
        'hidNeuron245',
        'hidNeuron246',
        'hidNeuron247',
        'hidNeuron248',
        'hidNeuron249',
        'hidNeuron250',
        'hidNeuron251',
        'hidNeuron252',
        'hidNeuron253',
        'hidNeuron254',
        'hidNeuron255' ) 
    ),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/GlobalParticleTransformerAK8/PUPPI/V03/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/GlobalParticleTransformerAK8/PUPPI/V03/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfGlobalParticleTransformerAK8TagInfosSlimmedAK8DeepTags")
)


process.pfGlobalParticleTransformerAK8TagInfosSlimmedAK8DeepTags = cms.EDProducer("GlobalParticleTransformerAK8TagInfoProducer",
    flip_ip_sign = cms.bool(False),
    include_neutrals = cms.bool(True),
    jet_radius = cms.double(0.8),
    jets = cms.InputTag("updatedPatJetsSlimmedAK8DeepTags"),
    lost_tracks = cms.InputTag("lostTracks"),
    max_jet_eta = cms.double(99),
    mightGet = cms.optional.untracked.vstring,
    min_jet_pt = cms.double(150),
    min_pt_for_track_properties = cms.double(-1),
    min_puppi_wgt = cms.double(0.01),
    pf_candidates = cms.InputTag("packedPFCandidates"),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    sip3dSigMax = cms.double(-1),
    sort_by_sip2dsig = cms.bool(False),
    use_puppiP4 = cms.bool(False),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfImpactParameterTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    maxDeltaR = cms.double(0.4),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(0),
    minimumNumberOfPixelHits = cms.int32(1),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlineSlimmedPrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.pfImpactParameterTagInfosSlimmedDeepFlavour = cms.EDProducer("CandIPProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    computeGhostTrack = cms.bool(True),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetDirectionUsingGhostTrack = cms.bool(False),
    jetDirectionUsingTracks = cms.bool(False),
    jets = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    maxDeltaR = cms.double(0.4),
    maximumChiSquared = cms.double(5.0),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(0),
    minimumNumberOfPixelHits = cms.int32(1),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlineSlimmedPrimaryVertices"),
    useTrackQuality = cms.bool(False)
)


process.pfInclusiveSecondaryVertexFinderTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("slimmedSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    weights = cms.InputTag("packedpuppi")
)


process.pfInclusiveSecondaryVertexFinderTagInfosSlimmedDeepFlavour = cms.EDProducer("CandSecondaryVertexProducer",
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    extSVCollection = cms.InputTag("slimmedSecondaryVertices"),
    extSVDeltaRToJet = cms.double(0.3),
    minimumTrackWeight = cms.double(0.5),
    trackIPTagInfos = cms.InputTag("pfImpactParameterTagInfosSlimmedDeepFlavour"),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(1),
        ptMin = cms.double(1.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip3dSig'),
    useExternalSV = cms.bool(True),
    usePVError = cms.bool(True),
    vertexCuts = cms.PSet(
        distSig2dMax = cms.double(99999.9),
        distSig2dMin = cms.double(2.0),
        distSig3dMax = cms.double(99999.9),
        distSig3dMin = cms.double(-99999.9),
        distVal2dMax = cms.double(2.5),
        distVal2dMin = cms.double(0.01),
        distVal3dMax = cms.double(99999.9),
        distVal3dMin = cms.double(-99999.9),
        fracPV = cms.double(0.79),
        massMax = cms.double(6.5),
        maxDeltaRToJetAxis = cms.double(0.4),
        minimumTrackWeight = cms.double(0.5),
        multiplicityMin = cms.uint32(2),
        useTrackWeights = cms.bool(True),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        )
    ),
    vertexReco = cms.PSet(
        finder = cms.string('avr'),
        minweight = cms.double(0.5),
        primcut = cms.double(1.8),
        seccut = cms.double(6.0),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    weights = cms.InputTag("packedpuppi")
)


process.pfJetsPtrForMetCorr = cms.EDProducer("PFJetFwdPtrProducer",
    src = cms.InputTag("ak4PFJets")
)


process.pfJetsPtrForMetCorrPuppi = cms.EDProducer("PFJetFwdPtrProducer",
    src = cms.InputTag("ak4PFJets")
)


process.pfMETcorrType0 = cms.EDProducer("Type0PFMETcorrInputProducer",
    correction = cms.PSet(
        formula = cms.string('(x<35)?(-( [0]+x*[1]+pow(x, 2)*[2]+pow(x, 3)*[3] )):(-( [0]+35*[1]+pow(35, 2)*[2]+pow(35, 3)*[3] ))'),
        par0 = cms.double(-0.181414),
        par1 = cms.double(-0.476934),
        par2 = cms.double(0.00863564),
        par3 = cms.double(-4.94181e-05)
    ),
    minDz = cms.double(0.2),
    srcHardScatterVertex = cms.InputTag("selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0"),
    srcPFCandidateToVertexAssociations = cms.InputTag("pfCandidateToVertexAssociation")
)


process.pfMassDecorrelatedParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('XbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXbb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('XccvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXcc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXqq"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('XqqvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXqq"))
        )
    )
)


process.pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probXbb',
        'probXcc',
        'probXqq',
        'probQCDbb',
        'probQCDcc',
        'probQCDb',
        'probQCDc',
        'probQCDothers'
    ),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/MD-2prong/V01/modelfile/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/ParticleNetAK8/MD-2prong/V01/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfParticleNetTagInfosSlimmedAK8DeepTags")
)


process.pfMetCHS = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("pfCHS"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.pfMetPuppi = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(True),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("packedPFCandidates"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.pfMetT1 = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrPfMetType1","type1"))
)


process.pfMetT1Puppi = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrPfMetType1Puppi","type1"))
)


process.pfMetT1T2 = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrPfMetType1","type1"), cms.InputTag("corrPfMetType2"))
)


process.pfMetT1T2Puppi = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    srcCorrections = cms.VInputTag(cms.InputTag("corrPfMetType1Puppi","type1"), cms.InputTag("corrPfMetType2Puppi"))
)


process.pfMetTrk = cms.EDProducer("PFMETProducer",
    alias = cms.string('@module_label'),
    applyWeight = cms.bool(False),
    calculateSignificance = cms.bool(False),
    globalThreshold = cms.double(0),
    mightGet = cms.optional.untracked.vstring,
    parameters = cms.PSet(

    ),
    src = cms.InputTag("pfTrk"),
    srcJetResPhi = cms.optional.string,
    srcJetResPt = cms.optional.string,
    srcJetSF = cms.optional.string,
    srcJets = cms.optional.InputTag,
    srcLeptons = cms.optional.VInputTag,
    srcRho = cms.optional.InputTag,
    srcWeights = cms.InputTag("")
)


process.pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbcq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbqq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('TvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbcq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbqq"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probWcq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probWqq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('WvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probWcq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probWqq"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZqq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('ZvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZqq"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('ZbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZbb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('ZccvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZcc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('HbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHbb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('HccvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHcc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHqqqq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"),
                cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers")
            ),
            name = cms.string('H4qvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHqqqq"))
        )
    )
)


process.pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probuds"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('BvsAll'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probuds"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('CvsL'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probb")),
            name = cms.string('CvsB'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probuds"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('QvsG'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probuds"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probuds"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsJet'),
            numerator = cms.VInputTag(
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probele"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsEle'),
            numerator = cms.VInputTag(
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probmu"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsMu'),
            numerator = cms.VInputTag(
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        )
    )
)


process.pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probmu',
        'probele',
        'probtaup1h0p',
        'probtaup1h1p',
        'probtaup1h2p',
        'probtaup3h0p',
        'probtaup3h1p',
        'probtaum1h0p',
        'probtaum1h1p',
        'probtaum1h2p',
        'probtaum3h0p',
        'probtaum3h1p',
        'probb',
        'probc',
        'probuds',
        'probg',
        'ptcorr',
        'ptreshigh',
        'ptreslow',
        'ptnu'
    ),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetFromMiniAODAK4/PUPPI/Central/modelfile/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/ParticleNetFromMiniAODAK4/PUPPI/Central/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralTagInfosSlimmedDeepFlavour")
)


process.pfParticleNetFromMiniAODAK4PuppiCentralTagInfosSlimmedDeepFlavour = cms.EDProducer("ParticleNetFeatureEvaluator",
    electrons = cms.InputTag("slimmedElectrons"),
    fallback_puppi_weight = cms.bool(False),
    flip_ip_sign = cms.bool(False),
    include_neutrals = cms.bool(True),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    losttracks = cms.InputTag("lostTracks"),
    max_dr_for_losttrack = cms.double(0.4),
    max_eta_for_taus = cms.double(2.5),
    max_jet_eta = cms.double(2.5),
    max_sip3dsig_for_flip = cms.double(-1.0),
    mightGet = cms.optional.untracked.vstring,
    min_jet_eta = cms.double(0),
    min_jet_pt = cms.double(0.0),
    min_pt_for_losttrack = cms.double(1),
    min_pt_for_pfcandidates = cms.double(-1),
    min_pt_for_taus = cms.double(20),
    min_pt_for_track_properties = cms.double(-1),
    muons = cms.InputTag("slimmedMuons"),
    pf_candidates = cms.InputTag("packedPFCandidates"),
    photons = cms.InputTag("slimmedPhotons"),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    taus = cms.InputTag("slimmedTaus","","@skipCurrentProcess"),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfParticleNetFromMiniAODAK4PuppiForwardDiscriminatorsJetTagsSlimmedDeepFlavour = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(cms.PSet(
        denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","probq"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","probg")),
        name = cms.string('QvsG'),
        numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","probq"))
    ))
)


process.pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probq',
        'probg',
        'ptcorr',
        'ptreshigh',
        'ptreslow',
        'ptnu'
    ),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetFromMiniAODAK4/PUPPI/Forward/modelfile/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/ParticleNetFromMiniAODAK4/PUPPI/Forward/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardTagInfosSlimmedDeepFlavour")
)


process.pfParticleNetFromMiniAODAK4PuppiForwardTagInfosSlimmedDeepFlavour = cms.EDProducer("ParticleNetFeatureEvaluator",
    electrons = cms.InputTag("slimmedElectrons"),
    fallback_puppi_weight = cms.bool(False),
    flip_ip_sign = cms.bool(False),
    include_neutrals = cms.bool(True),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    losttracks = cms.InputTag("lostTracks"),
    max_dr_for_losttrack = cms.double(0.4),
    max_eta_for_taus = cms.double(2.5),
    max_jet_eta = cms.double(5.0),
    max_sip3dsig_for_flip = cms.double(99999),
    mightGet = cms.optional.untracked.vstring,
    min_jet_eta = cms.double(2.5),
    min_jet_pt = cms.double(0.0),
    min_pt_for_losttrack = cms.double(1),
    min_pt_for_pfcandidates = cms.double(-1),
    min_pt_for_taus = cms.double(20),
    min_pt_for_track_properties = cms.double(-1),
    muons = cms.InputTag("slimmedMuons"),
    pf_candidates = cms.InputTag("packedPFCandidates"),
    photons = cms.InputTag("slimmedPhotons"),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    taus = cms.InputTag("slimmedTaus","","@skipCurrentProcess"),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHbb"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HbbvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHbb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHcc"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HccvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHcc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHtt"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HttvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHtt"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHtm"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HtmvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHtm"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHte"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HtevsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHte"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHqq"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HqqvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHqq"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHgg"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('HggvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHgg"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHqq"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHcc"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf")),
            name = cms.string('WvsQCD'),
            numerator = cms.VInputTag(cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHqq"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHcc"))
        )
    )
)


process.pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probHtt',
        'probHtm',
        'probHte',
        'probHbb',
        'probHcc',
        'probHqq',
        'probHgg',
        'probQCD2hf',
        'probQCD1hf',
        'probQCD0hf',
        'masscorr'
    ),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetFromMiniAODAK8/modelfile/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/ParticleNetFromMiniAODAK8/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfParticleNetFromMiniAODAK8TagInfosSlimmedAK8DeepTags")
)


process.pfParticleNetFromMiniAODAK8TagInfosSlimmedAK8DeepTags = cms.EDProducer("ParticleNetFeatureEvaluator",
    electrons = cms.InputTag("slimmedElectrons"),
    fallback_puppi_weight = cms.bool(False),
    flip_ip_sign = cms.bool(False),
    include_neutrals = cms.bool(True),
    jet_radius = cms.double(0.8),
    jets = cms.InputTag("updatedPatJetsSlimmedAK8DeepTags"),
    losttracks = cms.InputTag("lostTracks"),
    max_dr_for_losttrack = cms.double(0.4),
    max_eta_for_taus = cms.double(2.5),
    max_jet_eta = cms.double(2.5),
    max_sip3dsig_for_flip = cms.double(99999),
    mightGet = cms.optional.untracked.vstring,
    min_jet_eta = cms.double(0),
    min_jet_pt = cms.double(180),
    min_pt_for_losttrack = cms.double(1),
    min_pt_for_pfcandidates = cms.double(-1),
    min_pt_for_taus = cms.double(20),
    min_pt_for_track_properties = cms.double(-1),
    muons = cms.InputTag("slimmedMuons"),
    pf_candidates = cms.InputTag("packedPFCandidates"),
    photons = cms.InputTag("slimmedPhotons"),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    taus = cms.InputTag("slimmedTaus","","@skipCurrentProcess"),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfParticleNetJetTagsSlimmedAK8DeepTags = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring(
        'probTbcq',
        'probTbqq',
        'probTbc',
        'probTbq',
        'probTbel',
        'probTbmu',
        'probTbta',
        'probWcq',
        'probWqq',
        'probZbb',
        'probZcc',
        'probZqq',
        'probHbb',
        'probHcc',
        'probHqqqq',
        'probQCDbb',
        'probQCDcc',
        'probQCDb',
        'probQCDc',
        'probQCDothers'
    ),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/General/V01/modelfile/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/ParticleNetAK8/General/V01/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfParticleNetTagInfosSlimmedAK8DeepTags")
)


process.pfParticleNetMassRegressionJetTagsSlimmedAK8DeepTags = cms.EDProducer("BoostedJetONNXJetTagsProducer",
    debugMode = cms.untracked.bool(False),
    flav_names = cms.vstring('mass'),
    jets = cms.InputTag(""),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/ParticleNetAK8/MassRegression/V01/modelfile/model.onnx'),
    preprocessParams = cms.PSet(

    ),
    preprocess_json = cms.string('RecoBTag/Combined/data/ParticleNetAK8/MassRegression/V01/preprocess.json'),
    produceValueMap = cms.untracked.bool(False),
    src = cms.InputTag("pfParticleNetTagInfosSlimmedAK8DeepTags")
)


process.pfParticleNetTagInfosSlimmedAK8DeepTags = cms.EDProducer("DeepBoostedJetTagInfoProducer",
    covariancePackingSchemas = cms.vint32(8, 264, 520, 776, 0),
    covarianceVersion = cms.int32(0),
    dxy_value_map = cms.InputTag(""),
    dxysig_value_map = cms.InputTag(""),
    dz_value_map = cms.InputTag(""),
    dzsig_value_map = cms.InputTag(""),
    flip_ip_sign = cms.bool(False),
    include_neutrals = cms.bool(True),
    jet_radius = cms.double(0.8),
    jets = cms.InputTag("updatedPatJetsSlimmedAK8DeepTags"),
    lostInnerHits_value_map = cms.InputTag(""),
    max_jet_eta = cms.double(99),
    mightGet = cms.optional.untracked.vstring,
    min_jet_pt = cms.double(150),
    min_pt_for_pfcandidates = cms.double(-1),
    min_pt_for_track_properties = cms.double(-1),
    min_puppi_wgt = cms.double(0.01),
    normchi2_value_map = cms.InputTag(""),
    pf_candidates = cms.InputTag("packedPFCandidates"),
    puppi_value_map = cms.InputTag("packedpuppi"),
    quality_value_map = cms.InputTag(""),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    sip3dSigMax = cms.double(-1),
    sort_by_sip2dsig = cms.bool(False),
    trkEta_value_map = cms.InputTag(""),
    trkPhi_value_map = cms.InputTag(""),
    trkPt_value_map = cms.InputTag(""),
    unsubjet_map = cms.InputTag(""),
    use_hlt_features = cms.bool(False),
    use_puppiP4 = cms.bool(False),
    use_scouting_features = cms.bool(False),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probg")
            ),
            name = cms.string('BvsAll'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probg")),
            name = cms.string('CvsL'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb")),
            name = cms.string('CvsB'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probg")),
            name = cms.string('QvsG'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probg")),
            name = cms.string('SvsUDG'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc")),
            name = cms.string('SvsBC'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probg"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsJet'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probele"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsEle'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probmu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsMu'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p")
            )
        )
    )
)


process.pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probg")
            ),
            name = cms.string('BvsAll'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","problepb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('CvsL'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","problepb")),
            name = cms.string('CvsB'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('QvsG'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('SvsUDG'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc")),
            name = cms.string('SvsBC'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsJet'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probele"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsEle'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probmu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsMu'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        )
    )
)


process.pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4ONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probs',
        'probu',
        'probd',
        'probg',
        'probele',
        'probmu',
        'probtaup1h0p',
        'probtaup1h1p',
        'probtaup1h2p',
        'probtaup3h0p',
        'probtaup3h1p',
        'probtaum1h0p',
        'probtaum1h1p',
        'probtaum1h2p',
        'probtaum3h0p',
        'probtaum3h1p',
        'ptcorr',
        'ptreshigh',
        'ptreslow',
        'ptnu',
        'probemudata',
        'probemumc',
        'probdimudata',
        'probdimumc',
        'probmutaudata',
        'probmutaumc'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5',
        'input_6',
        'input_7',
        'input_8'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/UParTAK4/PUPPI/V01/modelfile/model.onnx'),
    output_names = cms.vstring('softmax'),
    src = cms.InputTag("pfUnifiedParticleTransformerAK4TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
)


process.pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4ONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probs',
        'probu',
        'probd',
        'probg',
        'probele',
        'probmu',
        'probtaup1h0p',
        'probtaup1h1p',
        'probtaup1h2p',
        'probtaup3h0p',
        'probtaup3h1p',
        'probtaum1h0p',
        'probtaum1h1p',
        'probtaum1h2p',
        'probtaum3h0p',
        'probtaum3h1p',
        'ptcorr',
        'ptreshigh',
        'ptreslow',
        'ptnu',
        'probemudata',
        'probemumc',
        'probdimudata',
        'probdimumc',
        'probmutaudata',
        'probmutaumc'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5',
        'input_6',
        'input_7',
        'input_8'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/UParTAK4/PUPPI/V01/modelfile/model.onnx'),
    output_names = cms.vstring('softmax'),
    src = cms.InputTag("pfUnifiedParticleTransformerAK4TagInfosSlimmedDeepFlavour")
)


process.pfUnifiedParticleTransformerAK4TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4TagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    fix_lt_sorting = cms.bool(True),
    flip = cms.bool(False),
    is_weighted_jet = cms.bool(True),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    losttracks = cms.InputTag("lostTracks"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.1),
    min_jet_pt = cms.double(0),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    sort_cand_by_pt = cms.bool(False),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfUnifiedParticleTransformerAK4TagInfosSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4TagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    fix_lt_sorting = cms.bool(True),
    flip = cms.bool(False),
    is_weighted_jet = cms.bool(False),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    losttracks = cms.InputTag("lostTracks"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.1),
    min_jet_pt = cms.double(0),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    sort_cand_by_pt = cms.bool(False),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour = cms.EDProducer("BTagProbabilityToDiscriminator",
    discriminators = cms.VPSet(
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probg")
            ),
            name = cms.string('BvsAll'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","problepb"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('CvsL'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","problepb")),
            name = cms.string('CvsB'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('QvsG'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probg")),
            name = cms.string('SvsUDG'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc")),
            name = cms.string('SvsBC'),
            numerator = cms.VInputTag(cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"))
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsJet'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probele"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsEle'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        ),
        cms.PSet(
            denominator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probmu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p")
            ),
            name = cms.string('TauVsMu'),
            numerator = cms.VInputTag(
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"),
                cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p")
            )
        )
    )
)


process.pfUnifiedParticleTransformerAK4V1JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4ONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probs',
        'probu',
        'probd',
        'probg',
        'probele',
        'probmu',
        'probtaup1h0p',
        'probtaup1h1p',
        'probtaup1h2p',
        'probtaup3h0p',
        'probtaup3h1p',
        'probtaum1h0p',
        'probtaum1h1p',
        'probtaum1h2p',
        'probtaum3h0p',
        'probtaum3h1p',
        'ptcorr',
        'ptreshigh',
        'ptreslow',
        'ptnu',
        'probemudata',
        'probemumc',
        'probdimudata',
        'probdimumc',
        'probmutaudata',
        'probmutaumc'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5',
        'input_6',
        'input_7',
        'input_8'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/UParTAK4/PUPPI/V00/UParTAK4.onnx'),
    output_names = cms.vstring('softmax'),
    src = cms.InputTag("pfUnifiedParticleTransformerAK4V1TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
)


process.pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4ONNXJetTagsProducer",
    flav_names = cms.vstring(
        'probb',
        'probbb',
        'problepb',
        'probc',
        'probs',
        'probu',
        'probd',
        'probg',
        'probele',
        'probmu',
        'probtaup1h0p',
        'probtaup1h1p',
        'probtaup1h2p',
        'probtaup3h0p',
        'probtaup3h1p',
        'probtaum1h0p',
        'probtaum1h1p',
        'probtaum1h2p',
        'probtaum3h0p',
        'probtaum3h1p',
        'ptcorr',
        'ptreshigh',
        'ptreslow',
        'ptnu',
        'probemudata',
        'probemumc',
        'probdimudata',
        'probdimumc',
        'probmutaudata',
        'probmutaumc'
    ),
    input_names = cms.vstring(
        'input_1',
        'input_2',
        'input_3',
        'input_4',
        'input_5',
        'input_6',
        'input_7',
        'input_8'
    ),
    mightGet = cms.optional.untracked.vstring,
    model_path = cms.FileInPath('RecoBTag/Combined/data/UParTAK4/PUPPI/V00/UParTAK4.onnx'),
    output_names = cms.vstring('softmax'),
    src = cms.InputTag("pfUnifiedParticleTransformerAK4V1TagInfosSlimmedDeepFlavour")
)


process.pfUnifiedParticleTransformerAK4V1TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4TagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    fix_lt_sorting = cms.bool(True),
    flip = cms.bool(False),
    is_weighted_jet = cms.bool(True),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    losttracks = cms.InputTag("lostTracks"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.1),
    min_jet_pt = cms.double(0),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    sort_cand_by_pt = cms.bool(False),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfUnifiedParticleTransformerAK4V1TagInfosSlimmedDeepFlavour = cms.EDProducer("UnifiedParticleTransformerAK4TagInfoProducer",
    candidates = cms.InputTag("packedPFCandidates"),
    fallback_puppi_weight = cms.bool(False),
    fallback_vertex_association = cms.bool(False),
    fix_lt_sorting = cms.bool(True),
    flip = cms.bool(False),
    is_weighted_jet = cms.bool(False),
    jet_radius = cms.double(0.4),
    jets = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    losttracks = cms.InputTag("lostTracks"),
    max_jet_eta = cms.double(2.5),
    mightGet = cms.optional.untracked.vstring,
    min_candidate_pt = cms.double(0.1),
    min_jet_pt = cms.double(0),
    puppi_value_map = cms.InputTag("packedpuppi"),
    secondary_vertices = cms.InputTag("slimmedSecondaryVertices"),
    sort_cand_by_pt = cms.bool(False),
    unsubjet_map = cms.InputTag(""),
    vertex_associator = cms.InputTag(""),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pfmetTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('slimmedMET, type-1 corrected PF MET'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('PFMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        covXX = cms.PSet(
            doc = cms.string('xx element of met covariance matrix'),
            expr = cms.string('getSignificanceMatrix().At(0,0)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        covXY = cms.PSet(
            doc = cms.string('xy element of met covariance matrix'),
            expr = cms.string('getSignificanceMatrix().At(0,1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        covYY = cms.PSet(
            doc = cms.string('yy element of met covariance matrix'),
            expr = cms.string('getSignificanceMatrix().At(1,1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        phiUnclusteredDown = cms.PSet(
            doc = cms.string('Unclustered down phi'),
            expr = cms.string("shiftedPhi(\'UnclusteredEnDown\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phiUnclusteredUp = cms.PSet(
            doc = cms.string('Unclustered up phi'),
            expr = cms.string("shiftedPhi(\'UnclusteredEnUp\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptUnclusteredDown = cms.PSet(
            doc = cms.string('Unclustered down pt'),
            expr = cms.string("shiftedPt(\'UnclusteredEnDown\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        ptUnclusteredUp = cms.PSet(
            doc = cms.string('Unclustered up pt'),
            expr = cms.string("shiftedPt(\'UnclusteredEnUp\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        significance = cms.PSet(
            doc = cms.string('MET significance'),
            expr = cms.string('metSignificance()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sumEt = cms.PSet(
            doc = cms.string('scalar sum of Et'),
            expr = cms.string('sumEt()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sumPtUnclustered = cms.PSet(
            doc = cms.string('sumPt used for MET significance'),
            expr = cms.string('metSumPtUnclustered()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.photonMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==1 photons or electrons'),
    mcMap = cms.InputTag("photonsMCMatchForTable"),
    objName = cms.string('Photon'),
    objType = cms.string('Photon'),
    src = cms.InputTag("linkedObjects","photons")
)


process.photonMVAValueMapProducer = cms.EDProducer("PhotonMVAValueMapProducer",
    mvaConfigurations = cms.VPSet(
        cms.PSet(
            categoryCuts = cms.vstring(
                'abs(superCluster.eta) <  1.479',
                'abs(superCluster.eta) >= 1.479'
            ),
            effAreasConfigFile = cms.FileInPath('RecoEgamma/PhotonIdentification/data/Spring16/effAreaPhotons_cone03_pfPhotons_90percentBased_3bins.txt'),
            mvaName = cms.string('PhotonMVAEstimator'),
            mvaTag = cms.string('Run2Spring16NonTrigV1'),
            nCategories = cms.int32(2),
            phoIsoCutoff = cms.double(2.5),
            phoIsoPtScalingCoeff = cms.vdouble(0.0053, 0.0034),
            variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesSpring16.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/PhotonIdentification/data/MVA/Spring16/EB_V1.weights.xml.gz',
                'RecoEgamma/PhotonIdentification/data/MVA/Spring16/EE_V1.weights.xml.gz'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'abs(superCluster.eta) <  1.479',
                'abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('PhotonMVAEstimator'),
            mvaTag = cms.string('RunIIFall17v1p1'),
            nCategories = cms.int32(2),
            variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EB_V1.weights.root',
                'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EE_V1.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'abs(superCluster.eta) <  1.479',
                'abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('PhotonMVAEstimator'),
            mvaTag = cms.string('RunIIFall17v2'),
            nCategories = cms.int32(2),
            variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EB_V2.weights.root',
                'RecoEgamma/PhotonIdentification/data/MVA/Fall17/EE_V2.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'abs(superCluster.eta) <  1.479',
                'abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('PhotonMVAEstimator'),
            mvaTag = cms.string('RunIIIWinter22v1'),
            nCategories = cms.int32(2),
            variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun3VariablesWinter22V1.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/PhotonIdentification/data/MVA/RunIII_Winter22/PhoMVA_ID_EB_V1.weights.root',
                'RecoEgamma/PhotonIdentification/data/MVA/RunIII_Winter22/PhoMVA_ID_EE_V1.weights.root'
            )
        ),
        cms.PSet(
            categoryCuts = cms.vstring(
                'abs(superCluster.eta) <  1.479',
                'abs(superCluster.eta) >= 1.479'
            ),
            mvaName = cms.string('PhotonMVAEstimator'),
            mvaTag = cms.string('PhaseIISummer20v0'),
            nCategories = cms.int32(2),
            variableDefinition = cms.string('RecoEgamma/PhotonIdentification/data/PhotonMVAEstimatorRun2VariablesFall17V1p1.txt'),
            weightFileNames = cms.vstring(
                'RecoEgamma/PhotonIdentification/data/MVA/PhaseII/PhotonID_MVA_barrel_Egamma_PhaseII_weight.xml.gz',
                'RecoEgamma/PhotonIdentification/data/MVA/PhaseII/PhotonID_MVA_barrel_Egamma_PhaseII_weight.xml.gz'
            )
        )
    ),
    src = cms.InputTag("slimmedPhotons")
)


process.photonTable = cms.EDProducer("SimplePATPhotonFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedPhotons after basic selection (pt > 5 )'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Photon'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","photons"),
    variables = cms.PSet(
        cutBased = cms.PSet(
            doc = cms.string('cut-based ID bitmap, RunIIIWinter22V1: fail ==0, loose >=1 , medium >=2, tight >=3'),
            expr = cms.string("userInt(\'cutBasedID_loose\')+userInt(\'cutBasedID_medium\')+userInt(\'cutBasedID_tight\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        ecalPFClusterIso = cms.PSet(
            doc = cms.string('sum pt of ecal clusters, vetoing clusters part of photon'),
            expr = cms.string('ecalPFClusterIso()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        electronIdx = cms.PSet(
            doc = cms.string('index of the associated electron (-1 if none)'),
            expr = cms.string("?hasUserCand(\'electron\')?userCand(\'electron\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        electronVeto = cms.PSet(
            doc = cms.string('pass electron veto'),
            expr = cms.string('passElectronVeto()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        energyErr = cms.PSet(
            doc = cms.string('energy error of the cluster from regression'),
            expr = cms.string("getCorrectedEnergyError(\'regression2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        energyRaw = cms.PSet(
            doc = cms.string('raw energy of photon supercluster'),
            expr = cms.string('superCluster().rawEnergy()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        esEffSigmaRR = cms.PSet(
            doc = cms.string('preshower sigmaRR'),
            expr = cms.string('full5x5_showerShapeVariables().effSigmaRR()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        esEnergyOverRawE = cms.PSet(
            doc = cms.string('ratio of preshower energy to raw supercluster energy'),
            expr = cms.string('superCluster().preshowerEnergy()/superCluster().rawEnergy()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        etaWidth = cms.PSet(
            doc = cms.string('Width of the photon supercluster in eta'),
            expr = cms.string('superCluster().etaWidth()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        haloTaggerMVAVal = cms.PSet(
            doc = cms.string('Value of MVA based BDT based  beam halo tagger in the Ecal endcap (valid for pT > 200 GeV)'),
            expr = cms.string('haloTaggerMVAVal()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        hasConversionTracks = cms.PSet(
            doc = cms.string('Variable specifying if photon has associated conversion tracks (one-legged or two-legged)'),
            expr = cms.string('hasConversionTracks()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        hcalPFClusterIso = cms.PSet(
            doc = cms.string('sum pt of hcal clusters, vetoing clusters part of photon'),
            expr = cms.string('hcalPFClusterIso()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hoe = cms.PSet(
            doc = cms.string('H over E'),
            expr = cms.string('hadronicOverEm()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        hoe_PUcorr = cms.PSet(
            doc = cms.string('PU corrected H/E (cone-based with quadraticEA*rho*rho + linearEA*rho Winter22V1 corrections)'),
            expr = cms.string("userFloat(\'HoverEQuadratic\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        hoe_Tower = cms.PSet(
            doc = cms.string('H over E Tower based calculation'),
            expr = cms.string('hadTowOverEm()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        isScEtaEB = cms.PSet(
            doc = cms.string('is supercluster eta within barrel acceptance'),
            expr = cms.string('abs(superCluster().eta()) < 1.4442'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isScEtaEE = cms.PSet(
            doc = cms.string('is supercluster eta within endcap acceptance'),
            expr = cms.string('abs(superCluster().eta()) > 1.566 && abs(superCluster().eta()) < 2.5'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        jetIdx = cms.PSet(
            doc = cms.string('index of the associated jet (-1 if none)'),
            expr = cms.string("?hasUserCand(\'jet\')?userCand(\'jet\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        mvaID = cms.PSet(
            doc = cms.string('MVA ID score, Winter22V1'),
            expr = cms.string("userFloat(\'mvaID\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mvaID_WP80 = cms.PSet(
            doc = cms.string('MVA ID WP80, Winter22V1'),
            expr = cms.string("userInt(\'mvaID_WP80\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mvaID_WP90 = cms.PSet(
            doc = cms.string('MVA ID WP90, Winter22V1'),
            expr = cms.string("userInt(\'mvaID_WP90\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        pfChargedIso = cms.PSet(
            doc = cms.string('PF absolute isolation dR=0.3, charged component with dxy,dz match to PV'),
            expr = cms.string('chargedHadronIso()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pfChargedIsoPFPV = cms.PSet(
            doc = cms.string('PF absolute isolation dR=0.3, charged component (PF PV only)'),
            expr = cms.string('chargedHadronPFPVIso()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfChargedIsoWorstVtx = cms.PSet(
            doc = cms.string('PF absolute isolation dR=0.3, charged component (Vertex with largest isolation)'),
            expr = cms.string('chargedHadronWorstVtxIso()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfPhoIso03 = cms.PSet(
            doc = cms.string('PF absolute isolation dR=0.3, photon component (uncorrected)'),
            expr = cms.string('photonIso()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfRelIso03_all_quadratic = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, total (with quadraticEA*rho*rho + linearEA*rho Winter22V1 corrections)'),
            expr = cms.string("userFloat(\'PFIsoAllQuadratic\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        pfRelIso03_chg_quadratic = cms.PSet(
            doc = cms.string('PF relative isolation dR=0.3, charged hadron component (with quadraticEA*rho*rho + linearEA*rho Winter22V1 corrections)'),
            expr = cms.string("userFloat(\'PFIsoChgQuadratic\')/pt"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        phiWidth = cms.PSet(
            doc = cms.string('Width of the photon supercluster in phi'),
            expr = cms.string('superCluster().phiWidth()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pixelSeed = cms.PSet(
            doc = cms.string('has pixel seed'),
            expr = cms.string('hasPixelSeed()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        r9 = cms.PSet(
            doc = cms.string('R9 of the supercluster, calculated with full 5x5 region'),
            expr = cms.string('full5x5_r9()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        s4 = cms.PSet(
            doc = cms.string('e2x2/e5x5 of the supercluster, calculated with full 5x5 region'),
            expr = cms.string('full5x5_showerShapeVariables().e2x2/full5x5_showerShapeVariables().e5x5'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        seedGain = cms.PSet(
            doc = cms.string('Gain of the seed crystal'),
            expr = cms.string("userInt(\'seedGain\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        seediEtaOriX = cms.PSet(
            doc = cms.string('iEta or iX of seed crystal. iEta is barrel-only, iX is endcap-only. iEta runs from -85 to +85, with no crystal at iEta=0. iX runs from 1 to 100.'),
            expr = cms.string('superCluster().seedCrysIEtaOrIx'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        seediPhiOriY = cms.PSet(
            doc = cms.string('iPhi or iY of seed crystal. iPhi is barrel-only, iY is endcap-only. iPhi runs from 1 to 360. iY runs from 1 to 100.'),
            expr = cms.string('superCluster().seedCrysIPhiOrIy'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        sieie = cms.PSet(
            doc = cms.string('sigma_IetaIeta of the supercluster, calculated with full 5x5 region'),
            expr = cms.string('full5x5_sigmaIetaIeta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sieip = cms.PSet(
            doc = cms.string('sigma_IetaIphi of the supercluster, calculated with full 5x5 region'),
            expr = cms.string('full5x5_showerShapeVariables().sigmaIetaIphi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sipip = cms.PSet(
            doc = cms.string('sigmaIphiIphi of the supercluster'),
            expr = cms.string('showerShapeVariables().sigmaIphiIphi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        superclusterEta = cms.PSet(
            doc = cms.string('supercluster eta'),
            expr = cms.string('superCluster().eta()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        trkSumPtHollowConeDR03 = cms.PSet(
            doc = cms.string('Sum of track pT in a hollow cone of outer radius, inner radius'),
            expr = cms.string('trkSumPtHollowConeDR03()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        trkSumPtSolidConeDR04 = cms.PSet(
            doc = cms.string('Sum of track pT in a cone of dR=0.4'),
            expr = cms.string('trkSumPtSolidConeDR04()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        vidNestedWPBitmap = cms.PSet(
            doc = cms.string('RunIIIWinter22V1 VID compressed bitmap (MinPtCut,PhoSCEtaMultiRangeCut,PhoFull5x5SigmaIEtaIEtaCut,PhoGenericQuadraticRhoPtScaledCut,PhoGenericQuadraticRhoPtScaledCut,PhoGenericQuadraticRhoPtScaledCut,PhoGenericQuadraticRhoPtScaledCut), 2 bits per cut'),
            expr = cms.string("userInt(\'VIDNestedWPBitmap\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        x_calo = cms.PSet(
            doc = cms.string('photon supercluster position on calorimeter, x coordinate (cm)'),
            expr = cms.string('superCluster().seed().position().x()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        y_calo = cms.PSet(
            doc = cms.string('photon supercluster position on calorimeter, y coordinate (cm)'),
            expr = cms.string('superCluster().seed().position().y()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        z_calo = cms.PSet(
            doc = cms.string('photon supercluster position on calorimeter, z coordinate (cm)'),
            expr = cms.string('superCluster().seed().position().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.photonsMCMatchForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticles"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11, 22),
    mcStatus = cms.vint32(1),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","photons")
)


process.pileupJetId = cms.EDProducer("PileupJetIdProducer",
    algos = cms.VPSet(
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
                Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
                Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
                Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
                Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
                Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
                Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
                Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
                Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
                Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
                Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
                Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
                Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
                Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
                Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
            ),
            cutBased = cms.bool(False),
            etaBinnedWeights = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('full'),
            nEtaBins = cms.int32(4),
            tmvaMethod = cms.string('JetIDMVAHighPt'),
            tmvaSpectators = cms.vstring(
                'jetPt',
                'jetEta'
            ),
            trainings = cms.VPSet(
                cms.PSet(
                    jEtaMax = cms.double(2.5),
                    jEtaMin = cms.double(0.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta0p0To2p5_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(2.75),
                    jEtaMin = cms.double(2.5),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p5To2p75_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(3.0),
                    jEtaMin = cms.double(2.75),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p75To3p0_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(5.0),
                    jEtaMin = cms.double(3.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'nParticles',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta3p0To5p0_chs_BDT.weights.xml.gz')
                )
            ),
            version = cms.int32(-1)
        ),
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
            ),
            cutBased = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('cutbased')
        )
    ),
    applyJec = cms.bool(True),
    inputIsCorrected = cms.bool(False),
    jec = cms.string('AK4PFchs'),
    jetids = cms.InputTag(""),
    jets = cms.InputTag("ak4PFJetsCHS"),
    produceJetIds = cms.bool(True),
    residualsFromTxt = cms.bool(False),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    runMvas = cms.bool(True),
    srcConstituentWeights = cms.InputTag(""),
    vertexes = cms.InputTag("offlinePrimaryVertices")
)


process.pileupJetIdCalculator = cms.EDProducer("PileupJetIdProducer",
    algos = cms.VPSet(cms.PSet(
        JetIdParams = cms.PSet(
            Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
            Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
        ),
        cutBased = cms.bool(True),
        impactParTkThreshold = cms.double(1.0),
        label = cms.string('cutbased')
    )),
    applyJec = cms.bool(True),
    inputIsCorrected = cms.bool(False),
    jec = cms.string('AK4PFchs'),
    jetids = cms.InputTag(""),
    jets = cms.InputTag("ak4PFJetsCHS"),
    produceJetIds = cms.bool(True),
    residualsFromTxt = cms.bool(False),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    runMvas = cms.bool(False),
    srcConstituentWeights = cms.InputTag(""),
    vertexes = cms.InputTag("offlinePrimaryVertices")
)


process.pileupJetIdEvaluator = cms.EDProducer("PileupJetIdProducer",
    algos = cms.VPSet(
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
                Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
                Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
                Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
                Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
                Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
                Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
                Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
                Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
                Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
                Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
                Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
                Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
                Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
                Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
            ),
            cutBased = cms.bool(False),
            etaBinnedWeights = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('full'),
            nEtaBins = cms.int32(4),
            tmvaMethod = cms.string('JetIDMVAHighPt'),
            tmvaSpectators = cms.vstring(
                'jetPt',
                'jetEta'
            ),
            trainings = cms.VPSet(
                cms.PSet(
                    jEtaMax = cms.double(2.5),
                    jEtaMin = cms.double(0.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta0p0To2p5_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(2.75),
                    jEtaMin = cms.double(2.5),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p5To2p75_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(3.0),
                    jEtaMin = cms.double(2.75),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p75To3p0_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(5.0),
                    jEtaMin = cms.double(3.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'nParticles',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta3p0To5p0_chs_BDT.weights.xml.gz')
                )
            ),
            version = cms.int32(-1)
        ),
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
            ),
            cutBased = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('cutbased')
        )
    ),
    applyJec = cms.bool(True),
    inputIsCorrected = cms.bool(False),
    jec = cms.string('AK4PFchs'),
    jetids = cms.InputTag("pileupJetIdCalculator"),
    jets = cms.InputTag("ak4PFJetsCHS"),
    produceJetIds = cms.bool(False),
    residualsFromTxt = cms.bool(False),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    runMvas = cms.bool(True),
    srcConstituentWeights = cms.InputTag(""),
    vertexes = cms.InputTag("offlinePrimaryVertices")
)


process.pileupJetIdNano = cms.EDProducer("PileupJetIdProducer",
    algos = cms.VPSet(
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
                Pt010_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
                Pt010_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
                Pt1020_Loose = cms.vdouble(-0.95, -0.72, -0.68, -0.47),
                Pt1020_Medium = cms.vdouble(0.26, -0.33, -0.54, -0.37),
                Pt1020_Tight = cms.vdouble(0.77, 0.38, -0.31, -0.21),
                Pt2030_Loose = cms.vdouble(-0.88, -0.55, -0.6, -0.43),
                Pt2030_Medium = cms.vdouble(0.68, -0.04, -0.43, -0.3),
                Pt2030_Tight = cms.vdouble(0.9, 0.6, -0.12, -0.13),
                Pt3040_Loose = cms.vdouble(-0.63, -0.18, -0.43, -0.24),
                Pt3040_Medium = cms.vdouble(0.9, 0.36, -0.16, -0.09),
                Pt3040_Tight = cms.vdouble(0.96, 0.82, 0.2, 0.09),
                Pt4050_Loose = cms.vdouble(-0.19, 0.22, -0.13, -0.03),
                Pt4050_Medium = cms.vdouble(0.96, 0.61, 0.14, 0.12),
                Pt4050_Tight = cms.vdouble(0.98, 0.92, 0.47, 0.29)
            ),
            cutBased = cms.bool(False),
            etaBinnedWeights = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('full'),
            nEtaBins = cms.int32(4),
            tmvaMethod = cms.string('JetIDMVAHighPt'),
            tmvaSpectators = cms.vstring(
                'jetPt',
                'jetEta'
            ),
            trainings = cms.VPSet(
                cms.PSet(
                    jEtaMax = cms.double(2.5),
                    jEtaMin = cms.double(0.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta0p0To2p5_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(2.75),
                    jEtaMin = cms.double(2.5),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p5To2p75_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(3.0),
                    jEtaMin = cms.double(2.75),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta2p75To3p0_chs_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(5.0),
                    jEtaMin = cms.double(3.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'nParticles',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_UL18_Eta3p0To5p0_chs_BDT.weights.xml.gz')
                )
            ),
            version = cms.int32(-1)
        ),
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
            ),
            cutBased = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('cutbased')
        )
    ),
    applyJec = cms.bool(False),
    inputIsCorrected = cms.bool(True),
    jec = cms.string('AK4PFchs'),
    jetids = cms.InputTag(""),
    jets = cms.InputTag("updatedJets"),
    produceJetIds = cms.bool(True),
    residualsFromTxt = cms.bool(False),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    runMvas = cms.bool(True),
    srcConstituentWeights = cms.InputTag(""),
    vertexes = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.pileupJetIdPuppi = cms.EDProducer("PileupJetIdProducer",
    algos = cms.VPSet(
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_Loose = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
                Pt010_Medium = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
                Pt010_Tight = cms.vdouble(-1.0, -1.0, -1.0, -1.0),
                Pt1020_Loose = cms.vdouble(-0.723, -0.392, -0.277, -0.516),
                Pt1020_Medium = cms.vdouble(-0.2, -0.068, -0.158, -0.384),
                Pt1020_Tight = cms.vdouble(0.038, 0.219, -0.22, -0.254),
                Pt2030_Loose = cms.vdouble(-0.548, -0.347, -0.313, -0.489),
                Pt2030_Medium = cms.vdouble(-0.109, -0.179, -0.293, -0.322),
                Pt2030_Tight = cms.vdouble(0.033, 0.06, -0.154, -0.154),
                Pt3040_Loose = cms.vdouble(-0.413, -0.289, -0.322, -0.438),
                Pt3040_Medium = cms.vdouble(-0.043, -0.124, -0.259, -0.286),
                Pt3040_Tight = cms.vdouble(0.056, 0.103, -0.159, -0.109),
                Pt4050_Loose = cms.vdouble(-0.279, -0.219, -0.279, -0.384),
                Pt4050_Medium = cms.vdouble(-0.034, -0.071, -0.198, -0.235),
                Pt4050_Tight = cms.vdouble(0.043, 0.127, -0.067, -0.059)
            ),
            cutBased = cms.bool(False),
            etaBinnedWeights = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('full'),
            nEtaBins = cms.int32(4),
            tmvaMethod = cms.string('JetIDMVAHighPt'),
            tmvaSpectators = cms.vstring(
                'jetPt',
                'jetEta'
            ),
            trainings = cms.VPSet(
                cms.PSet(
                    jEtaMax = cms.double(2.5),
                    jEtaMin = cms.double(0.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta0p0To2p5_puppiV18_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(2.75),
                    jEtaMin = cms.double(2.5),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta2p5To2p75_puppiV18_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(3.0),
                    jEtaMin = cms.double(2.75),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'beta',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'jetRchg',
                        'nParticles',
                        'nCharged',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta2p75To3p0_puppiV18_BDT.weights.xml.gz')
                ),
                cms.PSet(
                    jEtaMax = cms.double(5.0),
                    jEtaMin = cms.double(3.0),
                    tmvaVariables = cms.vstring(
                        'nvtx',
                        'dR2Mean',
                        'frac01',
                        'frac02',
                        'frac03',
                        'frac04',
                        'majW',
                        'minW',
                        'jetR',
                        'nParticles',
                        'ptD',
                        'pull'
                    ),
                    tmvaWeights = cms.FileInPath('RecoJets/JetProducers/data/pileupJetId_133X_Winter24_Eta3p0To5p0_puppiV18_BDT.weights.xml.gz')
                )
            ),
            version = cms.int32(-1)
        ),
        cms.PSet(
            JetIdParams = cms.PSet(
                Pt010_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt010_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt1020_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt2030_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt3040_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_BetaStarTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSLoose = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSMedium = cms.vdouble(-999.0, -999.0, -999.0, -999.0),
                Pt4050_RMSTight = cms.vdouble(-999.0, -999.0, -999.0, -999.0)
            ),
            cutBased = cms.bool(True),
            impactParTkThreshold = cms.double(1.0),
            label = cms.string('cutbased')
        )
    ),
    applyJec = cms.bool(True),
    inputIsCorrected = cms.bool(False),
    jec = cms.string('AK4PFPuppi'),
    jetids = cms.InputTag(""),
    jets = cms.InputTag("ak4PFJetsPuppi"),
    produceJetIds = cms.bool(True),
    residualsFromTxt = cms.bool(False),
    rho = cms.InputTag("fixedGridRhoFastjetAll"),
    runMvas = cms.bool(True),
    srcConstituentWeights = cms.InputTag("packedpuppi"),
    vertexes = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.prefiringweight = cms.EDProducer("L1PrefiringWeightProducer",
    DataEraECAL = cms.string('2017BtoF'),
    DataEraMuon = cms.string('2016'),
    JetMaxMuonFraction = cms.double(0.5),
    L1Maps = cms.string('L1PrefiringMaps.root'),
    L1MuonParametrizations = cms.string('L1MuonPrefiringParametriations.root'),
    PrefiringRateSystematicUnctyECAL = cms.double(0.2),
    PrefiringRateSystematicUnctyMuon = cms.double(0.2),
    TheJets = cms.InputTag("slimmedJets"),
    TheMuons = cms.InputTag("slimmedMuons"),
    ThePhotons = cms.InputTag("slimmedPhotons"),
    UseJetEMPt = cms.bool(False),
    mightGet = cms.optional.untracked.vstring
)


process.protonTable = cms.EDProducer("ProtonProducer",
    storeSingleRPProtons = cms.bool(True),
    tagRecoProtonsMulti = cms.InputTag("ctppsProtons","multiRP"),
    tagRecoProtonsSingle = cms.InputTag("ctppsProtons","singleRP"),
    tagTrackLite = cms.InputTag("ctppsLocalTrackLiteProducer")
)


process.ptRatioRelForEle = cms.EDProducer("ElectronJetVarProducer",
    srcJet = cms.InputTag("updatedJetsPuppi"),
    srcLep = cms.InputTag("slimmedElectrons"),
    srcVtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.ptRatioRelForMu = cms.EDProducer("MuonJetVarProducer",
    srcJet = cms.InputTag("updatedJetsPuppi"),
    srcLep = cms.InputTag("slimmedMuonsUpdated"),
    srcVtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.puTable = cms.EDProducer("NPUTablesProducer",
    pvsrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    savePtHatMax = cms.bool(True),
    src = cms.InputTag("slimmedAddPileupInfo"),
    zbins = cms.vdouble(
        0.0, 1.7, 2.6, 3.0, 3.5,
        4.2, 5.2, 6.0, 7.5, 9.0,
        12.0
    )
)


process.puppiMetTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('PUPPI  MET'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('PuppiMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETsPuppi"),
    variables = cms.PSet(
        covXX = cms.PSet(
            doc = cms.string('xx element of met covariance matrix'),
            expr = cms.string('getSignificanceMatrix().At(0,0)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        covXY = cms.PSet(
            doc = cms.string('xy element of met covariance matrix'),
            expr = cms.string('getSignificanceMatrix().At(0,1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        covYY = cms.PSet(
            doc = cms.string('yy element of met covariance matrix'),
            expr = cms.string('getSignificanceMatrix().At(1,1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        phiUnclusteredDown = cms.PSet(
            doc = cms.string('Unclustered down phi'),
            expr = cms.string("shiftedPhi(\'UnclusteredEnDown\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phiUnclusteredUp = cms.PSet(
            doc = cms.string('Unclustered up phi'),
            expr = cms.string("shiftedPhi(\'UnclusteredEnUp\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptUnclusteredDown = cms.PSet(
            doc = cms.string('Unclustered down pt'),
            expr = cms.string("shiftedPt(\'UnclusteredEnDown\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        ptUnclusteredUp = cms.PSet(
            doc = cms.string('Unclustered up pt'),
            expr = cms.string("shiftedPt(\'UnclusteredEnUp\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        significance = cms.PSet(
            doc = cms.string('MET significance'),
            expr = cms.string('metSignificance()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sumEt = cms.PSet(
            doc = cms.string('scalar sum of Et'),
            expr = cms.string('sumEt()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sumPtUnclustered = cms.PSet(
            doc = cms.string('sumPt used for MET significance'),
            expr = cms.string('metSumPtUnclustered()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.pvbsTable = cms.EDProducer("SimpleVertexFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('main primary vertex with beam-spot'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.uint32(1),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('PVBS'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("offlineSlimmedPrimaryVerticesWithBS"),
    variables = cms.PSet(
        chi2 = cms.PSet(
            doc = cms.string('reduced chi2, i.e. chi2/ndof'),
            expr = cms.string('normalizedChi2()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        cov00 = cms.PSet(
            doc = cms.string('vertex covariance (0,0)'),
            expr = cms.string('covariance(0,0)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        cov10 = cms.PSet(
            doc = cms.string('vertex covariance (1,0)'),
            expr = cms.string('covariance(1,0)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        cov11 = cms.PSet(
            doc = cms.string('vertex covariance (1,1)'),
            expr = cms.string('covariance(1,1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        cov20 = cms.PSet(
            doc = cms.string('vertex covariance (2,0)'),
            expr = cms.string('covariance(2,0)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        cov21 = cms.PSet(
            doc = cms.string('vertex covariance (2,1)'),
            expr = cms.string('covariance(2,1)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        cov22 = cms.PSet(
            doc = cms.string('vertex covariance (2,2)'),
            expr = cms.string('covariance(2,2)'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        x = cms.PSet(
            doc = cms.string('position x coordinate, in cm'),
            expr = cms.string('position().x()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        y = cms.PSet(
            doc = cms.string('position y coordinate, in cm'),
            expr = cms.string('position().y()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        z = cms.PSet(
            doc = cms.string('position z coordinate, in cm'),
            expr = cms.string('position().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(16),
            type = cms.string('float')
        )
    )
)


process.qgtagger = cms.EDProducer("QGTagger",
    computeLikelihood = cms.bool(True),
    jec = cms.InputTag(""),
    jetsLabel = cms.string('QGL_AK4PFchs'),
    mightGet = cms.optional.untracked.vstring,
    srcConstituentWeights = cms.InputTag(""),
    srcJets = cms.InputTag("updatedJets"),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll"),
    srcVertexCollection = cms.InputTag("offlineSlimmedPrimaryVertices"),
    systematicsLabel = cms.string(''),
    useQualityCuts = cms.bool(False)
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.rawMetTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('raw PF MET'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('RawPFMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('uncorPhi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('uncorPt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        sumEt = cms.PSet(
            doc = cms.string('scalar sum of Et'),
            expr = cms.string('uncorSumEt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.rawPuppiMetTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('raw Puppi MET'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('RawPuppiMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETsPuppi"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('uncorPhi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('uncorPt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        sumEt = cms.PSet(
            doc = cms.string('scalar sum of Et'),
            expr = cms.string('uncorSumEt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.refittedPV = cms.EDProducer("PATRefitVertexProducer",
    mightGet = cms.optional.untracked.vstring,
    srcBeamSpot = cms.InputTag("offlineBeamSpot"),
    srcCands = cms.InputTag("packedPFCandidates"),
    srcEleKfTracks = cms.InputTag("lostTracks","eleTracks"),
    srcLostTracks = cms.InputTag("lostTracks"),
    srcVertices = cms.InputTag("offlineSlimmedPrimaryVertices"),
    useBeamSpot = cms.bool(True),
    useEleKfTracks = cms.bool(True),
    useLostTracks = cms.bool(True)
)


process.rhoTable = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Rho'),
    variables = cms.PSet(
        fixedGridRhoAll = cms.PSet(
            doc = cms.string('rho from all PF Candidates, no foreground removal (for isolation of prompt photons)'),
            precision = cms.int32(-1),
            src = cms.InputTag("fixedGridRhoAll"),
            type = cms.string('double')
        ),
        fixedGridRhoFastjetAll = cms.PSet(
            doc = cms.string('rho from all PF Candidates, used e.g. for JECs'),
            precision = cms.int32(-1),
            src = cms.InputTag("fixedGridRhoFastjetAll"),
            type = cms.string('double')
        ),
        fixedGridRhoFastjetCentral = cms.PSet(
            doc = cms.string('rho from all PF Candidates for central region, used e.g. for JECs'),
            precision = cms.int32(-1),
            src = cms.InputTag("fixedGridRhoFastjetCentral"),
            type = cms.string('double')
        ),
        fixedGridRhoFastjetCentralCalo = cms.PSet(
            doc = cms.string('rho from calo towers with |eta| < 2.5, used e.g. egamma PFCluster isolation'),
            precision = cms.int32(-1),
            src = cms.InputTag("fixedGridRhoFastjetCentralCalo"),
            type = cms.string('double')
        ),
        fixedGridRhoFastjetCentralChargedPileUp = cms.PSet(
            doc = cms.string('rho from charged PF Candidates for central region, used e.g. for JECs'),
            precision = cms.int32(-1),
            src = cms.InputTag("fixedGridRhoFastjetCentralChargedPileUp"),
            type = cms.string('double')
        ),
        fixedGridRhoFastjetCentralNeutral = cms.PSet(
            doc = cms.string('rho from neutral PF Candidates with |eta| < 2.5, used e.g. for rho corrections of some lepton isolations'),
            precision = cms.int32(-1),
            src = cms.InputTag("fixedGridRhoFastjetCentralNeutral"),
            type = cms.string('double')
        )
    )
)


process.rivetLeptonTable = cms.EDProducer("SimpleCandidateFlatTableProducer",
    cut = cms.string('pt > 10'),
    doc = cms.string('Dressed leptons from Rivet-based ParticleLevelProducer'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        hasTauAnc = cms.PSet(
            doc = cms.string('true if Dressed lepton has a tau as ancestor'),
            precision = cms.int32(-1),
            src = cms.InputTag("tautagger"),
            type = cms.string('bool')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenDressedLepton'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("particleLevel","leptons"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG id'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.rivetMetTable = cms.EDProducer("SimpleCandidateFlatTableProducer",
    doc = cms.string('MET from Rivet-based ParticleLevelProducer in fiducial volume abs(eta)<5'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('FiducialMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("particleLevel","mets"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.rivetPhotonTable = cms.EDProducer("SimpleCandidateFlatTableProducer",
    cut = cms.string('pt > 10'),
    doc = cms.string('Isolated photons from Rivet-based ParticleLevelProducer'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('GenIsolatedPhoton'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("particleLevel","photons"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        )
    )
)


process.rivetProducerHTXS = cms.EDProducer("HTXSRivetProducer",
    HepMCCollection = cms.InputTag("genParticles2HepMCHiggsVtx","unsmeared"),
    LHERunInfo = cms.InputTag("externalLHEProducer"),
    ProductionMode = cms.string('AUTO')
)


process.saJetTable = cms.EDProducer("SimpleCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('jets clustered from charged candidates compatible with primary vertex (charge()!=0 && pvAssociationQuality()>=5 && vertexRef().key()==0)'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.uint32(6),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('SoftActivityJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("softActivityJets"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.saTable = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string(''),
    variables = cms.PSet(
        SoftActivityJetHT = cms.PSet(
            doc = cms.string('scalar sum of soft activity jet pt, pt>1'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets"),
            type = cms.string('candidatescalarsum')
        ),
        SoftActivityJetHT10 = cms.PSet(
            doc = cms.string('scalar sum of soft activity jet pt , pt >10'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets10"),
            type = cms.string('candidatescalarsum')
        ),
        SoftActivityJetHT2 = cms.PSet(
            doc = cms.string('scalar sum of soft activity jet pt, pt >2'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets2"),
            type = cms.string('candidatescalarsum')
        ),
        SoftActivityJetHT5 = cms.PSet(
            doc = cms.string('scalar sum of soft activity jet pt, pt>5'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets5"),
            type = cms.string('candidatescalarsum')
        ),
        SoftActivityJetNjets10 = cms.PSet(
            doc = cms.string('number of soft activity jet pt, pt >2'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets10"),
            type = cms.string('candidatesize')
        ),
        SoftActivityJetNjets2 = cms.PSet(
            doc = cms.string('number of soft activity jet pt, pt >10'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets2"),
            type = cms.string('candidatesize')
        ),
        SoftActivityJetNjets5 = cms.PSet(
            doc = cms.string('number of soft activity jet pt, pt >5'),
            precision = cms.int32(-1),
            src = cms.InputTag("softActivityJets5"),
            type = cms.string('candidatesize')
        )
    )
)


process.seedGainEle = cms.EDProducer("ElectronSeedGainProducer",
    src = cms.InputTag("slimmedElectrons")
)


process.seedGainPho = cms.EDProducer("PhotonSeedGainProducer",
    src = cms.InputTag("slimmedPhotons")
)


process.shiftedPatElectronEnDownPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(-1.0),
    src = cms.InputTag("pfElectronsPuppi"),
    srcWeights = cms.InputTag(""),
    uncertainty = cms.string('((abs(y)<1.479)?(0.006+0*x):(0.015+0*x))')
)


process.shiftedPatElectronEnUpPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(1.0),
    src = cms.InputTag("pfElectronsPuppi"),
    srcWeights = cms.InputTag(""),
    uncertainty = cms.string('((abs(y)<1.479)?(0.006+0*x):(0.015+0*x))')
)


process.shiftedPatJetEnDownPuppi = cms.EDProducer("ShiftedPATJetProducer",
    addResidualJES = cms.bool(True),
    jetCorrLabelUpToL3 = cms.InputTag("ak4PFPuppiL1FastL2L3Corrector"),
    jetCorrLabelUpToL3Res = cms.InputTag("ak4PFPuppiL1FastL2L3ResidualCorrector"),
    jetCorrPayloadName = cms.string('AK4PFPuppi'),
    jetCorrUncertaintyTag = cms.string('Uncertainty'),
    shiftBy = cms.double(-1.0),
    src = cms.InputTag("cleanedPatJetsPuppi")
)


process.shiftedPatJetEnUpPuppi = cms.EDProducer("ShiftedPATJetProducer",
    addResidualJES = cms.bool(True),
    jetCorrLabelUpToL3 = cms.InputTag("ak4PFPuppiL1FastL2L3Corrector"),
    jetCorrLabelUpToL3Res = cms.InputTag("ak4PFPuppiL1FastL2L3ResidualCorrector"),
    jetCorrPayloadName = cms.string('AK4PFPuppi'),
    jetCorrUncertaintyTag = cms.string('Uncertainty'),
    shiftBy = cms.double(1.0),
    src = cms.InputTag("cleanedPatJetsPuppi")
)


process.shiftedPatMETCorrElectronEnDownPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfElectronsPuppi"),
    srcShifted = cms.InputTag("shiftedPatElectronEnDownPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrElectronEnUpPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfElectronsPuppi"),
    srcShifted = cms.InputTag("shiftedPatElectronEnUpPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrJetEnDownPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("cleanedPatJetsPuppi"),
    srcShifted = cms.InputTag("shiftedPatJetEnDownPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrJetEnUpPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("cleanedPatJetsPuppi"),
    srcShifted = cms.InputTag("shiftedPatJetEnUpPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrMuonEnDownPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfMuonsPuppi"),
    srcShifted = cms.InputTag("shiftedPatMuonEnDownPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrMuonEnUpPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfMuonsPuppi"),
    srcShifted = cms.InputTag("shiftedPatMuonEnUpPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrPhotonEnDownPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfPhotonsPuppi"),
    srcShifted = cms.InputTag("shiftedPatPhotonEnDownPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.shiftedPatMETCorrPhotonEnUpPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfPhotonsPuppi"),
    srcShifted = cms.InputTag("shiftedPatPhotonEnUpPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.shiftedPatMETCorrTauEnDownPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfTausPuppi"),
    srcShifted = cms.InputTag("shiftedPatTauEnDownPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrTauEnUpPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfTausPuppi"),
    srcShifted = cms.InputTag("shiftedPatTauEnUpPuppi"),
    srcWeights = cms.InputTag("")
)


process.shiftedPatMETCorrUnclusteredEnDownPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfCandsForUnclusteredUncPuppi"),
    srcShifted = cms.InputTag("shiftedPatUnclusteredEnDownPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.shiftedPatMETCorrUnclusteredEnUpPuppi = cms.EDProducer("ShiftedParticleMETcorrInputProducer",
    srcOriginal = cms.InputTag("pfCandsForUnclusteredUncPuppi"),
    srcShifted = cms.InputTag("shiftedPatUnclusteredEnUpPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.shiftedPatMuonEnDownPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(-1.0),
    src = cms.InputTag("pfMuonsPuppi"),
    srcWeights = cms.InputTag(""),
    uncertainty = cms.string('((x<100)?(0.002+0*y):(0.05+0*y))')
)


process.shiftedPatMuonEnUpPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(1.0),
    src = cms.InputTag("pfMuonsPuppi"),
    srcWeights = cms.InputTag(""),
    uncertainty = cms.string('((x<100)?(0.002+0*y):(0.05+0*y))')
)


process.shiftedPatPhotonEnDownPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(-1.0),
    src = cms.InputTag("pfPhotonsPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep"),
    uncertainty = cms.string('((abs(y)<1.479)?(0.01+0*x):(0.025+0*x))')
)


process.shiftedPatPhotonEnUpPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(1.0),
    src = cms.InputTag("pfPhotonsPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep"),
    uncertainty = cms.string('((abs(y)<1.479)?(0.01+0*x):(0.025+0*x))')
)


process.shiftedPatTauEnDownPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(-1.0),
    src = cms.InputTag("pfTausPuppi"),
    srcWeights = cms.InputTag(""),
    uncertainty = cms.string('0.03+0*x*y')
)


process.shiftedPatTauEnUpPuppi = cms.EDProducer("ShiftedParticleProducer",
    shiftBy = cms.double(1.0),
    src = cms.InputTag("pfTausPuppi"),
    srcWeights = cms.InputTag(""),
    uncertainty = cms.string('0.03+0*x*y')
)


process.shiftedPatUnclusteredEnDownPuppi = cms.EDProducer("ShiftedParticleProducer",
    binning = cms.VPSet(
        cms.PSet(
            binSelection = cms.string('charge!=0'),
            binUncertainty = cms.string('sqrt(pow(0.00009*x,2)+pow(0.0085/sqrt(sin(2*atan(exp(-y)))),2))')
        ),
        cms.PSet(
            binSelection = cms.string('pdgId==130'),
            binUncertainty = cms.string('((abs(y)<1.3)?(min(0.25,sqrt(0.64/x+0.0025))):(min(0.30,sqrt(1.0/x+0.0016))))'),
            energyDependency = cms.bool(True)
        ),
        cms.PSet(
            binSelection = cms.string('pdgId==22'),
            binUncertainty = cms.string('sqrt(0.0009/x+0.000001)+0*y'),
            energyDependency = cms.bool(True)
        ),
        cms.PSet(
            binSelection = cms.string('pdgId==1 || pdgId==2'),
            binUncertainty = cms.string('sqrt(1./x+0.0025)+0*y'),
            energyDependency = cms.bool(True)
        )
    ),
    shiftBy = cms.double(-1.0),
    src = cms.InputTag("pfCandsForUnclusteredUncPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.shiftedPatUnclusteredEnUpPuppi = cms.EDProducer("ShiftedParticleProducer",
    binning = cms.VPSet(
        cms.PSet(
            binSelection = cms.string('charge!=0'),
            binUncertainty = cms.string('sqrt(pow(0.00009*x,2)+pow(0.0085/sqrt(sin(2*atan(exp(-y)))),2))')
        ),
        cms.PSet(
            binSelection = cms.string('pdgId==130'),
            binUncertainty = cms.string('((abs(y)<1.3)?(min(0.25,sqrt(0.64/x+0.0025))):(min(0.30,sqrt(1.0/x+0.0016))))'),
            energyDependency = cms.bool(True)
        ),
        cms.PSet(
            binSelection = cms.string('pdgId==22'),
            binUncertainty = cms.string('sqrt(0.0009/x+0.000001)+0*y'),
            energyDependency = cms.bool(True)
        ),
        cms.PSet(
            binSelection = cms.string('pdgId==1 || pdgId==2'),
            binUncertainty = cms.string('sqrt(1./x+0.0025)+0*y'),
            energyDependency = cms.bool(True)
        )
    ),
    shiftBy = cms.double(1.0),
    src = cms.InputTag("pfCandsForUnclusteredUncPuppi"),
    srcWeights = cms.InputTag("packedpuppiNoLep")
)


process.simpleBeamspotFlatTableProducer = cms.EDProducer("SimpleBeamspotFlatTableProducer",
    doc = cms.string(''),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleCandidateFlatTableProducer = cms.EDProducer("SimpleCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleGenEventFlatTableProducer = cms.EDProducer("SimpleGenEventFlatTableProducer",
    doc = cms.string(''),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleGenFilterFlatTableProducerLumi = cms.EDProducer("SimpleGenFilterFlatTableProducerLumi",
    doc = cms.string(''),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleGenJetFlatTableProducer = cms.EDProducer("SimpleGenJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleGenParticleFlatTableProducer = cms.EDProducer("SimpleGenParticleFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleHTXSFlatTableProducer = cms.EDProducer("SimpleHTXSFlatTableProducer",
    doc = cms.string(''),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATElectronFlatTableProducer = cms.EDProducer("SimplePATElectronFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATGenericParticleFlatTableProducer = cms.EDProducer("SimplePATGenericParticleFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATIsolatedTrackFlatTableProducer = cms.EDProducer("SimplePATIsolatedTrackFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATJetFlatTableProducer = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATMETFlatTableProducer = cms.EDProducer("SimplePATMETFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATMuonFlatTableProducer = cms.EDProducer("SimplePATMuonFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATPhotonFlatTableProducer = cms.EDProducer("SimplePATPhotonFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simplePATTauFlatTableProducer = cms.EDProducer("SimplePATTauFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleProtonTrackFlatTableProducer = cms.EDProducer("SimpleProtonTrackFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleSecondaryVertexFlatTableProducer = cms.EDProducer("SimpleSecondaryVertexFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleSingletonCandidateFlatTableProducer = cms.EDProducer("SimpleCandidateFlatTableProducer",
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleSingletonPATMETFlatTableProducer = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string(''),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.simpleXYZPointFlatTableProducer = cms.EDProducer("SimpleXYZPointFlatTableProducer",
    doc = cms.string(''),
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    skipNonExistingSrc = cms.bool(False),
    src = cms.required.InputTag,
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.singleRPTable = cms.EDProducer("SimpleProtonTrackFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('bon'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(
        decRPId = cms.PSet(
            doc = cms.string('Detector ID'),
            precision = cms.int32(-1),
            src = cms.InputTag("protonTable","protonRPId"),
            type = cms.string('int16')
        )
    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Proton_singleRP'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(True),
    src = cms.InputTag("ctppsProtons","singleRP"),
    variables = cms.PSet(
        thetaY = cms.PSet(
            doc = cms.string('th y'),
            expr = cms.string('thetaY'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        xi = cms.PSet(
            doc = cms.string('xi or dp/p'),
            expr = cms.string('xi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        )
    )
)


process.slimmedElectronsWithUserData = cms.EDProducer("PATElectronUserDataEmbedder",
    parentSrcs = cms.VInputTag("reducedEgamma:reducedGedGsfElectrons"),
    src = cms.InputTag("slimmedElectrons"),
    userCands = cms.PSet(
        jetForLepJetVar = cms.InputTag("ptRatioRelForEle","jetForLepJetVar")
    ),
    userFloats = cms.PSet(
        PFIsoAll = cms.InputTag("isoForEle","PFIsoAll"),
        PFIsoAll04 = cms.InputTag("isoForEle","PFIsoAll04"),
        PFIsoAll04_Fall17V2 = cms.InputTag("isoForEleFall17V2","PFIsoAll04"),
        PFIsoAll_Fall17V2 = cms.InputTag("isoForEleFall17V2","PFIsoAll"),
        PFIsoChg = cms.InputTag("isoForEle","PFIsoChg"),
        PFIsoChg_Fall17V2 = cms.InputTag("isoForEleFall17V2","PFIsoChg"),
        jetNDauChargedMVASel = cms.InputTag("ptRatioRelForEle","jetNDauChargedMVASel"),
        miniIsoAll = cms.InputTag("isoForEle","miniIsoAll"),
        miniIsoAll_Fall17V2 = cms.InputTag("isoForEleFall17V2","miniIsoAll"),
        miniIsoChg = cms.InputTag("isoForEle","miniIsoChg"),
        miniIsoChg_Fall17V2 = cms.InputTag("isoForEleFall17V2","miniIsoChg"),
        mvaHZZIso = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Winter22HZZV1Values"),
        mvaIso = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22IsoV1Values"),
        mvaIso_Fall17V2 = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17IsoV2Values"),
        mvaNoIso = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2RunIIIWinter22NoIsoV1Values"),
        mvaNoIso_Fall17V2 = cms.InputTag("electronMVAValueMapProducer","ElectronMVAEstimatorRun2Fall17NoIsoV2Values"),
        ptRatio = cms.InputTag("ptRatioRelForEle","ptRatio"),
        ptRel = cms.InputTag("ptRatioRelForEle","ptRel")
    ),
    userIntFromBools = cms.PSet(
        cutBasedID_Fall17V2_loose = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-Fall17-94X-V2-loose"),
        cutBasedID_Fall17V2_medium = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-Fall17-94X-V2-medium"),
        cutBasedID_Fall17V2_tight = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-Fall17-94X-V2-tight"),
        cutBasedID_Fall17V2_veto = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-Fall17-94X-V2-veto"),
        cutBasedID_HEEP = cms.InputTag("egmGsfElectronIDs","heepElectronID-HEEPV70"),
        cutBasedID_loose = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-RunIIIWinter22-V1-loose"),
        cutBasedID_medium = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-RunIIIWinter22-V1-medium"),
        cutBasedID_tight = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-RunIIIWinter22-V1-tight"),
        cutBasedID_veto = cms.InputTag("egmGsfElectronIDs","cutBasedElectronID-RunIIIWinter22-V1-veto"),
        mvaIso_Fall17V2_WP80 = cms.InputTag("egmGsfElectronIDs","mvaEleID-Fall17-iso-V2-wp80"),
        mvaIso_Fall17V2_WP90 = cms.InputTag("egmGsfElectronIDs","mvaEleID-Fall17-iso-V2-wp90"),
        mvaIso_Fall17V2_WPL = cms.InputTag("egmGsfElectronIDs","mvaEleID-Fall17-iso-V2-wpLoose"),
        mvaIso_WP80 = cms.InputTag("egmGsfElectronIDs","mvaEleID-RunIIIWinter22-iso-V1-wp80"),
        mvaIso_WP90 = cms.InputTag("egmGsfElectronIDs","mvaEleID-RunIIIWinter22-iso-V1-wp90"),
        mvaIso_WPHZZ = cms.InputTag("egmGsfElectronIDs","mvaEleID-Winter22-HZZ-V1"),
        mvaNoIso_Fall17V2_WP80 = cms.InputTag("egmGsfElectronIDs","mvaEleID-Fall17-noIso-V2-wp80"),
        mvaNoIso_Fall17V2_WP90 = cms.InputTag("egmGsfElectronIDs","mvaEleID-Fall17-noIso-V2-wp90"),
        mvaNoIso_Fall17V2_WPL = cms.InputTag("egmGsfElectronIDs","mvaEleID-Fall17-noIso-V2-wpLoose"),
        mvaNoIso_WP80 = cms.InputTag("egmGsfElectronIDs","mvaEleID-RunIIIWinter22-noIso-V1-wp80"),
        mvaNoIso_WP90 = cms.InputTag("egmGsfElectronIDs","mvaEleID-RunIIIWinter22-noIso-V1-wp90")
    ),
    userInts = cms.PSet(
        VIDNestedWPBitmap = cms.InputTag("bitmapVIDForEle"),
        VIDNestedWPBitmapHEEP = cms.InputTag("bitmapVIDForEleHEEP"),
        VIDNestedWPBitmap_Fall17V2 = cms.InputTag("bitmapVIDForEleFall17V2"),
        seedGain = cms.InputTag("seedGainEle")
    )
)


process.slimmedJetsAK8NoDeepTags = cms.EDProducer("PATJetSlimmer",
    dropDaughters = cms.string('pt < 170'),
    dropJetVars = cms.string('1'),
    dropSpecific = cms.string('pt < 170'),
    dropTagInfos = cms.string('pt < 170'),
    dropTrackRefs = cms.string('1'),
    mixedDaughters = cms.bool(False),
    modifierConfig = cms.PSet(
        modifications = cms.VPSet()
    ),
    modifyJets = cms.bool(True),
    packedPFCandidates = cms.InputTag("packedPFCandidates"),
    rekeyDaughters = cms.string('0'),
    src = cms.InputTag("packedPatJetsAK8")
)


process.slimmedJetsAK8PFPuppiSoftDropPacked = cms.EDProducer("BoostedJetMerger",
    jetSrc = cms.InputTag("selectedPatJetsAK8PFPuppiSoftDrop"),
    subjetSrc = cms.InputTag("selectedUpdatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
)


process.slimmedJetsAK8PFPuppiSoftDropSubjetsNoDeepTags = cms.EDProducer("PATJetSlimmer",
    dropDaughters = cms.string('0'),
    dropJetVars = cms.string('1'),
    dropSpecific = cms.string('1'),
    dropTagInfos = cms.string('1'),
    dropTrackRefs = cms.string('1'),
    mixedDaughters = cms.bool(False),
    modifierConfig = cms.PSet(
        modifications = cms.VPSet()
    ),
    modifyJets = cms.bool(True),
    packedPFCandidates = cms.InputTag("packedPFCandidates"),
    rekeyDaughters = cms.string('0'),
    src = cms.InputTag("selectedPatJetsAK8PFPuppiSoftDropSubjets")
)


process.slimmedJetsPuppiNoDeepTags = cms.EDProducer("PATJetSlimmer",
    dropDaughters = cms.string('0'),
    dropJetVars = cms.string('1'),
    dropSpecific = cms.string('0'),
    dropTagInfos = cms.string('1'),
    dropTrackRefs = cms.string('1'),
    mixedDaughters = cms.bool(False),
    modifierConfig = cms.PSet(
        modifications = cms.VPSet()
    ),
    modifyJets = cms.bool(True),
    packedPFCandidates = cms.InputTag("packedPFCandidates"),
    rekeyDaughters = cms.string('0'),
    src = cms.InputTag("selectedPatJetsPuppi")
)


process.slimmedMETsPuppi = cms.EDProducer("PATMETSlimmer",
    addDeepMETs = cms.bool(False),
    caloMET = cms.InputTag("patCaloMet"),
    chsMET = cms.InputTag("patCHSMet"),
    deepMETResolutionTune = cms.InputTag("deepMETsResolutionTune"),
    deepMETResponseTune = cms.InputTag("deepMETsResponseTune"),
    rawVariation = cms.InputTag("patPFMetPuppi"),
    runningOnMiniAOD = cms.bool(True),
    src = cms.InputTag("patPFMetT1Puppi"),
    t01Variation = cms.InputTag("slimmedMETsPuppi","","@skipCurrentProcess"),
    t1SmearedVarsAndUncs = cms.InputTag("patPFMetT1Smear%sPuppi"),
    t1Uncertainties = cms.InputTag("patPFMetT1%sPuppi"),
    tXYUncForT1 = cms.InputTag("patPFMetT1TxyPuppi"),
    trkMET = cms.InputTag("patTrkMet")
)


process.slimmedMuonsUpdated = cms.EDProducer("PATMuonUpdater",
    computeMiniIso = cms.bool(False),
    fixDxySign = cms.bool(True),
    miniIsoParams = cms.vdouble(
        0.05, 0.2, 10.0, 0.5, 0.0001,
        0.01, 0.01, 0.01, 0.0
    ),
    pfCandsForMiniIso = cms.InputTag("packedPFCandidates"),
    recomputeMuonBasicSelectors = cms.bool(True),
    recomputeSoftMuonMvaRun3 = cms.bool(True),
    softMvaRun3Model = cms.string('RecoMuon/MuonIdentification/data/Run2022-20231030-1731-Event0'),
    src = cms.InputTag("slimmedMuons"),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.slimmedMuonsWithUserData = cms.EDProducer("PATMuonUserDataEmbedder",
    src = cms.InputTag("slimmedMuonsUpdated"),
    userCands = cms.PSet(
        jetForLepJetVar = cms.InputTag("ptRatioRelForMu","jetForLepJetVar")
    ),
    userFloats = cms.PSet(
        jetNDauChargedMVASel = cms.InputTag("ptRatioRelForMu","jetNDauChargedMVASel"),
        miniIsoAll = cms.InputTag("isoForMu","miniIsoAll"),
        miniIsoChg = cms.InputTag("isoForMu","miniIsoChg"),
        mvaIDMuon = cms.InputTag("muonMVAID","probGOOD"),
        mvaIDMuon_wpMedium = cms.InputTag("muonMVAID","wpMedium"),
        mvaIDMuon_wpTight = cms.InputTag("muonMVAID","wpTight"),
        ptRatio = cms.InputTag("ptRatioRelForMu","ptRatio"),
        ptRel = cms.InputTag("ptRatioRelForMu","ptRel")
    )
)


process.slimmedPhotonsWithUserData = cms.EDProducer("PATPhotonUserDataEmbedder",
    parentSrcs = cms.VInputTag("reducedEgamma:reducedGedPhotons"),
    src = cms.InputTag("slimmedPhotons"),
    userFloats = cms.PSet(
        HoverEQuadratic = cms.InputTag("hOverEForPho","HoEForPhoEACorr"),
        PFIsoAllFall17V2 = cms.InputTag("isoForPhoFall17V2","PFIsoAll"),
        PFIsoAllQuadratic = cms.InputTag("isoForPho","PFIsoAllQuadratic"),
        PFIsoChgFall17V2 = cms.InputTag("isoForPhoFall17V2","PFIsoChg"),
        PFIsoChgQuadratic = cms.InputTag("isoForPho","PFIsoChgQuadratic"),
        mvaID = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIIWinter22v1Values"),
        mvaID_Fall17V2 = cms.InputTag("photonMVAValueMapProducer","PhotonMVAEstimatorRunIIFall17v2Values")
    ),
    userIntFromBools = cms.PSet(
        cutBasedID_Fall17V2_loose = cms.InputTag("egmPhotonIDs","cutBasedPhotonID-Fall17-94X-V2-loose"),
        cutBasedID_Fall17V2_medium = cms.InputTag("egmPhotonIDs","cutBasedPhotonID-Fall17-94X-V2-medium"),
        cutBasedID_Fall17V2_tight = cms.InputTag("egmPhotonIDs","cutBasedPhotonID-Fall17-94X-V2-tight"),
        cutBasedID_loose = cms.InputTag("egmPhotonIDs","cutBasedPhotonID-RunIIIWinter22-122X-V1-loose"),
        cutBasedID_medium = cms.InputTag("egmPhotonIDs","cutBasedPhotonID-RunIIIWinter22-122X-V1-medium"),
        cutBasedID_tight = cms.InputTag("egmPhotonIDs","cutBasedPhotonID-RunIIIWinter22-122X-V1-tight"),
        mvaID_Fall17V2_WP80 = cms.InputTag("egmPhotonIDs","mvaPhoID-RunIIFall17-v2-wp80"),
        mvaID_Fall17V2_WP90 = cms.InputTag("egmPhotonIDs","mvaPhoID-RunIIFall17-v2-wp90"),
        mvaID_WP80 = cms.InputTag("egmPhotonIDs","mvaPhoID-RunIIIWinter22-v1-wp80"),
        mvaID_WP90 = cms.InputTag("egmPhotonIDs","mvaPhoID-RunIIIWinter22-v1-wp90")
    ),
    userInts = cms.PSet(
        VIDNestedWPBitmap = cms.InputTag("bitmapVIDForPho"),
        VIDNestedWPBitmapFall17V2 = cms.InputTag("bitmapVIDForPhoRun2"),
        seedGain = cms.InputTag("seedGainPho")
    )
)


process.slimmedTaus = cms.EDProducer("PATTauHybridProducer",
    UTagLabel = cms.string('pfUnifiedParticleTransformerAK4JetTags'),
    UTagScoreNames = cms.vstring(
        'pfUnifiedParticleTransformerAK4JetTags:probb',
        'pfUnifiedParticleTransformerAK4JetTags:probbb',
        'pfUnifiedParticleTransformerAK4JetTags:problepb',
        'pfUnifiedParticleTransformerAK4JetTags:probc',
        'pfUnifiedParticleTransformerAK4JetTags:probs',
        'pfUnifiedParticleTransformerAK4JetTags:probu',
        'pfUnifiedParticleTransformerAK4JetTags:probd',
        'pfUnifiedParticleTransformerAK4JetTags:probg',
        'pfUnifiedParticleTransformerAK4JetTags:probele',
        'pfUnifiedParticleTransformerAK4JetTags:probmu',
        'pfUnifiedParticleTransformerAK4JetTags:probtaup1h0p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaup1h1p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaup1h2p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaup3h0p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaup3h1p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaum1h0p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaum1h1p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaum1h2p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaum3h0p',
        'pfUnifiedParticleTransformerAK4JetTags:probtaum3h1p',
        'pfUnifiedParticleTransformerAK4JetTags:ptcorr',
        'pfUnifiedParticleTransformerAK4JetTags:ptreshigh',
        'pfUnifiedParticleTransformerAK4JetTags:ptreslow',
        'pfUnifiedParticleTransformerAK4JetTags:ptnu',
        'pfUnifiedParticleTransformerAK4JetTags:probemudata',
        'pfUnifiedParticleTransformerAK4JetTags:probemumc',
        'pfUnifiedParticleTransformerAK4JetTags:probdimudata',
        'pfUnifiedParticleTransformerAK4JetTags:probdimumc',
        'pfUnifiedParticleTransformerAK4JetTags:probmutaudata',
        'pfUnifiedParticleTransformerAK4JetTags:probmutaumc'
    ),
    UtagPtCorrName = cms.string('ptcorr'),
    addGenJetMatch = cms.bool(False),
    chargeAssignmentProbMin = cms.double(0.2),
    checkTauScoreIsBest = cms.bool(False),
    dRMax = cms.double(0.4),
    genJetMatch = cms.InputTag(""),
    jetEtaMax = cms.double(2.5),
    jetPtMin = cms.double(15),
    jetSource = cms.InputTag("updatedJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("slimmedTausWithPNetCHS"),
    tagPrefix = cms.string('byUTagPUPPI'),
    tauScoreMin = cms.double(-1),
    usePFLeptonsAsChargedHadrons = cms.bool(True),
    vsJetMin = cms.double(0.05)
)


process.slimmedTausBoosted = cms.EDProducer("PATTauIDEmbedder",
    src = cms.InputTag("slimmedTausBoosted","","@skipCurrentProcess"),
    tauIDSources = cms.PSet(
        byBoostedDeepTau20161718v2p0VSeraw = cms.PSet(
            inputTag = cms.InputTag("boostedDeepTau20161718v2p0BoostedForNano","VSe"),
            workingPointIndex = cms.int32(-1)
        ),
        byBoostedDeepTau20161718v2p0VSjetraw = cms.PSet(
            inputTag = cms.InputTag("boostedDeepTau20161718v2p0BoostedForNano","VSjet"),
            workingPointIndex = cms.int32(-1)
        ),
        byBoostedDeepTau20161718v2p0VSmuraw = cms.PSet(
            inputTag = cms.InputTag("boostedDeepTau20161718v2p0BoostedForNano","VSmu"),
            workingPointIndex = cms.int32(-1)
        )
    )
)


process.slimmedTausWithPNetCHS = cms.EDProducer("PATTauHybridProducer",
    UTagLabel = cms.string('pfParticleNetFromMiniAODAK4CHSCentralJetTags'),
    UTagScoreNames = cms.vstring(
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probmu',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probele',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaup1h0p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaup1h1p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaup1h2p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaup3h0p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaup3h1p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaum1h0p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaum1h1p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaum1h2p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaum3h0p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probtaum3h1p',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probb',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probc',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probuds',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:probg',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptcorr',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptreshigh',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptreslow',
        'pfParticleNetFromMiniAODAK4CHSCentralJetTags:ptnu'
    ),
    UtagPtCorrName = cms.string('ptcorr'),
    addGenJetMatch = cms.bool(False),
    chargeAssignmentProbMin = cms.double(0.2),
    checkTauScoreIsBest = cms.bool(False),
    dRMax = cms.double(0.4),
    genJetMatch = cms.InputTag(""),
    jetEtaMax = cms.double(2.5),
    jetPtMin = cms.double(15),
    jetSource = cms.InputTag("updatedJets"),
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("slimmedTaus","","@skipCurrentProcess"),
    tagPrefix = cms.string('byUTagCHS'),
    tauScoreMin = cms.double(-1),
    usePFLeptonsAsChargedHadrons = cms.bool(True),
    vsJetMin = cms.double(0.05)
)


process.softActivityJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    Rho_EtaMax = cms.double(4.4),
    applyWeight = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(1),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("chsForSATkJets"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.subJetTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('slimmedJetsAK8PFPuppiSoftDropPacked::SubJets, i.e. soft-drop subjets for ak8 fat jets for boosted analysis'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('SubJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedJetsAK8PFPuppiSoftDropPacked","SubJets"),
    variables = cms.PSet(
        UParTAK4RegPtRawCorr = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptcorr\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptcorr\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware pT regression neutrino correction, relative to visible. Correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptnu\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptnu\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4RegPtRawRes = cms.PSet(
            doc = cms.string('UnifiedParT universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?(bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreshigh\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreslow\'))>0?0.5*(bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreshigh\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4JetTags:ptreslow\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4V1RegPtRawCorr = cms.PSet(
            doc = cms.string('UnifiedParT V1 universal flavor-aware visible pT regression (no neutrinos), correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptcorr\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptcorr\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4V1RegPtRawCorrNeutrino = cms.PSet(
            doc = cms.string('UnifiedParT V1 universal flavor-aware pT regression neutrino correction, relative to visible. Correction relative to raw jet pT'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptnu\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptnu\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        UParTAK4V1RegPtRawRes = cms.PSet(
            doc = cms.string('UnifiedParT V1 universal flavor-aware jet pT resolution estimator, (q84 - q16)/2'),
            expr = cms.string("?(bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreshigh\')+bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreslow\'))>0?0.5*(bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreshigh\')-bDiscriminator(\'pfUnifiedParticleTransformerAK4V1JetTags:ptreslow\')):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        area = cms.PSet(
            doc = cms.string('jet catchment area, for JECs'),
            expr = cms.string('jetArea()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagDeepFlavB = cms.PSet(
            doc = cms.string('DeepJet b+bb+lepb tag discriminator'),
            expr = cms.string("bDiscriminator(\'pfDeepFlavourJetTags:probb\')+bDiscriminator(\'pfDeepFlavourJetTags:probbb\')+bDiscriminator(\'pfDeepFlavourJetTags:problepb\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        btagUParTAK4B = cms.PSet(
            doc = cms.string('UnifiedParT b vs. udscg'),
            expr = cms.string("?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:BvsAll\')>0?bDiscriminator(\'pfUnifiedParticleTransformerAK4DiscriminatorsJetTags:BvsAll\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        n2b1 = cms.PSet(
            doc = cms.string('N2 with beta=1'),
            expr = cms.string("userFloat(\'nb1AK8PuppiSoftDropSubjets:ecfN2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        n3b1 = cms.PSet(
            doc = cms.string('N3 with beta=1'),
            expr = cms.string("userFloat(\'nb1AK8PuppiSoftDropSubjets:ecfN3\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawFactor = cms.PSet(
            doc = cms.string('1 - Factor to get back to raw pT'),
            expr = cms.string("1.-jecFactor(\'Uncorrected\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        tau1 = cms.PSet(
            doc = cms.string('Nsubjettiness (1 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Subjets:tau1\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        tau2 = cms.PSet(
            doc = cms.string('Nsubjettiness (2 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Subjets:tau2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        tau3 = cms.PSet(
            doc = cms.string('Nsubjettiness (3 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Subjets:tau3\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        tau4 = cms.PSet(
            doc = cms.string('Nsubjettiness (4 axis)'),
            expr = cms.string("userFloat(\'NjettinessAK8Subjets:tau4\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.subjetMCTable = cms.EDProducer("SimplePATJetFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(True),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('SubJet'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedJetsAK8PFPuppiSoftDropPacked","SubJets"),
    variables = cms.PSet(
        hadronFlavour = cms.PSet(
            doc = cms.string('flavour from hadron ghost clustering'),
            expr = cms.string('hadronFlavour()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nBHadrons = cms.PSet(
            doc = cms.string('number of b-hadrons'),
            expr = cms.string('jetFlavourInfo().getbHadrons().size()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nCHadrons = cms.PSet(
            doc = cms.string('number of c-hadrons'),
            expr = cms.string('jetFlavourInfo().getcHadrons().size()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        subGenJetAK8Idx = cms.PSet(
            doc = cms.string('index of matched gen subjet in SubGenJetAK8'),
            expr = cms.string('?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        )
    )
)


process.svCandidateTable = cms.EDProducer("SimpleSecondaryVertexFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string(''),
    extension = cms.bool(True),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('SV'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("vertexTable"),
    variables = cms.PSet(
        chi2 = cms.PSet(
            doc = cms.string('reduced chi2, i.e. chi/ndof'),
            expr = cms.string('vertexNormalizedChi2()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        ndof = cms.PSet(
            doc = cms.string('number of degrees of freedom'),
            expr = cms.string('vertexNdof()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        ntracks = cms.PSet(
            doc = cms.string('number of tracks'),
            expr = cms.string('numberOfDaughters()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        x = cms.PSet(
            doc = cms.string('secondary vertex X position, in cm'),
            expr = cms.string('position().x()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        y = cms.PSet(
            doc = cms.string('secondary vertex Y position, in cm'),
            expr = cms.string('position().y()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        z = cms.PSet(
            doc = cms.string('secondary vertex Z position, in cm'),
            expr = cms.string('position().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(14),
            type = cms.string('float')
        )
    )
)


process.tauGenJets = cms.EDProducer("TauGenJetProducer",
    GenParticles = cms.InputTag("genParticles"),
    includeNeutrinos = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.tauGenJetsForNano = cms.EDProducer("TauGenJetProducer",
    GenParticles = cms.InputTag("finalGenParticles"),
    includeNeutrinos = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.tauMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==2 taus'),
    mcMap = cms.InputTag("tausMCMatchLepTauForTable"),
    mcMapVisTau = cms.InputTag("tausMCMatchHadTauForTable"),
    objName = cms.string('Tau'),
    objType = cms.string('Tau'),
    src = cms.InputTag("linkedObjects","taus")
)


process.tauSignalCands = cms.EDProducer("PATTauSignalCandidatesProducer",
    mightGet = cms.optional.untracked.vstring,
    src = cms.InputTag("linkedObjects","taus"),
    storeLostTracks = cms.bool(True)
)


process.tauSignalCandsTable = cms.EDProducer("SimpleCandidateFlatTableProducer",
    cut = cms.string('pt > 0.'),
    doc = cms.string('tau signal candidates'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('TauProd'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("tauSignalCands"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        tauIdx = cms.PSet(
            doc = cms.string('index of the mother tau'),
            expr = cms.string('status'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        )
    )
)


process.tauSpinnerTable = cms.EDProducer("TauSpinnerTableProducer",
    bosonPdgId = cms.int32(25),
    defaultWeight = cms.double(1),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('TauSpinner'),
    src = cms.InputTag("prunedGenParticles"),
    theta = cms.vdouble(0, 0.25, 0.5, -0.25, 0.375)
)


process.tauSpinnerTableProducer = cms.EDProducer("TauSpinnerTableProducer",
    bosonPdgId = cms.int32(25),
    defaultWeight = cms.double(1),
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    src = cms.required.InputTag,
    theta = cms.required.vdouble
)


process.tauTable = cms.EDProducer("SimplePATTauFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string("slimmedTaus after basic selection (pt > 18 && ((tauID(\'decayModeFindingNewDMs\') > 0.5 && (tauID(\'byLooseCombinedIsolationDeltaBetaCorr3Hits\') || (tauID(\'chargedIsoPtSumdR03\')+max(0.,tauID(\'neutralIsoPtSumdR03\')-0.072*tauID(\'puCorrPtSum\'))<2.5))) || (?isTauIDAvailable(\'byUTagCHSVSjetraw\')?tauID(\'byUTagCHSVSjetraw\'):-1) > 0.05 || (?isTauIDAvailable(\'byUTagPUPPIVSjetraw\')?tauID(\'byUTagPUPPIVSjetraw\'):-1) > 0.05))"),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Tau'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","taus"),
    variables = cms.PSet(
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        chargedIso = cms.PSet(
            doc = cms.string('charged isolation'),
            expr = cms.string("?isTauIDAvailable(\'chargedIsoPtSum\')?tauID(\'chargedIsoPtSum\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        decayMode = cms.PSet(
            doc = cms.string('decayMode()'),
            expr = cms.string('decayMode()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        decayModePNet = cms.PSet(
            doc = cms.string('decay mode of the highest tau score of ParticleNet (CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSDecayMode\')?tauID(\'byUTagCHSDecayMode\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        decayModeUParT = cms.PSet(
            doc = cms.string('decay mode of the highest tau score of Unified ParT 2024 (PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIDecayMode\')?tauID(\'byUTagPUPPIDecayMode\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        dxy = cms.PSet(
            doc = cms.string('d_{xy} of lead track with respect to PV, in cm (with sign)'),
            expr = cms.string('?leadChargedHadrCand.isNonnull()?leadChargedHadrCand().dxy():0'),
            lazyEval = cms.untracked.bool(True),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('d_{z} of lead track with respect to PV, in cm (with sign)'),
            expr = cms.string('?leadChargedHadrCand.isNonnull()?leadChargedHadrCand().dz():0'),
            lazyEval = cms.untracked.bool(True),
            precision = cms.int32(14),
            type = cms.string('float')
        ),
        eleIdx = cms.PSet(
            doc = cms.string('index of first matching electron'),
            expr = cms.string("?overlaps(\'electrons\').size()>0?overlaps(\'electrons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        idAntiEleDeadECal = cms.PSet(
            doc = cms.string('Anti-electron dead-ECal discriminator'),
            expr = cms.string("(?isTauIDAvailable(\'againstElectronDeadECAL\')?tauID(\'againstElectronDeadECAL\'):-1) > 0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        idAntiMu = cms.PSet(
            doc = cms.string('Anti-muon discriminator V3: : 1 = Loose, 2 = Tight'),
            expr = cms.string("?isTauIDAvailable(\'againstMuonLoose3\')?(tauID(\'againstMuonLoose3\') + tauID(\'againstMuonTight3\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        idDecayModeNewDMs = cms.PSet(
            doc = cms.string("(?isTauIDAvailable(\'decayModeFindingNewDMs\')?tauID(\'decayModeFindingNewDMs\'):-1) > 0"),
            expr = cms.string("(?isTauIDAvailable(\'decayModeFindingNewDMs\')?tauID(\'decayModeFindingNewDMs\'):-1) > 0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        idDecayModeOldDMs = cms.PSet(
            doc = cms.string("(?isTauIDAvailable(\'decayModeFinding\')?tauID(\'decayModeFinding\'):-1) > 0"),
            expr = cms.string("(?isTauIDAvailable(\'decayModeFinding\')?tauID(\'decayModeFinding\'):-1) > 0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        idDeepTau2018v2p5VSe = cms.PSet(
            doc = cms.string('byDeepTau2018v2p5VSe ID working points (deepTau2018v2p5): 1 = VVVLoose, 2 = VVLoose, 3 = VLoose, 4 = Loose, 5 = Medium, 6 = Tight, 7 = VTight, 8 = VVTight'),
            expr = cms.string("?isTauIDAvailable(\'byVVVLooseDeepTau2018v2p5VSe\')?(tauID(\'byVVVLooseDeepTau2018v2p5VSe\') + tauID(\'byVVLooseDeepTau2018v2p5VSe\') + tauID(\'byVLooseDeepTau2018v2p5VSe\') + tauID(\'byLooseDeepTau2018v2p5VSe\') + tauID(\'byMediumDeepTau2018v2p5VSe\') + tauID(\'byTightDeepTau2018v2p5VSe\') + tauID(\'byVTightDeepTau2018v2p5VSe\') + tauID(\'byVVTightDeepTau2018v2p5VSe\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        idDeepTau2018v2p5VSjet = cms.PSet(
            doc = cms.string('byDeepTau2018v2p5VSjet ID working points (deepTau2018v2p5): 1 = VVVLoose, 2 = VVLoose, 3 = VLoose, 4 = Loose, 5 = Medium, 6 = Tight, 7 = VTight, 8 = VVTight'),
            expr = cms.string("?isTauIDAvailable(\'byVVVLooseDeepTau2018v2p5VSjet\')?(tauID(\'byVVVLooseDeepTau2018v2p5VSjet\') + tauID(\'byVVLooseDeepTau2018v2p5VSjet\') + tauID(\'byVLooseDeepTau2018v2p5VSjet\') + tauID(\'byLooseDeepTau2018v2p5VSjet\') + tauID(\'byMediumDeepTau2018v2p5VSjet\') + tauID(\'byTightDeepTau2018v2p5VSjet\') + tauID(\'byVTightDeepTau2018v2p5VSjet\') + tauID(\'byVVTightDeepTau2018v2p5VSjet\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        idDeepTau2018v2p5VSmu = cms.PSet(
            doc = cms.string('byDeepTau2018v2p5VSmu ID working points (deepTau2018v2p5): 1 = VLoose, 2 = Loose, 3 = Medium, 4 = Tight'),
            expr = cms.string("?isTauIDAvailable(\'byVLooseDeepTau2018v2p5VSmu\')?(tauID(\'byVLooseDeepTau2018v2p5VSmu\') + tauID(\'byLooseDeepTau2018v2p5VSmu\') + tauID(\'byMediumDeepTau2018v2p5VSmu\') + tauID(\'byTightDeepTau2018v2p5VSmu\')):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        jetIdx = cms.PSet(
            doc = cms.string('index of the associated jet (-1 if none)'),
            expr = cms.string("?hasUserCand(\'jet\')?userCand(\'jet\').key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        leadTkDeltaEta = cms.PSet(
            doc = cms.string('eta of the leading track, minus tau eta'),
            expr = cms.string('?leadChargedHadrCand.isNonnull()?(leadChargedHadrCand.eta - eta):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        leadTkDeltaPhi = cms.PSet(
            doc = cms.string('phi of the leading track, minus tau phi'),
            expr = cms.string('?leadChargedHadrCand.isNonnull()?deltaPhi(leadChargedHadrCand.phi, phi):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        leadTkPtOverTauPt = cms.PSet(
            doc = cms.string('pt of the leading track divided by tau pt'),
            expr = cms.string('?leadChargedHadrCand.isNonnull()?leadChargedHadrCand.pt/pt:1'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        muIdx = cms.PSet(
            doc = cms.string('index of first matching muon'),
            expr = cms.string("?overlaps(\'muons\').size()>0?overlaps(\'muons\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        nSVs = cms.PSet(
            doc = cms.string('number of secondary vertices in the tau'),
            expr = cms.string("?hasOverlaps(\'vertices\')?overlaps(\'vertices\').size():0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        neutralIso = cms.PSet(
            doc = cms.string('neutral (photon) isolation'),
            expr = cms.string("?isTauIDAvailable(\'neutralIsoPtSum\')?tauID(\'neutralIsoPtSum\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        photonsOutsideSignalCone = cms.PSet(
            doc = cms.string('sum of photons outside signal cone'),
            expr = cms.string("?isTauIDAvailable(\'photonPtSumOutsideSignalCone\')?tauID(\'photonPtSumOutsideSignalCone\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM0PNet = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 0, 1h+0pi0 (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSProb1h0pi0\')?tauID(\'byUTagCHSProb1h0pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM0UParT = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 0, 1h+0pi0 (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIProb1h0pi0\')?tauID(\'byUTagPUPPIProb1h0pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM10PNet = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 10, 3h+0pi0 (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSProb3h0pi0\')?tauID(\'byUTagCHSProb3h0pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM10UParT = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 10, 3h+0pi0 (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIProb3h0pi0\')?tauID(\'byUTagPUPPIProb3h0pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM11PNet = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 11, 3h+1pi0 (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSProb3h1pi0\')?tauID(\'byUTagCHSProb3h1pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM11UParT = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 11, 3h+1pi0 (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIProb3h1pi0\')?tauID(\'byUTagPUPPIProb3h1pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM1PNet = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 1, 1h+1pi0 (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSProb1h1pi0\')?tauID(\'byUTagCHSProb1h1pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM1UParT = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 1, 1h+1pi0 (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIProb1h1pi0\')?tauID(\'byUTagPUPPIProb1h1pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM2PNet = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 2, 1h+2pi0 (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSProb1h2pi0\')?tauID(\'byUTagCHSProb1h2pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        probDM2UParT = cms.PSet(
            doc = cms.string('normalised probablity of decayMode 2, 1h+2pi0 (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIProb1h2pi0\')?tauID(\'byUTagPUPPIProb1h2pi0\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptCorrPNet = cms.PSet(
            doc = cms.string('pt correction (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSPtCorr\')?tauID(\'byUTagCHSPtCorr\'):1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        ptCorrUParT = cms.PSet(
            doc = cms.string('pt correction (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIPtCorr\')?tauID(\'byUTagPUPPIPtCorr\'):1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        puCorr = cms.PSet(
            doc = cms.string('pileup correction'),
            expr = cms.string("?isTauIDAvailable(\'puCorrPtSum\')?tauID(\'puCorrPtSum\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        qConfPNet = cms.PSet(
            doc = cms.string('signed charge confidence (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSQConf\')?tauID(\'byUTagCHSQConf\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        qConfUParT = cms.PSet(
            doc = cms.string('signed charge confidence (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIQConf\')?tauID(\'byUTagPUPPIQConf\'):0"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawDeepTau2018v2p5VSe = cms.PSet(
            doc = cms.string('byDeepTau2018v2p5VSe raw output discriminator (deepTau2018v2p5)'),
            expr = cms.string("?isTauIDAvailable(\'byDeepTau2018v2p5VSeraw\')?tauID(\'byDeepTau2018v2p5VSeraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawDeepTau2018v2p5VSjet = cms.PSet(
            doc = cms.string('byDeepTau2018v2p5VSjet raw output discriminator (deepTau2018v2p5)'),
            expr = cms.string("?isTauIDAvailable(\'byDeepTau2018v2p5VSjetraw\')?tauID(\'byDeepTau2018v2p5VSjetraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawDeepTau2018v2p5VSmu = cms.PSet(
            doc = cms.string('byDeepTau2018v2p5VSmu raw output discriminator (deepTau2018v2p5)'),
            expr = cms.string("?isTauIDAvailable(\'byDeepTau2018v2p5VSmuraw\')?tauID(\'byDeepTau2018v2p5VSmuraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawIso = cms.PSet(
            doc = cms.string('combined isolation (deltaBeta corrections)'),
            expr = cms.string("?isTauIDAvailable(\'byCombinedIsolationDeltaBetaCorrRaw3Hits\')?tauID(\'byCombinedIsolationDeltaBetaCorrRaw3Hits\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawIsodR03 = cms.PSet(
            doc = cms.string('combined isolation (deltaBeta corrections, dR=0.3)'),
            expr = cms.string("?isTauIDAvailable(\'chargedIsoPtSumdR03\')?(tauID(\'chargedIsoPtSumdR03\')+max(0.,tauID(\'neutralIsoPtSumdR03\')-0.072*tauID(\'puCorrPtSum\'))):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawPNetVSe = cms.PSet(
            doc = cms.string('raw output of ParticleNetVsE discriminator (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSVSeraw\')?tauID(\'byUTagCHSVSeraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawPNetVSjet = cms.PSet(
            doc = cms.string('raw output of ParticleNetVsJet discriminator (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSVSjetraw\')?tauID(\'byUTagCHSVSjetraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawPNetVSmu = cms.PSet(
            doc = cms.string('raw output of ParticleNetVsMu discriminator (PNet 2023 - CHS Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagCHSVSmuraw\')?tauID(\'byUTagCHSVSmuraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawUParTVSe = cms.PSet(
            doc = cms.string('raw output of UParTVsE discriminator (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIVSeraw\')?tauID(\'byUTagPUPPIVSeraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawUParTVSjet = cms.PSet(
            doc = cms.string('raw output of UParTVsJet discriminator (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIVSjetraw\')?tauID(\'byUTagPUPPIVSjetraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        rawUParTVSmu = cms.PSet(
            doc = cms.string('raw output of UParTVsMu discriminator (Unified ParT 2024 - PUPPI Jets)'),
            expr = cms.string("?isTauIDAvailable(\'byUTagPUPPIVSmuraw\')?tauID(\'byUTagPUPPIVSmuraw\'):-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        svIdx1 = cms.PSet(
            doc = cms.string('index of first matching secondary vertex'),
            expr = cms.string("?overlaps(\'vertices\').size()>0?overlaps(\'vertices\')[0].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        ),
        svIdx2 = cms.PSet(
            doc = cms.string('index of second matching secondary vertex'),
            expr = cms.string("?overlaps(\'vertices\').size()>1?overlaps(\'vertices\')[1].key():-1"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int16')
        )
    )
)


process.tauTimeLifeInfoTable = cms.EDProducer("SimplePATTau2TrackTimeLifeInfoFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('Additional tau time-life info'),
    extension = cms.bool(True),
    externalTypedVariables = cms.PSet(
        IPx = cms.PSet(
            doc = cms.string('x coordinate of impact parameter vector'),
            expr = cms.string('ipVector().x()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        IPy = cms.PSet(
            doc = cms.string('y coordinate of impact parameter vector'),
            expr = cms.string('ipVector().y()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        IPz = cms.PSet(
            doc = cms.string('z coordinate of impact parameter vector'),
            expr = cms.string('ipVector().z()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        hasRefitSV = cms.PSet(
            doc = cms.string('has SV refit using miniAOD quantities'),
            expr = cms.string('hasSV()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('bool')
        ),
        ipLengthSig = cms.PSet(
            doc = cms.string('significance of impact parameter'),
            expr = cms.string('ipLength().significance()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVchi2 = cms.PSet(
            doc = cms.string('reduced chi2, i.e. chi2/ndof, of SV fit'),
            expr = cms.string('?hasSV()?sv().normalizedChi2():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVcov00 = cms.PSet(
            doc = cms.string('Covariance of SV (0,0)'),
            expr = cms.string('?hasSV()?sv().covariance(0,0):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVcov10 = cms.PSet(
            doc = cms.string('Covariance of SV (1,0)'),
            expr = cms.string('?hasSV()?sv().covariance(1,0):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVcov11 = cms.PSet(
            doc = cms.string('Covariance of SV (1,1)'),
            expr = cms.string('?hasSV()?sv().covariance(1,1):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVcov20 = cms.PSet(
            doc = cms.string('Covariance of SV (2,0)'),
            expr = cms.string('?hasSV()?sv().covariance(2,0):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVcov21 = cms.PSet(
            doc = cms.string('Covariance of SV (2,1)'),
            expr = cms.string('?hasSV()?sv().covariance(2,1):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVcov22 = cms.PSet(
            doc = cms.string('Covariance of SV (2,2)'),
            expr = cms.string('?hasSV()?sv().covariance(2,2):0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVx = cms.PSet(
            doc = cms.string('x coordinate of SV'),
            expr = cms.string('?hasSV()?sv().x():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVy = cms.PSet(
            doc = cms.string('y coordinate of SV'),
            expr = cms.string('?hasSV()?sv().y():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        ),
        refitSVz = cms.PSet(
            doc = cms.string('z coordinate of SV'),
            expr = cms.string('?hasSV()?sv().z():0'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            src = cms.InputTag("tauTimeLifeInfos"),
            type = cms.string('float')
        )
    ),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('Tau'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("linkedObjects","taus"),
    variables = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.required.string,
            expr = cms.required.string,
            lazyEval = cms.untracked.bool(False),
            type = cms.string('int')
        )
    )
)


process.tauTimeLifeInfos = cms.EDProducer("PATTauTimeLifeInfoProducer",
    mightGet = cms.optional.untracked.vstring,
    pvChoice = cms.int32(0),
    pvSource = cms.InputTag("offlineSlimmedPrimaryVerticesWithBS"),
    selection = cms.string(''),
    src = cms.InputTag("linkedObjects","taus")
)


process.tausMCMatchHadTauForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("genVisTaus"),
    maxDPtRel = cms.double(1.0),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(15),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","taus")
)


process.tausMCMatchLepTauForTable = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticles"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.3),
    mcPdgId = cms.vint32(11, 13),
    mcStatus = cms.vint32(),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("linkedObjects","taus")
)


process.tautagger = cms.EDProducer("GenJetTauTaggerProducer",
    src = cms.InputTag("particleLevel","leptons")
)


process.tautaggerForMatching = cms.EDProducer("GenJetTauTaggerProducer",
    src = cms.InputTag("particleLevel","leptons")
)


process.trackBPHTable = cms.EDProducer("SimpleCompositeCandidateFlatTableProducer",
    cut = cms.string(''),
    doc = cms.string('track collection'),
    extension = cms.bool(False),
    name = cms.string('Track'),
    singleton = cms.bool(False),
    src = cms.InputTag("tracksBPH","SelectedTracks"),
    variables = cms.PSet(
        DCASig = cms.PSet(
            doc = cms.string('significance of xy-distance of closest approach wrt beamspot'),
            expr = cms.string("userFloat(\'DCASig\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        charge = cms.PSet(
            doc = cms.string('electric charge'),
            expr = cms.string('charge'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        covLamLam = cms.PSet(
            doc = cms.string('Cov. of lambda with lambda'),
            expr = cms.string("userFloat(\'covLamLam\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covLamPhi = cms.PSet(
            doc = cms.string('Cov. of lambda with phi'),
            expr = cms.string("userFloat(\'covLamPhi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covPhiPhi = cms.PSet(
            doc = cms.string('Cov. of phi with phi'),
            expr = cms.string("userFloat(\'covPhiPhi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covQopLam = cms.PSet(
            doc = cms.string('Cov. of q/p with lambda'),
            expr = cms.string("userFloat(\'covQopLam\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covQopPhi = cms.PSet(
            doc = cms.string('Cov. of q/p with phi'),
            expr = cms.string("userFloat(\'covQopPhi\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        covQopQop = cms.PSet(
            doc = cms.string('Cov. of q/p with q/p'),
            expr = cms.string("userFloat(\'covQopQop\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        dxy = cms.PSet(
            doc = cms.string('dxy (with sign) wrt PV associated with the track [cm]'),
            expr = cms.string("userFloat(\'dxy\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dxyS = cms.PSet(
            doc = cms.string('dxy/err (with sign) wrt PV associated with the track [cm]'),
            expr = cms.string("userFloat(\'dxyS\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dz = cms.PSet(
            doc = cms.string('dz signed wrt PV[0] [cm]'),
            expr = cms.string("userFloat(\'dz\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dzS = cms.PSet(
            doc = cms.string('dz/err (with sign) wrt PV[0] [cm]'),
            expr = cms.string("userFloat(\'dzS\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        dzTrg = cms.PSet(
            doc = cms.string('dz from the corresponding trigger muon [cm]'),
            expr = cms.string("userFloat(\'dzTrg\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        isLostTrk = cms.PSet(
            doc = cms.string('track from lostTrack collection'),
            expr = cms.string("userInt(\'isLostTrk\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isMatchedToEle = cms.PSet(
            doc = cms.string('track was used to build a PF ele'),
            expr = cms.string("userInt(\'isMatchedToEle\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isMatchedToMuon = cms.PSet(
            doc = cms.string('track was used to build a muon'),
            expr = cms.string("userInt(\'isMatchedToMuon\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        isMatchedToMuon_Idx = cms.PSet(
            doc = cms.string('index to matched muon'),
            expr = cms.string("userInt(\'MatchedMuonIdx\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        isPacked = cms.PSet(
            doc = cms.string('track from packedCandidate collection'),
            expr = cms.string("userInt(\'isPacked\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('bool')
        ),
        mass = cms.PSet(
            doc = cms.string('mass'),
            expr = cms.string('mass'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        nValidHits = cms.PSet(
            doc = cms.string('Number of valid hits'),
            expr = cms.string("userInt(\'nValidHits\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        nValidPixelHits = cms.PSet(
            doc = cms.string('Number of pixel hits'),
            expr = cms.string("userInt(\'nValidPixelHits\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('uint8')
        ),
        normChi2 = cms.PSet(
            doc = cms.string('Track fit chi-squared divided by n.d.o.f.'),
            expr = cms.string("userFloat(\'normChi2\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        pdgId = cms.PSet(
            doc = cms.string('PDG code assigned by the event reconstruction (not by MC truth)'),
            expr = cms.string('pdgId'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('int')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(12),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(-1),
            type = cms.string('float')
        ),
        ptErr = cms.PSet(
            doc = cms.string('Pt uncertainty'),
            expr = cms.string("userFloat(\'ptErr\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        vx = cms.PSet(
            doc = cms.string('x coordinate of of ref point [cm]'),
            expr = cms.string('vx()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        vy = cms.PSet(
            doc = cms.string('y coordinate of of ref point [cm]'),
            expr = cms.string('vy()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        ),
        vz = cms.PSet(
            doc = cms.string('z coordinate of of ref point [cm]'),
            expr = cms.string('vz()'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(6),
            type = cms.string('float')
        )
    )
)


process.trackGenJetAK4Table = cms.EDProducer("SimpleGenJetFlatTableProducer",
    cut = cms.string('pt > 1'),
    doc = cms.string('AK4 GenJets made with charged particles only'),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    lazyEval = cms.untracked.bool(False),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('TrackGenJetAK4'),
    singleton = cms.bool(False),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("ak4GenJetsChargedOnly"),
    variables = cms.PSet(
        eta = cms.PSet(
            doc = cms.string('eta'),
            expr = cms.string('eta'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        phi = cms.PSet(
            doc = cms.string('phi'),
            expr = cms.string('phi'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(8),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('pt'),
            expr = cms.string('pt'),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.tracksBPH = cms.EDProducer("BPHTrackMerger",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    dcaSig = cms.double(-100000),
    dileptons = cms.InputTag("MuMu","SelectedDiLeptons"),
    electrons = cms.InputTag("slimmedElectrons"),
    lostTracks = cms.InputTag("lostTracks"),
    maxDzDilep = cms.double(1.0),
    muons = cms.InputTag("slimmedMuons"),
    pvSrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    trackSelection = cms.string('pt>0.7 && abs(eta)<3.0'),
    tracks = cms.InputTag("packedPFCandidates")
)


process.tracksBPHMCMatch = cms.EDProducer("MCMatcher",
    checkCharge = cms.bool(False),
    matched = cms.InputTag("finalGenParticlesBPH"),
    maxDPtRel = cms.double(0.5),
    maxDeltaR = cms.double(0.05),
    mcPdgId = cms.vint32(321, 211),
    mcStatus = cms.vint32(1),
    resolveAmbiguities = cms.bool(True),
    resolveByMatchQuality = cms.bool(True),
    src = cms.InputTag("tracksBPH","SelectedTracks")
)


process.tracksBPHMCTable = cms.EDProducer("CandMCMatchTableProducer",
    branchName = cms.string('genPart'),
    docString = cms.string('MC matching to status==1 kaons or pions'),
    mcMap = cms.InputTag("tracksBPHMCMatch"),
    objName = cms.string('Track'),
    objType = cms.string('Track'),
    src = cms.InputTag("tracksBPH","SelectedTracks")
)


process.triggerObjectTable = cms.EDProducer("TriggerObjectTableProducer",
    l1EG = cms.InputTag("caloStage2Digis","EGamma"),
    l1Jet = cms.InputTag("caloStage2Digis","Jet"),
    l1Muon = cms.InputTag("gmtStage2Digis","Muon"),
    l1Sum = cms.InputTag("caloStage2Digis","EtSum"),
    l1Tau = cms.InputTag("caloStage2Digis","Tau"),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('TrigObj'),
    selections = cms.PSet(
        BoostedTau = cms.PSet(
            id = cms.int32(1515),
            l1deltaR = cms.double(0.3),
            l1seed = cms.string('type(-99)'),
            l2deltaR = cms.double(0.3),
            l2seed = cms.string("type(85)  && coll(\'hltAK8CaloJetsCorrectedIDPassed\')"),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('HLT_AK8PFJetX_SoftDropMassY_PFAK8ParticleNetTauTau0p30'),
                    selection = cms.string("filter(\'hltAK8SinglePFJets*SoftDropMass*ParticleNetTauTau0p30\')")
                ),
                cms.PSet(
                    doc = cms.string('HLT_AK8PFJetX_SoftDropMassY_PNetTauTau0p03'),
                    selection = cms.string("filter(\'hltAK8SinglePFJets*SoftDropMass*PNetTauTauTag0p03\')")
                ),
                cms.PSet(
                    doc = cms.string('HLT_AK8PFJetX_SoftDropMassY_PNetTauTau0p05'),
                    selection = cms.string("filter(\'hltAK8SinglePFJets*SoftDropMass*PNetTauTauTag0p05\')")
                )
            ),
            sel = cms.string("type(85) && pt > 120 && filter(\'*TauTau*\')"),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        Electron = cms.PSet(
            doc = cms.string('PixelMatched e/gamma'),
            id = cms.int32(11),
            l1deltaR = cms.double(0.3),
            l1seed = cms.string('type(-98)'),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('CaloIdL_TrackIdL_IsoVL'),
                    selection = cms.string("filter(\'*CaloIdLTrackIdLIsoVL*TrackIso*Filter\')")
                ),
                cms.PSet(
                    doc = cms.string('1e (WPTight with possibile contribution from Xtriggers besides singleElectron)'),
                    selection = cms.string("filter(\'hltEle*WPTight*TrackIsoFilter*\')")
                ),
                cms.PSet(
                    doc = cms.string('1e (WPLoose)'),
                    selection = cms.string("filter(\'hltEle*WPLoose*TrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('OverlapFilter PFTau'),
                    selection = cms.string("filter(\'*OverlapFilter*IsoEle*PFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('2e (Leg 1)'),
                    selection = cms.string("filter(\'hltEle*Ele*CaloIdLTrackIdLIsoVLTrackIsoLeg1Filter\')")
                ),
                cms.PSet(
                    doc = cms.string('2e (Leg 2)'),
                    selection = cms.string("filter(\'hltEle*Ele*CaloIdLTrackIdLIsoVLTrackIsoLeg2Filter\')")
                ),
                cms.PSet(
                    doc = cms.string('1e-1mu'),
                    selection = cms.string("filter(\'hltMu*TrkIsoVVL*Ele*CaloIdLTrackIdLIsoVL*Filter*\')")
                ),
                cms.PSet(
                    doc = cms.string('1e-1tau'),
                    selection = cms.string("filter(\'hlt*OverlapFilterIsoEle*PFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('3e'),
                    selection = cms.string("filter(\'hltEle*Ele*Ele*CaloIdLTrackIdLDphiLeg*Filter\')")
                ),
                cms.PSet(
                    doc = cms.string('2e-1mu'),
                    selection = cms.string("max(filter(\'hltMu*DiEle*CaloIdLTrackIdLElectronleg*Filter\'),filter(\'hltL3fL1Mu*DoubleEG*Filtered*\'))")
                ),
                cms.PSet(
                    doc = cms.string('1e-2mu'),
                    selection = cms.string("max(filter(\'hltDiMu*Ele*CaloIdLTrackIdLElectronleg*Filter\'),filter(\'hltL3fL1DoubleMu*EG*Filter*\'))")
                ),
                cms.PSet(
                    doc = cms.string('1e (32_L1DoubleEG_AND_L1SingleEGOr)'),
                    selection = cms.string("min(filter(\'hltEGL1SingleEGOrFilter\'),filter(\'hltEle32L1DoubleEGWPTightGsfTrackIsoFilter\'))")
                ),
                cms.PSet(
                    doc = cms.string('1e (CaloIdVT_GsfTrkIdT)'),
                    selection = cms.string("filter(\'hltEle*CaloIdVTGsfTrkIdTGsfDphiFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('1e (PFJet)'),
                    selection = cms.string("path(\'HLT_Ele*PFJet*\')")
                ),
                cms.PSet(
                    doc = cms.string('1e (Photon175_OR_Photon200)'),
                    selection = cms.string("max(filter(\'hltEG200HEFilter\'),filter(\'hltEG175HEFilter\'))")
                ),
                cms.PSet(
                    doc = cms.string('2e (CaloIdL_MW seeded)'),
                    selection = cms.string("filter(\'hltEle*CaloIdLMWPMS2Filter\')")
                ),
                cms.PSet(
                    doc = cms.string('2e (CaloIdL_MW unseeded)'),
                    selection = cms.string("filter(\'hltDiEle*CaloIdLMWPMS2UnseededFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('1e-1tau PNet'),
                    selection = cms.string("filter(\'hlt*OverlapFilterIsoEle*ETau*PNet*Tau*\')")
                ),
                cms.PSet(
                    doc = cms.string('1e (HLT30WPTightGSfTrackIso)'),
                    selection = cms.string("filter(\'hltEle30WPTightGsfTrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('WPTightGsfTrackIso for VBF'),
                    selection = cms.string("filter(\'hltEle*erWPTightGsfTrackIsoFilterNoRhoCorrectionForVBF\')")
                )
            ),
            sel = cms.string("type(92) && pt > 7 && (coll(\'hltEgammaCandidates\') || coll(\'hltEgammaCandidatesUnseeded\')) && (filter(\'*PixelMatchFilter*\') || filter(\'*PixelMatchUnseededFilter\'))"),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        FatJet = cms.PSet(
            id = cms.int32(6),
            l1deltaR = cms.double(0.3),
            l1seed = cms.string('type(-99)'),
            l2deltaR = cms.double(0.3),
            l2seed = cms.string("type(85)  && coll(\'hltAK8CaloJetsCorrectedIDPassed\')"),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string(''),
                    selection = cms.string("coll(\'hltAK8PFJetsCorrected\')")
                ),
                cms.PSet(
                    doc = cms.string('hltAK8SingleCaloJet200'),
                    selection = cms.string("filter(\'hltAK8SingleCaloJet200\')")
                ),
                cms.PSet(
                    doc = cms.string(''),
                    selection = cms.string("coll(\'hltAK8PFSoftDropJets230\')")
                ),
                cms.PSet(
                    doc = cms.string('hltAK8SinglePFJets230SoftDropMass40BTagParticleNetBB0p35 OR hltAK8SinglePFJets250SoftDropMass40BTagParticleNetBB0p35 OR hltAK8SinglePFJets275SoftDropMass40BTagParticleNetBB0p35'),
                    selection = cms.string("max(filter(\'hltAK8SinglePFJets275SoftDropMass40BTagParticleNetBB0p35\'),max(filter(\'hltAK8SinglePFJets250SoftDropMass40BTagParticleNetBB0p35\'),filter(\'hltAK8SinglePFJets230SoftDropMass40BTagParticleNetBB0p35\')))")
                ),
                cms.PSet(
                    doc = cms.string('hltAK8DoublePFJetSDModMass30'),
                    selection = cms.string("filter(\'hltAK8DoublePFJetSDModMass30\')")
                ),
                cms.PSet(
                    doc = cms.string('hltAK8DoublePFJetSDModMass50'),
                    selection = cms.string("filter(\'hltAK8DoublePFJetSDModMass50\')")
                ),
                cms.PSet(
                    doc = cms.string('hltAK8SinglePFJets*SoftDropMass*PNetBBTag0p06'),
                    selection = cms.string("filter(\'hltAK8SinglePFJets*SoftDropMass*PNetBBTag0p06\')")
                )
            ),
            sel = cms.string('type(85) && pt > 120'),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        HT = cms.PSet(
            id = cms.int32(3),
            l1deltaR = cms.double(9999),
            l1deltaR_2 = cms.double(9999),
            l1seed = cms.string("type(-89) && coll(\'L1HTT\')"),
            l1seed_2 = cms.string("type(-89) && coll(\'L1HTTHF\')"),
            l2deltaR = cms.double(9999),
            l2seed = cms.string("type(89) && coll(\'hltHtMhtJet30\')"),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('hltL1sTripleJetVBFIorHTTIorDoubleJetCIorSingleJet'),
                    selection = cms.string("filter(\'hltL1sTripleJetVBFIorHTTIorDoubleJetCIorSingleJet\')")
                ),
                cms.PSet(
                    doc = cms.string('hltL1sQuadJetC50IorQuadJetC60IorHTT280IorHTT300IorHTT320IorTripleJet846848VBFIorTripleJet887256VBFIorTripleJet927664VBF OR hltL1sQuadJetCIorTripleJetVBFIorHTT'),
                    selection = cms.string("max(filter(\'hltL1sQuadJetCIorTripleJetVBFIorHTT\'),filter(\'hltL1sQuadJetC50IorQuadJetC60IorHTT280IorHTT300IorHTT320IorTripleJet846848VBFIorTripleJet887256VBFIorTripleJet927664VBF\'))")
                ),
                cms.PSet(
                    doc = cms.string('hltL1sQuadJetC60IorHTT380IorHTT280QuadJetIorHTT300QuadJet OR hltL1sQuadJetC50to60IorHTT280to500IorHTT250to340QuadJet'),
                    selection = cms.string("max(filter(\'hltL1sQuadJetC50to60IorHTT280to500IorHTT250to340QuadJet\'),filter(\'hltL1sQuadJetC60IorHTT380IorHTT280QuadJetIorHTT300QuadJet\'))")
                ),
                cms.PSet(
                    doc = cms.string('hltCaloQuadJet30HT300 OR hltCaloQuadJet30HT320'),
                    selection = cms.string("max(filter(\'hltCaloQuadJet30HT320\'),filter(\'hltCaloQuadJet30HT300\'))")
                ),
                cms.PSet(
                    doc = cms.string('hltPFCentralJetsLooseIDQuad30HT300 OR hltPFCentralJetsLooseIDQuad30HT330'),
                    selection = cms.string("max(filter(\'hltPFCentralJetsLooseIDQuad30HT330\'),filter(\'hltPFCentralJetsLooseIDQuad30HT300\'))")
                ),
                cms.PSet(
                    doc = cms.string('hltPFHT280Jet30'),
                    selection = cms.string("filter(\'hltPFHT280Jet30\')")
                )
            ),
            sel = cms.string('type(89) || type(-89)'),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        Jet = cms.PSet(
            id = cms.int32(1),
            l1deltaR = cms.double(0.3),
            l1seed = cms.string('type(-99)'),
            l2deltaR = cms.double(0.3),
            l2seed = cms.string('type(85) || type(86) || type(-99)'),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('hlt4PixelOnlyPFCentralJetTightIDPt20'),
                    selection = cms.string("filter(\'hlt4PixelOnlyPFCentralJetTightIDPt20\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt3PixelOnlyPFCentralJetTightIDPt30'),
                    selection = cms.string("filter(\'hlt3PixelOnlyPFCentralJetTightIDPt30\')")
                ),
                cms.PSet(
                    doc = cms.string('hltPFJetFilterTwoC30'),
                    selection = cms.string("filter(\'hltPFJetFilterTwoC30\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt4PFCentralJetTightIDPt30'),
                    selection = cms.string("filter(\'hlt4PFCentralJetTightIDPt30\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt4PFCentralJetTightIDPt35'),
                    selection = cms.string("filter(\'hlt4PFCentralJetTightIDPt35\')")
                ),
                cms.PSet(
                    doc = cms.string('hltQuadCentralJet30'),
                    selection = cms.string("filter(\'hltQuadCentralJet30\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt2PixelOnlyPFCentralJetTightIDPt40'),
                    selection = cms.string("filter(\'hlt2PixelOnlyPFCentralJetTightIDPt40\')")
                ),
                cms.PSet(
                    doc = cms.string('hltL1sTripleJet1008572VBFIorHTTIorDoubleJetCIorSingleJet OR hltL1sTripleJet1058576VBFIorHTTIorDoubleJetCIorSingleJet OR hltL1sTripleJetVBFIorHTTIorSingleJet'),
                    selection = cms.string("max(filter(\'hltL1sTripleJetVBFIorHTTIorSingleJet\'),max(filter(\'hltL1sTripleJet1058576VBFIorHTTIorDoubleJetCIorSingleJet\'),filter(\'hltL1sTripleJet1008572VBFIorHTTIorDoubleJetCIorSingleJet\')))")
                ),
                cms.PSet(
                    doc = cms.string('hlt3PFCentralJetTightIDPt40'),
                    selection = cms.string("filter(\'hlt3PFCentralJetTightIDPt40\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt3PFCentralJetTightIDPt45'),
                    selection = cms.string("filter(\'hlt3PFCentralJetTightIDPt45\')")
                ),
                cms.PSet(
                    doc = cms.string('hltL1sQuadJetC60IorHTT380IorHTT280QuadJetIorHTT300QuadJet OR hltL1sQuadJetC50to60IorHTT280to500IorHTT250to340QuadJet'),
                    selection = cms.string("max(filter(\'hltL1sQuadJetC50to60IorHTT280to500IorHTT250to340QuadJet\'),filter(\'hltL1sQuadJetC60IorHTT380IorHTT280QuadJetIorHTT300QuadJet\'))")
                ),
                cms.PSet(
                    doc = cms.string('hltBTagCaloDeepCSVp17Double'),
                    selection = cms.string("filter(\'hltBTagCaloDeepCSVp17Double\')")
                ),
                cms.PSet(
                    doc = cms.string('hltPFCentralJetLooseIDQuad30'),
                    selection = cms.string("filter(\'hltPFCentralJetLooseIDQuad30\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt1PFCentralJetLooseID75'),
                    selection = cms.string("filter(\'hlt1PFCentralJetLooseID75\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt2PFCentralJetLooseID60'),
                    selection = cms.string("filter(\'hlt2PFCentralJetLooseID60\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt3PFCentralJetLooseID45'),
                    selection = cms.string("filter(\'hlt3PFCentralJetLooseID45\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt4PFCentralJetLooseID40'),
                    selection = cms.string("filter(\'hlt4PFCentralJetLooseID40\')")
                ),
                cms.PSet(
                    doc = cms.string('(DiTau+Jet (Jet) Signal)'),
                    selection = cms.string("max(filter(\'hltHpsOverlapFilterDoublePNetTauh26PFJet*\'),filter(\'hltHpsOverlapFilterDeepTauDoublePFTau*PFJet*\'))")
                ),
                cms.PSet(
                    doc = cms.string('(VBF DiTau Jets)'),
                    selection = cms.string("max(filter(\'hltMatchedVBFTwoPFJets2CrossCleanedFrom*Double20PNetTauhTag*\'),filter(\'*CrossCleaned*MediumDeepTauDitauWPPFTau*\'))")
                ),
                cms.PSet(
                    doc = cms.string('(VBF SingleTau Jets)'),
                    selection = cms.string("max(filter(\'hlt2PFJetsL1VBFDiJetIsoTauMatchedVBFLooseID*\'),filter(\'*CrossCleanedUsingDiJetCorrChecker*\'))")
                ),
                cms.PSet(
                    doc = cms.string('Muon+Tau+Jet (Jet) Monitoring'),
                    selection = cms.string("max(filter(\'hltHpsOverlapFilterIsoMu24SinglePFJet26PNetTauhTagPFJet*\'),filter(\'hltHpsOverlapFilterDeepTauPFTau*PFJet*\'))")
                ),
                cms.PSet(
                    doc = cms.string('hlt2PFCentralJetTightIDPt50'),
                    selection = cms.string("filter(\'hlt2PFCentralJetTightIDPt50\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt1PixelOnlyPFCentralJetTightIDPt60'),
                    selection = cms.string("filter(\'hlt1PixelOnlyPFCentralJetTightIDPt60\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt1PFCentralJetTightIDPt70'),
                    selection = cms.string("filter(\'hlt1PFCentralJetTightIDPt70\')")
                ),
                cms.PSet(
                    doc = cms.string('hltBTagPFDeepJet1p5Single'),
                    selection = cms.string("filter(\'hltBTagPFDeepJet1p5Single\')")
                ),
                cms.PSet(
                    doc = cms.string('hltBTagPFDeepJet4p5Triple'),
                    selection = cms.string("filter(\'hltBTagPFDeepJet4p5Triple\')")
                ),
                cms.PSet(
                    doc = cms.string('hltBTagCentralJetPt35PFParticleNet2BTagSum0p65 OR hltBTagCentralJetPt30PFParticleNet2BTagSum0p65 OR hltPFJetTwoC30PFBTagParticleNet2BTagSum0p65 OR hltPFCentralJetPt30PNet2BTagMean0p55'),
                    selection = cms.string("max(filter(\'hltPFCentralJetPt30PNet2BTagMean0p55\'),max(filter(\'hltPFJetTwoC30PFBTagParticleNet2BTagSum0p65\'),max(filter(\'hltBTagCentralJetPt30PFParticleNet2BTagSum0p65\'),filter(\'hltBTagCentralJetPt35PFParticleNet2BTagSum0p65\'))))")
                ),
                cms.PSet(
                    doc = cms.string('hlt2PixelOnlyPFCentralJetTightIDPt20 OR hlt1PixelOnlyPFCentralJetTightIDPt50'),
                    selection = cms.string("max(filter(\'hlt1PixelOnlyPFCentralJetTightIDPt50\'),filter(\'hlt2PixelOnlyPFCentralJetTightIDPt20\'))")
                ),
                cms.PSet(
                    doc = cms.string('hlt2PFCentralJetTightIDPt30 OR hltPF2CentralJetTightIDPt30'),
                    selection = cms.string("max(filter(\'hltPF2CentralJetTightIDPt30\'),filter(\'hlt2PFCentralJetTightIDPt30\'))")
                ),
                cms.PSet(
                    doc = cms.string('hlt1PFCentralJetTightIDPt60'),
                    selection = cms.string("filter(\'hlt1PFCentralJetTightIDPt60\')")
                ),
                cms.PSet(
                    doc = cms.string('hltPF2CentralJetPt30PNet2BTagMean0p50'),
                    selection = cms.string("filter(\'hltPF2CentralJetPt30PNet2BTagMean0p50\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt4PFCentralJetPt25'),
                    selection = cms.string("filter(\'hlt4PFCentralJetPt25\')")
                ),
                cms.PSet(
                    doc = cms.string('hltPFCentralJetNoIDPt25PNet1BTag0p20'),
                    selection = cms.string("filter(\'hltPFCentralJetNoIDPt25PNet1BTag0p20\')")
                ),
                cms.PSet(
                    doc = cms.string('hltPFCentralJetNoIDPt25PNet1TauHTag0p50'),
                    selection = cms.string("filter(\'hltPFCentralJetNoIDPt25PNet1TauHTag0p50\')")
                ),
                cms.PSet(
                    doc = cms.string('hlt4PFCentralJetTightIDPt25'),
                    selection = cms.string("filter(\'hlt4PFCentralJetTightIDPt25\')")
                ),
                cms.PSet(
                    doc = cms.string('hltPFCentralJetPt25PNet2BTagMean0p55'),
                    selection = cms.string("filter(\'hltPFCentralJetPt25PNet2BTagMean0p55\')")
                ),
                cms.PSet(
                    doc = cms.string('hltL1PFJetCategoriesVBFinclLoose OR hltL1PFJetCategoriesVBFinclLooseTripleJet OR hltL1PFJetCategoriesVBFinclTight1050'),
                    selection = cms.string("max(filter(\'hltL1PFJetCategoriesVBFinclTight1050\'),max(filter(\'hltL1PFJetCategoriesVBFinclLooseTripleJet\'),filter(\'hltL1PFJetCategoriesVBFinclLoose\')))")
                ),
                cms.PSet(
                    doc = cms.string('hltL1PFJetCategoriesVBFdijetQuadjet OR hltL1PFJetCategoriesVBFdijetFivejets OR hltL1PFJetCategoriesVBFdijetSixjets OR hltL1PFJetCategoriesVBFdijetTightQuadjet800'),
                    selection = cms.string("max(filter(\'hltL1PFJetCategoriesVBFdijetTightQuadjet800\'),max(filter(\'hltL1PFJetCategoriesVBFdijetSixjets\'),max(filter(\'hltL1PFJetCategoriesVBFdijetFivejets\'),filter(\'hltL1PFJetCategoriesVBFdijetQuadjet\'))))")
                ),
                cms.PSet(
                    doc = cms.string('hltL1PFJetCategoriesVBFMET OR hltL1PFJetCategoriesVBFMETTripleJet OR hltL1PFJetCategoriesVBFMETTight650'),
                    selection = cms.string("max(filter(\'hltL1PFJetCategoriesVBFMETTight650\'),max(filter(\'hltL1PFJetCategoriesVBFMETTripleJet\'),filter(\'hltL1PFJetCategoriesVBFMET\')))")
                ),
                cms.PSet(
                    doc = cms.string('hltL1PFJetCategoriesVBFMu OR hltL1PFJetCategoriesVBFMuTripleJet OR hltL1PFJetCategoriesVBFMuTight750'),
                    selection = cms.string("max(filter(\'hltL1PFJetCategoriesVBFMuTight750\'),max(filter(\'hltL1PFJetCategoriesVBFMuTripleJet\'),filter(\'hltL1PFJetCategoriesVBFMu\')))")
                ),
                cms.PSet(
                    doc = cms.string('hltOverlapFilterDoublePFJet45Photon12 OR hltOverlapFilterDoublePFJet45Photon17 OR hltDiPFJet50Photon22OverlapFilter'),
                    selection = cms.string("max(filter(\'hltDiPFJet50Photon22OverlapFilter\'),max(filter(\'hltOverlapFilterDoublePFJet45Photon17\'),filter(\'hltOverlapFilterDoublePFJet45Photon12\')))")
                ),
                cms.PSet(
                    doc = cms.string('hltOverlapFilterDoublePFJet45Ele12 OR hltOverlapFilterDoublePFJet45Ele17 OR hltDiPFJet50Ele22OverlapFilter'),
                    selection = cms.string("max(filter(\'hltDiPFJet50Ele22OverlapFilter\'),max(filter(\'hltOverlapFilterDoublePFJet45Ele17\'),filter(\'hltOverlapFilterDoublePFJet45Ele12\')))")
                ),
                cms.PSet(
                    doc = cms.string('SinglePFJetX'),
                    selection = cms.string("min(path(\'HLT_PFJet*_v*\'),filter(\'hltSinglePFJet*\'))")
                ),
                cms.PSet(
                    doc = cms.string('SinglePFJetFwdX'),
                    selection = cms.string("min(path(\'HLT_PFJetFwd*_v*\'),filter(\'hltSinglePFFwdJet*\'))")
                ),
                cms.PSet(
                    doc = cms.string('DiPFJetAveX'),
                    selection = cms.string("min(path(\'HLT_DiPFJetAve*_v*\'),filter(\'hltDiPFJetAve*\'))")
                ),
                cms.PSet(
                    doc = cms.string('DiPFJetAveX_HFJEC'),
                    selection = cms.string("min(path(\'HLT_DiPFJetAve*_HFJEC_v*\'),filter(\'hltDiPFJetAve*ForHFJEC*\'))")
                )
            ),
            sel = cms.string('( type(0) || type(85) || type(86) || type(-99) )'),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        MET = cms.PSet(
            id = cms.int32(2),
            l1deltaR = cms.double(9999),
            l1deltaR_2 = cms.double(9999),
            l1seed = cms.string("type(-87) && coll(\'L1ETM\')"),
            l1seed_2 = cms.string("type(-87) && coll(\'L1ETMHF\')"),
            l2deltaR = cms.double(9999),
            l2seed = cms.string("type( 87) && coll(\'hltMetClean\')"),
            qualityBits = cms.VPSet(),
            sel = cms.string("type(87) && pt > 30 && coll(\'hltPFMETProducer\')"),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        MHT = cms.PSet(
            id = cms.int32(4),
            l1deltaR = cms.double(9999),
            l1deltaR_2 = cms.double(9999),
            l1seed = cms.string("type(-90) && coll(\'L1HTM\')"),
            l1seed_2 = cms.string("type(-90) && coll(\'L1HTMHF\')"),
            l2deltaR = cms.double(9999),
            l2seed = cms.string("type(90) && coll(\'hltHtMhtJet30\')"),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('hltCaloQuadJet30HT300 OR hltCaloQuadJet30HT320'),
                    selection = cms.string("max(filter(\'hltCaloQuadJet30HT320\'),filter(\'hltCaloQuadJet30HT300\'))")
                ),
                cms.PSet(
                    doc = cms.string('hltPFCentralJetsLooseIDQuad30HT300 OR hltPFCentralJetsLooseIDQuad30HT330'),
                    selection = cms.string("max(filter(\'hltPFCentralJetsLooseIDQuad30HT330\'),filter(\'hltPFCentralJetsLooseIDQuad30HT300\'))")
                )
            ),
            sel = cms.string('type(90)'),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        Muon = cms.PSet(
            id = cms.int32(13),
            l1deltaR = cms.double(0.5),
            l1seed = cms.string('type(-81)'),
            l2deltaR = cms.double(0.3),
            l2seed = cms.string("type(83) && coll(\'hltL2MuonCandidates\')"),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('TrkIsoVVL'),
                    selection = cms.string("max(filter(\'*RelTrkIsoVVLFiltered\'),filter(\'*RelTrkIsoVVLFiltered0p4\'))")
                ),
                cms.PSet(
                    doc = cms.string('Iso'),
                    selection = cms.string("max(filter(\'hltL3crIso*IsoFiltered\'),max(filter(\'hltL3crIso*IsoFiltered0p08\'),filter(\'hltL3crIso*IsoFiltered0p07\')))")
                ),
                cms.PSet(
                    doc = cms.string('OverlapFilter PFTau'),
                    selection = cms.string("filter(\'*OverlapFilterIsoMu*PFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('1mu'),
                    selection = cms.string("max(filter(\'hltL3crIsoL1sMu*IsoFiltered\'),max(filter(\'hltL3crIsoL1*SingleMu*IsoFiltered\'),max(filter(\'hltL3crIsoL1sMu*IsoFiltered0p08\'),max(filter(\'hltL3crIsoL1*SingleMu*IsoFiltered0p08\'),max(filter(\'hltL3crIsoL1sMu*IsoFiltered0p07\'),filter(\'hltL3crIsoL1*SingleMu*IsoFiltered0p07\'))))))")
                ),
                cms.PSet(
                    doc = cms.string('2mu'),
                    selection = cms.string("filter(\'hltDiMuon*Filtered*\')")
                ),
                cms.PSet(
                    doc = cms.string('1mu-1e'),
                    selection = cms.string("filter(\'hltMu*TrkIsoVVL*Ele*CaloIdLTrackIdLIsoVL*Filter*\')")
                ),
                cms.PSet(
                    doc = cms.string('1mu-1tau'),
                    selection = cms.string("filter(\'hlt*OverlapFilterIsoMu*PFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('3mu'),
                    selection = cms.string("filter(\'hltL3fL1TripleMu*\')")
                ),
                cms.PSet(
                    doc = cms.string('2mu-1e'),
                    selection = cms.string("max(filter(\'hltDiMu*Ele*CaloIdLTrackIdLElectronleg*Filter\'),filter(\'hltL3fL1DoubleMu*EG*Filtered*\'))")
                ),
                cms.PSet(
                    doc = cms.string('1mu-2e'),
                    selection = cms.string("max(filter(\'hltMu*DiEle*CaloIdLTrackIdLElectronleg*Filter\'),filter(\'hltL3fL1Mu*DoubleEG*Filtered*\'))")
                ),
                cms.PSet(
                    doc = cms.string('1mu (Mu50)'),
                    selection = cms.string("max(filter(\'hltL3fL1sMu*TkFiltered50*\'),filter(\'hltL3fL1sMu*L3Filtered50*\'))")
                ),
                cms.PSet(
                    doc = cms.string('1mu (Mu100)'),
                    selection = cms.string("max(filter(\'hltL3fL1sMu*TkFiltered100*\'),filter(\'hltL3fL1sMu*L3Filtered100*\'))")
                ),
                cms.PSet(
                    doc = cms.string('1mu-1photon'),
                    selection = cms.string("filter(\'hltMu17Photon30IsoCaloIdMuonlegL3Filtered17Q\')")
                ),
                cms.PSet(
                    doc = cms.string('1mu-1tau PNet'),
                    selection = cms.string("filter(\'hlt*OverlapFilterIsoMu*PNet*\')")
                )
            ),
            sel = cms.string("type(83) && pt > 5 && (coll(\'hltIterL3MuonCandidates\') || (pt > 45 && coll(\'hltHighPtTkMuonCands\')) || (pt > 95 && coll(\'hltOldL3MuonCandidates\')))"),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        Photon = cms.PSet(
            id = cms.int32(22),
            l1deltaR = cms.double(0.3),
            l1seed = cms.string('type(-98)'),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('hltEG33L1EG26HEFilter'),
                    selection = cms.string("filter(\'hltEG33L1EG26HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG50HEFilter'),
                    selection = cms.string("filter(\'hltEG50HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG75HEFilter'),
                    selection = cms.string("filter(\'hltEG75HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG90HEFilter'),
                    selection = cms.string("filter(\'hltEG90HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG120HEFilter'),
                    selection = cms.string("filter(\'hltEG120HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG150HEFilter'),
                    selection = cms.string("filter(\'hltEG150HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG175HEFilter'),
                    selection = cms.string("filter(\'hltEG175HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG200HEFilter'),
                    selection = cms.string("filter(\'hltEG200HEFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltHtEcal800'),
                    selection = cms.string("filter(\'hltHtEcal800\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG45EBTightIDTightIsoTrackIsoFilter'),
                    selection = cms.string("filter(\'hltEG45EBTightIDTightIsoTrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG50EBTightIDTightIsoTrackIsoFilter'),
                    selection = cms.string("filter(\'hltEG50EBTightIDTightIsoTrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG110EBTightIDTightIsoTrackIsoFilter'),
                    selection = cms.string("filter(\'hltEG110EBTightIDTightIsoTrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG120EBTightIDTightIsoTrackIsoFilter'),
                    selection = cms.string("filter(\'hltEG120EBTightIDTightIsoTrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('1mu-1photon'),
                    selection = cms.string("filter(\'hltMu17Photon30IsoCaloIdPhotonlegTrackIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG30LR9Id85b90eHE12R9Id50b80eR9IdLastFilter'),
                    selection = cms.string("filter(\'hltEG30LR9Id85b90eHE12R9Id50b80eR9IdLastFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG30LIso60CaloId15b35eHE12R9Id50b80eEcalIsoLastFilter'),
                    selection = cms.string("filter(\'hltEG30LIso60CaloId15b35eHE12R9Id50b80eEcalIsoLastFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG22Iso60CaloId15b35eHE12R9Id50b80eTrackIsoUnseededLastFilter'),
                    selection = cms.string("filter(\'hltEG22Iso60CaloId15b35eHE12R9Id50b80eTrackIsoUnseededLastFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG22R9Id85b90eHE12R9Id50b80eR9UnseededLastFilter'),
                    selection = cms.string("filter(\'hltEG22R9Id85b90eHE12R9Id50b80eR9UnseededLastFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG30Iso60CaloId15b35eR9Id50b90eHE12b10eR9Id50b80eEcalIsoFilter'),
                    selection = cms.string("filter(\'hltEG30Iso60CaloId15b35eR9Id50b90eHE12b10eR9Id50b80eEcalIsoFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG18TrackIso60Iso60CaloId15b35eR9Id50b90eHE12b10eR9Id50b80eTrackIsoUnseededFilter'),
                    selection = cms.string("filter(\'hltEG18TrackIso60Iso60CaloId15b35eR9Id50b90eHE12b10eR9Id50b80eTrackIsoUnseededFilter\')")
                ),
                cms.PSet(
                    doc = cms.string('hltEG*L1VBFLooseIsoEGHEFilter'),
                    selection = cms.string("filter(\'hltEG*L1VBFLooseIsoEGHEFilter\')")
                )
            ),
            sel = cms.string("type(92) && pt > 15 && coll(\'hltEgammaCandidates\')"),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        ),
        Tau = cms.PSet(
            id = cms.int32(15),
            l1deltaR = cms.double(0.3),
            l1seed = cms.string('type(-100)'),
            l2deltaR = cms.double(0.3),
            l2seed = cms.string("type(84) && coll(\'hltL2TauJetsL1IsoTauSeeded\')"),
            qualityBits = cms.VPSet(
                cms.PSet(
                    doc = cms.string('Loose'),
                    selection = cms.string("filter(\'*Loose*\')")
                ),
                cms.PSet(
                    doc = cms.string('Medium'),
                    selection = cms.string("filter(\'*Medium*\')")
                ),
                cms.PSet(
                    doc = cms.string('Tight'),
                    selection = cms.string("filter(\'*Tight*\')")
                ),
                cms.PSet(
                    doc = cms.string('DeepTau no spec WP'),
                    selection = cms.string("filter(\'*DeepTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('PNet no specified WP'),
                    selection = cms.string("filter(\'*PNetTauhTag*\')")
                ),
                cms.PSet(
                    doc = cms.string('ChargedIso'),
                    selection = cms.string("filter(\'*ChargedIso*\')")
                ),
                cms.PSet(
                    doc = cms.string('Dxy'),
                    selection = cms.string("filter(\'*Dxy*\')")
                ),
                cms.PSet(
                    doc = cms.string('e-tau inside filter'),
                    selection = cms.string("filter(\'*ETau*\')")
                ),
                cms.PSet(
                    doc = cms.string('mu-tau inside filter'),
                    selection = cms.string("filter(\'*MuTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('Single Tau'),
                    selection = cms.string("max(filter(\'hltSinglePFJet130PNetTauhTag*WPL2SingleTau\'),filter(\'hltSelectedPFTau180*SingleTauWPDeepTauL1HLTMatched\'))")
                ),
                cms.PSet(
                    doc = cms.string('VBF DiTau'),
                    selection = cms.string("max(filter(\'hltDoublePFJets20PNetTauhTagL2*DoubleTau*\'),filter(\'hltHpsDoublePFTau20*DeepTauDitauWPAgainstMuon\'))")
                ),
                cms.PSet(
                    doc = cms.string('di-tau'),
                    selection = cms.string("max(filter(\'hltDoublePFJets30PNetTauhTag*WPL2DoubleTau\'),filter(\'hlt*DoublePFTau*L1HLTMatched\'))")
                ),
                cms.PSet(
                    doc = cms.string('e-tau'),
                    selection = cms.string("max(filter(\'hltSinglePFJets30PNetTauhTag*WPMatchETauL1\'),filter(\'hltHpsOverlapFilterIsoEle*WPTightGsf*PFTau*\'))")
                ),
                cms.PSet(
                    doc = cms.string('mu-tau'),
                    selection = cms.string("max(filter(\'hltSinglePFJets27PNetTauhTag*WPMatchMuTauL1\'),filter(\'hltHpsOverlapFilterIsoMu*PFTau*\'))")
                ),
                cms.PSet(
                    doc = cms.string('di-tau + PFJet'),
                    selection = cms.string("max(filter(\'hltDoublePFJets26PNetTauhTagL2DoubleTau*Jet*\'),filter(\'hltHpsOverlapFilterDeepTauDoublePFTau*PFJet*\'))")
                ),
                cms.PSet(
                    doc = cms.string('e-tau displaced'),
                    selection = cms.string("filter(\'hltHpsOverlapFilterDisplacedEle*DisplPFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('mu-tau displaced'),
                    selection = cms.string("filter(\'hltHpsOverlapFilterDisplacedMu*DisplPFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('di-tau displaced'),
                    selection = cms.string("filter(\'hlt*Double*ChargedIsoDisplPFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('Monitoring'),
                    selection = cms.string("filter(\'*Monitoring\')")
                ),
                cms.PSet(
                    doc = cms.string('VBF SingleTau Monitoring'),
                    selection = cms.string("max(filter(\'hltSinglePFJet45PNetTauhTagL2*VBFIsoTauMonitoring*\'),filter(\'*MonitoringForVBFIsoTau\'))")
                ),
                cms.PSet(
                    doc = cms.string('DiTau+Jet Monitoring'),
                    selection = cms.string("max(filter(\'hltSinglePFJet26PNetTauhTag*L2Mu18TauYY*\'),filter(\'hltHpsOverlapFilter*DeepTauPFTau*30Monitoring*\'))")
                ),
                cms.PSet(
                    doc = cms.string('Monitoring muTau displaced'),
                    selection = cms.string("filter(\'hltHpsOverlapFilterIsoMu*MediumChargedIsoDisplTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('OneProng'),
                    selection = cms.string("filter(\'*OneProng*\')")
                ),
                cms.PSet(
                    doc = cms.string('DiTau Monitoring'),
                    selection = cms.string("max(filter(\'hltSinglePFJet30PNetTauhTag*WPL2MuXXTauYY\'),filter(\'hltHpsOverlapFilterIsoMu24*DitauWPDeepTauPFTau35Monitoring\'))")
                ),
                cms.PSet(
                    doc = cms.string('OverlapFilter'),
                    selection = cms.string("filter(\'*OverlapFilter*\')")
                ),
                cms.PSet(
                    doc = cms.string('VBF DiTau monitoring'),
                    selection = cms.string("max(filter(\'hltSinglePFJet20PNetTauhTag*VBFDiTau*L2Tau\'),filter(\'hltHpsOverlapFilterIsoMu24*DeepTauPFTau20\'))")
                ),
                cms.PSet(
                    doc = cms.string('SingleTau Monitoring'),
                    selection = cms.string("max(filter(\'hltSinglePFJet130PNetTauhTag*WPL2Mu22Tau40\'),filter(\'hltHpsOverlapFilterIsoMu24*SingleTauWPDeepTauPFTau180L1Seeded\'))")
                ),
                cms.PSet(
                    doc = cms.string('MatchL1HLT'),
                    selection = cms.string("max(filter(\'*L1Seeded\'),filter(\'*L1HLTMatched*\'))")
                ),
                cms.PSet(
                    doc = cms.string('HPS'),
                    selection = cms.string("filter(\'*Hps*\')")
                ),
                cms.PSet(
                    doc = cms.string('single PF-tau inside filter'),
                    selection = cms.string("filter(\'*SinglePFTau*\')")
                ),
                cms.PSet(
                    doc = cms.string('VBF SingleTau'),
                    selection = cms.string("max(filter(\'hltSinglePFJet45PNetTauhTagL2*VBFIsoTau*\'),filter(\'hltHpsSinglePFTau45*DitauWPDeepTauL1HLTMatchedSingleTauHLT\'))")
                )
            ),
            sel = cms.string("type(84) && pt > 5 && ( coll(\'*Tau*\') || filter(\'*Loose*\') || filter(\'*Medium*\') || filter(\'*Tight*\') || filter(\'*DeepTau*\') || filter(\'*ChargedIso*\') || filter(\'hltL2Tau*IsoFilter*\') || filter(\'hltL2TauTagNNFilter*\') || filter(\'*OverlapFilter*\') || filter(\'*DisplPFTau*\') || filter(\'*VBFIsoTau*\') || filter(\'*Monitoring*\') || filter(\'*DoublePFTau*\') || filter(\'*SingleTau*\') || filter(\'hlt*SelectedPFTau\') || filter(\'*ETau*\') || filter(\'*MuTau*\') || filter(\'*PNetTauhTag*\') )"),
            skipObjectsNotPassingQualityBits = cms.bool(True)
        )
    ),
    src = cms.InputTag("unpackedPatTrigger")
)


process.triggerObjectTableProducer = cms.EDProducer("TriggerObjectTableProducer",
    l1EG = cms.required.InputTag,
    l1Jet = cms.required.InputTag,
    l1Muon = cms.required.InputTag,
    l1Sum = cms.required.InputTag,
    l1Tau = cms.required.InputTag,
    mightGet = cms.optional.untracked.vstring,
    name = cms.required.string,
    selections = cms.PSet(
        allowAnyLabel_=cms.required.PSetTemplate(
            doc = cms.string(''),
            id = cms.required.int32,
            l1deltaR = cms.required.double,
            l1deltaR_2 = cms.required.double,
            l1seed = cms.required.string,
            l1seed_2 = cms.required.string,
            l2deltaR = cms.required.double,
            l2seed = cms.required.string,
            qualityBits = cms.required.VPSet,
            sel = cms.required.string,
            skipObjectsNotPassingQualityBits = cms.required.bool
        )
    ),
    src = cms.required.InputTag
)


process.trkMetTable = cms.EDProducer("SimplePATMETFlatTableProducer",
    doc = cms.string('Track MET computed with tracks from PV0 ( pvAssociationQuality()>=4 ) '),
    extension = cms.bool(False),
    externalVariables = cms.PSet(

    ),
    maxLen = cms.optional.uint32,
    mightGet = cms.optional.untracked.vstring,
    name = cms.string('TrkMET'),
    singleton = cms.bool(True),
    skipNonExistingSrc = cms.bool(False),
    src = cms.InputTag("slimmedMETs"),
    variables = cms.PSet(
        phi = cms.PSet(
            doc = cms.string('raw track MET phi'),
            expr = cms.string("corPhi(\'RawTrk\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        pt = cms.PSet(
            doc = cms.string('raw track MET pt'),
            expr = cms.string("corPt(\'RawTrk\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        ),
        sumEt = cms.PSet(
            doc = cms.string('raw track scalar sum of Et'),
            expr = cms.string("corSumEt(\'RawTrk\')"),
            lazyEval = cms.untracked.bool(False),
            precision = cms.int32(10),
            type = cms.string('float')
        )
    )
)


process.ttbarCategoryTable = cms.EDProducer("GlobalVariablesTableProducer",
    extension = cms.bool(False),
    mightGet = cms.optional.untracked.vstring,
    name = cms.string(''),
    variables = cms.PSet(
        genTtbarId = cms.PSet(
            doc = cms.string('ttbar categorization'),
            precision = cms.int32(-1),
            src = cms.InputTag("categorizeGenTtbar","genTtbarId"),
            type = cms.string('int')
        )
    )
)


process.unpackedPatTrigger = cms.EDProducer("PATTriggerObjectStandAloneUnpacker",
    patTriggerObjectsStandAlone = cms.InputTag("slimmedPatTrigger"),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    unpackFilterLabels = cms.bool(True)
)


process.updatedJets = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("jetCorrFactorsNano")),
    jetSource = cms.InputTag("slimmedJets"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedJetsAK8 = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("jetCorrFactorsAK8")),
    jetSource = cms.InputTag("slimmedJetsAK8"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedJetsAK8WithUserData = cms.EDProducer("PATJetUserDataEmbedder",
    src = cms.InputTag("updatedJetsAK8"),
    userFloats = cms.PSet(

    ),
    userInts = cms.PSet(

    )
)


process.updatedJetsPuppi = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(False),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("jetPuppiCorrFactorsNano")),
    jetSource = cms.InputTag("slimmedJetsPuppi"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedJetsPuppiWithUserData = cms.EDProducer("PATJetUserDataEmbedder",
    src = cms.InputTag("updatedJetsPuppi"),
    userFloats = cms.PSet(
        hfsigmaEtaEta = cms.InputTag("hfJetPuppiShowerShapeforNanoAOD","sigmaEtaEta"),
        hfsigmaPhiPhi = cms.InputTag("hfJetPuppiShowerShapeforNanoAOD","sigmaPhiPhi"),
        muonSubtrRawEta = cms.InputTag("basicJetsPuppiForMetForT1METNano","MuonSubtrRawEta"),
        muonSubtrRawPhi = cms.InputTag("basicJetsPuppiForMetForT1METNano","MuonSubtrRawPhi"),
        muonSubtrRawPt = cms.InputTag("basicJetsPuppiForMetForT1METNano","MuonSubtrRawPt")
    ),
    userInts = cms.PSet(
        hfadjacentEtaStripsSize = cms.InputTag("hfJetPuppiShowerShapeforNanoAOD","adjacentEtaStripsSize"),
        hfcentralEtaStripSize = cms.InputTag("hfJetPuppiShowerShapeforNanoAOD","centralEtaStripSize")
    )
)


process.updatedJetsWithUserData = cms.EDProducer("PATJetUserDataEmbedder",
    src = cms.InputTag("updatedJets"),
    userFloats = cms.PSet(
        chFPV0EF = cms.InputTag("jercVars","chargedFromPV0EnergyFraction"),
        leadTrackPt = cms.InputTag("bJetVars","leadTrackPt"),
        leptonDeltaR = cms.InputTag("bJetVars","leptonDeltaR"),
        leptonPtRelInvv0 = cms.InputTag("bJetVars","leptonPtRelInvv0"),
        leptonPtRelv0 = cms.InputTag("bJetVars","leptonPtRelv0"),
        muonSubtrRawEta = cms.InputTag("basicJetsForMetForT1METNano","MuonSubtrRawEta"),
        muonSubtrRawPhi = cms.InputTag("basicJetsForMetForT1METNano","MuonSubtrRawPhi"),
        muonSubtrRawPt = cms.InputTag("basicJetsForMetForT1METNano","MuonSubtrRawPt"),
        ptD = cms.InputTag("bJetVars","ptD"),
        puIdNanoDisc = cms.InputTag("pileupJetIdNano","fullDiscriminant"),
        qgl = cms.InputTag("qgtagger","qgLikelihood"),
        vtx3dL = cms.InputTag("bJetVars","vtx3dL"),
        vtx3deL = cms.InputTag("bJetVars","vtx3deL"),
        vtxMass = cms.InputTag("bJetVars","vtxMass"),
        vtxPt = cms.InputTag("bJetVars","vtxPt")
    ),
    userInts = cms.PSet(
        leptonPdgId = cms.InputTag("bJetVars","leptonPdgId"),
        puIdNanoId = cms.InputTag("pileupJetIdNano","fullId"),
        vtxNtrk = cms.InputTag("bJetVars","vtxNtrk")
    )
)


process.updatedLowPtElectrons = cms.EDProducer("PATElectronUpdater",
    computeMiniIso = cms.bool(True),
    fixDxySign = cms.bool(False),
    miniIsoParamsB = cms.vdouble(
        0.05, 0.2, 10.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0
    ),
    miniIsoParamsE = cms.vdouble(
        0.05, 0.2, 10.0, 0.0, 0.015,
        0.015, 0.08, 0.0, 0.0
    ),
    pfCandsForMiniIso = cms.InputTag("packedPFCandidates"),
    src = cms.InputTag("modifiedLowPtElectrons"),
    vertices = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.updatedLowPtElectronsWithUserData = cms.EDProducer("PATElectronUserDataEmbedder",
    src = cms.InputTag("updatedLowPtElectrons"),
    userCands = cms.PSet(

    ),
    userFloats = cms.PSet(
        miniIsoAll = cms.InputTag("isoForLowPtEle","miniIsoAll"),
        miniIsoChg = cms.InputTag("isoForLowPtEle","miniIsoChg")
    ),
    userIntFromBools = cms.PSet(

    ),
    userInts = cms.PSet(

    )
)


process.updatedPatJets = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag("updatedPatJetCorrFactors"),
    jetSource = cms.InputTag("slimmedJets"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")),
    jetSource = cms.InputTag("slimmedJetsAK8PFPuppiSoftDropSubjetsNoDeepTags"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(False),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedPatJetsSlimmedAK8DeepTags = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsSlimmedAK8DeepTags")),
    jetSource = cms.InputTag("slimmedJetsAK8NoDeepTags"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(False),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedPatJetsSlimmedDeepFlavour = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsSlimmedDeepFlavour")),
    jetSource = cms.InputTag("slimmedJetsPuppiNoDeepTags"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(False),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedPatJetsTransientCorrectedAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(
        cms.InputTag("pfDeepFlavourJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfDeepFlavourJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"), cms.InputTag("pfDeepFlavourJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probbb"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probdimudata"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probdimumc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probele"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probemudata"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probemumc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probg"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probmu"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probmutaudata"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probmutaumc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h1p"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaum3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h1p"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptcorr"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptnu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptreshigh"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptreslow"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptcorr"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptnu"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptreshigh"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","ptreslow"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour","BvsAll")
    ),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsTransientCorrectedAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")),
    jetSource = cms.InputTag("updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(
        cms.InputTag("pfDeepFlavourTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"), cms.InputTag("pfDeepCSVTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"), cms.InputTag("pfImpactParameterTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"), cms.InputTag("pfUnifiedParticleTransformerAK4TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
    ),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedPatJetsTransientCorrectedSlimmedAK8DeepTags = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag( (
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron000"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron001"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron002"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron003"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron004"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron005"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron006"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron007"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron008"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron009"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron010"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron011"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron012"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron013"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron014"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron015"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron016"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron017"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron018"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron019"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron020"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron021"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron022"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron023"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron024"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron025"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron026"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron027"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron028"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron029"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron030"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron031"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron032"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron033"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron034"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron035"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron036"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron037"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron038"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron039"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron040"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron041"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron042"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron043"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron044"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron045"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron046"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron047"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron048"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron049"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron050"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron051"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron052"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron053"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron054"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron055"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron056"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron057"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron058"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron059"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron060"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron061"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron062"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron063"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron064"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron065"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron066"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron067"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron068"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron069"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron070"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron071"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron072"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron073"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron074"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron075"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron076"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron077"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron078"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron079"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron080"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron081"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron082"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron083"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron084"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron085"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron086"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron087"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron088"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron089"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron090"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron091"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron092"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron093"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron094"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron095"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron096"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron097"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron098"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron099"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron100"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron101"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron102"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron103"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron104"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron105"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron106"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron107"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron108"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron109"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron110"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron111"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron112"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron113"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron114"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron115"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron116"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron117"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron118"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron119"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron120"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron121"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron122"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron123"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron124"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron125"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron126"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron127"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron128"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron129"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron130"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron131"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron132"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron133"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron134"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron135"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron136"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron137"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron138"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron139"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron140"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron141"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron142"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron143"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron144"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron145"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron146"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron147"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron148"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron149"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron150"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron151"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron152"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron153"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron154"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron155"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron156"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron157"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron158"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron159"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron160"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron161"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron162"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron163"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron164"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron165"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron166"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron167"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron168"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron169"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron170"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron171"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron172"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron173"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron174"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron175"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron176"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron177"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron178"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron179"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron180"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron181"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron182"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron183"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron184"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron185"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron186"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron187"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron188"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron189"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron190"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron191"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron192"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron193"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron194"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron195"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron196"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron197"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron198"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron199"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron200"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron201"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron202"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron203"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron204"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron205"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron206"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron207"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron208"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron209"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron210"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron211"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron212"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron213"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron214"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron215"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron216"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron217"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron218"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron219"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron220"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron221"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron222"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron223"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron224"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron225"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron226"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron227"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron228"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron229"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron230"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron231"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron232"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron233"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron234"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron235"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron236"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron237"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron238"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron239"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron240"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron241"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron242"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron243"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron244"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron245"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron246"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron247"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron248"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron249"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron250"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron251"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron252"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron253"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron254"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","hidNeuron255"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","massCorrGeneric"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","massCorrX2p"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probQCD"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probTopbWev"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probTopbWmv"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probTopbWq"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probTopbWqq"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probTopbWtauhv"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probWithMassTopvsQCD"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probWithMassWvsQCD"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probWithMassZvsQCD"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXWW3q"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXWW4q"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXWWqqev"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXWWqqmv"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXbb"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXcc"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXcs"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXqq"),
        cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXtauhtaue"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXtauhtauh"), cms.InputTag("pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags","probXtauhtaum"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"),
        cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXbb"), cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXcc"),
        cms.InputTag("pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags","probXqq"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","masscorr"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHbb"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHcc"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHgg"),
        cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHqq"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHte"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHtm"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probHtt"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD0hf"),
        cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD1hf"), cms.InputTag("pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags","probQCD2hf"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probHqqqq"),
        cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDbb"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probQCDothers"),
        cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbcq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbel"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbmu"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbq"),
        cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbqq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probTbta"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probWcq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probWqq"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZbb"),
        cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZcc"), cms.InputTag("pfParticleNetJetTagsSlimmedAK8DeepTags","probZqq"), cms.InputTag("pfParticleNetMassRegressionJetTagsSlimmedAK8DeepTags","mass"), cms.InputTag("pfMassDecorrelatedParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","XbbvsQCD"), cms.InputTag("pfMassDecorrelatedParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","XccvsQCD"),
        cms.InputTag("pfMassDecorrelatedParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","XqqvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","H4qvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","HbbvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","HccvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","TvsQCD"),
        cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","WvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","ZbbvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","ZccvsQCD"), cms.InputTag("pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags","ZvsQCD"), cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HbbvsQCD"),
        cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HccvsQCD"), cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HggvsQCD"), cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HqqvsQCD"), cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HtevsQCD"), cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HtmvsQCD"),
        cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","HttvsQCD"), cms.InputTag("pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags","WvsQCD") ) 
    ),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsTransientCorrectedSlimmedAK8DeepTags")),
    jetSource = cms.InputTag("updatedPatJetsSlimmedAK8DeepTags"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(cms.InputTag("pfGlobalParticleTransformerAK8TagInfosSlimmedAK8DeepTags"), cms.InputTag("pfParticleNetTagInfosSlimmedAK8DeepTags"), cms.InputTag("pfParticleNetFromMiniAODAK8TagInfosSlimmedAK8DeepTags")),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.updatedPatJetsTransientCorrectedSlimmedDeepFlavour = cms.EDProducer("PATJetUpdater",
    addBTagInfo = cms.bool(True),
    addDiscriminators = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addTagInfos = cms.bool(False),
    discriminatorSources = cms.VInputTag(
        cms.InputTag("pfDeepFlavourJetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfDeepFlavourJetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfDeepFlavourJetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfDeepFlavourJetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfDeepFlavourJetTagsSlimmedDeepFlavour","problepb"),
        cms.InputTag("pfDeepFlavourJetTagsSlimmedDeepFlavour","probuds"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probc"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probele"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probg"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probmu"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h0p"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaum3h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup1h2p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h0p"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","probuds"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","ptcorr"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","ptnu"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","ptreshigh"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour","ptreslow"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","probq"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","ptcorr"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","ptnu"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","ptreshigh"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour","ptreslow"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probc"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probdimudata"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probdimumc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probele"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probemudata"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probemumc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probmu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probmutaudata"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probmutaumc"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum1h2p"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaum3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup1h2p"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","ptcorr"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","ptnu"),
        cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","ptreshigh"), cms.InputTag("pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour","ptreslow"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probbb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probc"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probd"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probdimudata"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probdimumc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probele"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probemudata"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probemumc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probg"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","problepb"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probmu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probmutaudata"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probmutaumc"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probs"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum1h2p"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaum3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup1h2p"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h0p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probtaup3h1p"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","probu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","ptcorr"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","ptnu"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","ptreshigh"), cms.InputTag("pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour","ptreslow"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","BvsAll"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","CvsB"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","CvsL"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","QvsG"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","TauVsEle"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","TauVsJet"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour","TauVsMu"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardDiscriminatorsJetTagsSlimmedDeepFlavour","QvsG"),
        cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","BvsAll"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","CvsB"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","CvsL"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","QvsG"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","SvsBC"),
        cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","SvsUDG"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","TauVsEle"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","TauVsJet"), cms.InputTag("pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour","TauVsMu"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","BvsAll"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","CvsB"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","CvsL"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","QvsG"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","SvsBC"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","SvsUDG"),
        cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","TauVsEle"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","TauVsJet"), cms.InputTag("pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour","TauVsMu")
    ),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsTransientCorrectedSlimmedDeepFlavour")),
    jetSource = cms.InputTag("updatedPatJetsSlimmedDeepFlavour"),
    mightGet = cms.optional.untracked.vstring,
    printWarning = cms.bool(True),
    sort = cms.bool(True),
    tagInfoSources = cms.VInputTag(
        cms.InputTag("pfDeepFlavourTagInfosSlimmedDeepFlavour"), cms.InputTag("pfDeepCSVTagInfosSlimmedDeepFlavour"), cms.InputTag("pfImpactParameterTagInfosSlimmedDeepFlavour"), cms.InputTag("pfInclusiveSecondaryVertexFinderTagInfosSlimmedDeepFlavour"), cms.InputTag("pfParticleNetFromMiniAODAK4PuppiCentralTagInfosSlimmedDeepFlavour"),
        cms.InputTag("pfParticleNetFromMiniAODAK4PuppiForwardTagInfosSlimmedDeepFlavour"), cms.InputTag("pfUnifiedParticleTransformerAK4TagInfosSlimmedDeepFlavour"), cms.InputTag("pfUnifiedParticleTransformerAK4V1TagInfosSlimmedDeepFlavour")
    ),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring(),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        )
    )
)


process.vertexTable = cms.EDProducer("VertexTableProducer",
    dlenMin = cms.double(0),
    dlenSigMin = cms.double(3),
    goodPvCut = cms.string('!isFake && ndof > 4 && abs(z) <= 24 && position.Rho <= 2'),
    pfcSrc = cms.InputTag("packedPFCandidates"),
    pvName = cms.string('PV'),
    pvSrc = cms.InputTag("offlineSlimmedPrimaryVertices"),
    svCut = cms.string(''),
    svDoc = cms.string('secondary vertices from IVF algorithm'),
    svName = cms.string('SV'),
    svSrc = cms.InputTag("linkedObjects","vertices")
)


process.BadChargedCandidateFilter = cms.EDFilter("BadParticleFilter",
    PFCandidates = cms.InputTag("particleFlow"),
    algo = cms.int32(14),
    filterType = cms.string('BadChargedCandidate'),
    innerTrackRelErr = cms.double(1),
    maxDR = cms.double(1e-05),
    mightGet = cms.optional.untracked.vstring,
    minDzBestTrack = cms.double(-1),
    minMuonPt = cms.double(100),
    minMuonTrackRelErr = cms.double(2),
    minPtDiffRel = cms.double(1e-05),
    muons = cms.InputTag("muons"),
    segmentCompatibility = cms.double(0.3),
    taggingMode = cms.bool(False),
    vtx = cms.InputTag("offlinePrimaryVertices")
)


process.BadChargedCandidateTagger = cms.EDFilter("BadParticleFilter",
    PFCandidates = cms.InputTag("packedPFCandidates"),
    algo = cms.int32(14),
    filterType = cms.string('BadChargedCandidate'),
    innerTrackRelErr = cms.double(1),
    maxDR = cms.double(1e-05),
    mightGet = cms.optional.untracked.vstring,
    minDzBestTrack = cms.double(-1),
    minMuonPt = cms.double(100),
    minMuonTrackRelErr = cms.double(2),
    minPtDiffRel = cms.double(1e-05),
    muons = cms.InputTag("slimmedMuons"),
    segmentCompatibility = cms.double(0.3),
    taggingMode = cms.bool(True),
    vtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.BadPFMuonFilter = cms.EDFilter("BadParticleFilter",
    PFCandidates = cms.InputTag("particleFlow"),
    algo = cms.int32(14),
    filterType = cms.string('BadPFMuon'),
    innerTrackRelErr = cms.double(1),
    maxDR = cms.double(0.001),
    mightGet = cms.optional.untracked.vstring,
    minDzBestTrack = cms.double(-1),
    minMuonPt = cms.double(100),
    minMuonTrackRelErr = cms.double(2),
    minPtDiffRel = cms.double(0),
    muons = cms.InputTag("muons"),
    segmentCompatibility = cms.double(0.3),
    taggingMode = cms.bool(False),
    vtx = cms.InputTag("offlinePrimaryVertices")
)


process.BadPFMuonTagger = cms.EDFilter("BadParticleFilter",
    PFCandidates = cms.InputTag("packedPFCandidates"),
    algo = cms.int32(14),
    filterType = cms.string('BadPFMuon'),
    innerTrackRelErr = cms.double(1),
    maxDR = cms.double(0.001),
    mightGet = cms.optional.untracked.vstring,
    minDzBestTrack = cms.double(-1),
    minMuonPt = cms.double(100),
    minMuonTrackRelErr = cms.double(2),
    minPtDiffRel = cms.double(0),
    muons = cms.InputTag("slimmedMuons"),
    segmentCompatibility = cms.double(0.3),
    taggingMode = cms.bool(True),
    vtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.CountBToTrkTrkMuMu = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    minNumber = cms.uint32(1),
    src = cms.InputTag("BToTrkTrkMuMu")
)


process.CountDiMuonBPH = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    minNumber = cms.uint32(1),
    src = cms.InputTag("MuMu","SelectedDiLeptons")
)


process.CountDiTrack = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    minNumber = cms.uint32(1),
    src = cms.InputTag("DiTrack")
)


process.badGlobalMuonTagger = cms.EDFilter("BadGlobalMuonTagger",
    muonPtCut = cms.double(20),
    muons = cms.InputTag("slimmedMuons"),
    selectClones = cms.bool(False),
    taggingMode = cms.bool(True),
    vtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.badGlobalMuonTaggerMAOD = cms.EDFilter("BadGlobalMuonTagger",
    muonPtCut = cms.double(20),
    muons = cms.InputTag("slimmedMuons"),
    selectClones = cms.bool(False),
    taggingMode = cms.bool(False),
    vtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.chsForSATkJets = cms.EDFilter("CandPtrSelector",
    cut = cms.string('charge()!=0 && pvAssociationQuality()>=5 && vertexRef().key()==0'),
    src = cms.InputTag("packedPFCandidates")
)


process.cloneGlobalMuonTagger = cms.EDFilter("BadGlobalMuonTagger",
    muonPtCut = cms.double(20),
    muons = cms.InputTag("slimmedMuons"),
    selectClones = cms.bool(True),
    taggingMode = cms.bool(True),
    vtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.cloneGlobalMuonTaggerMAOD = cms.EDFilter("BadGlobalMuonTagger",
    muonPtCut = cms.double(20),
    muons = cms.InputTag("slimmedMuons"),
    selectClones = cms.bool(True),
    taggingMode = cms.bool(False),
    vtx = cms.InputTag("offlineSlimmedPrimaryVertices")
)


process.countTrgMuons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    minNumber = cms.uint32(2),
    src = cms.InputTag("muonBPH","SelectedMuons")
)


process.ecalBadCalibFilter = cms.EDFilter("EcalBadCalibFilter",
    EcalRecHitSource = cms.InputTag("reducedEcalRecHitsEE"),
    baddetEcal = cms.vuint32(
        872439604, 872422825, 872420274, 872423218, 872423215,
        872416066, 872435036, 872439336, 872420273, 872436907,
        872420147, 872439731, 872436657, 872420397, 872439732,
        872439339, 872439603, 872422436, 872439861, 872437051,
        872437052, 872420649, 872421950, 872437185, 872422564,
        872421566, 872421695, 872421955, 872421567, 872437184,
        872421951, 872421694, 872437056, 872437057, 872437313
    ),
    debug = cms.bool(False),
    ecalMinEt = cms.double(50.0),
    taggingMode = cms.bool(False)
)


process.ecalBadCalibFilterNanoTagger = cms.EDFilter("EcalBadCalibFilter",
    EcalRecHitSource = cms.InputTag("reducedEcalRecHitsEE"),
    baddetEcal = cms.vuint32(
        872439604, 872422825, 872420274, 872423218, 872423215,
        872416066, 872435036, 872439336, 872420273, 872436907,
        872420147, 872439731, 872436657, 872420397, 872439732,
        872439339, 872439603, 872422436, 872439861, 872437051,
        872437052, 872420649, 872421950, 872437185, 872422564,
        872421566, 872421695, 872421955, 872421567, 872437184,
        872421951, 872421694, 872437056, 872437057, 872437313
    ),
    debug = cms.bool(False),
    ecalMinEt = cms.double(50.0),
    taggingMode = cms.bool(True)
)


process.finalBoostedTaus = cms.EDFilter("PATTauRefSelector",
    cut = cms.string("pt > 25 && tauID(\'decayModeFindingNewDMs\') && (tauID(\'byVVLooseIsolationMVArun2DBoldDMwLT\') || tauID(\'byVVLooseIsolationMVArun2DBnewDMwLT\') || tauID(\'byBoostedDeepTau20161718v2p0VSjetraw\') > 0.82)"),
    src = cms.InputTag("slimmedTausBoosted")
)


process.finalElectrons = cms.EDFilter("PATElectronRefSelector",
    cut = cms.string('pt > 5 '),
    src = cms.InputTag("slimmedElectronsWithUserData")
)


process.finalJets = cms.EDFilter("PATJetRefSelector",
    cut = cms.string('pt > 15'),
    src = cms.InputTag("updatedJetsWithUserData")
)


process.finalJetsAK8 = cms.EDFilter("PATJetRefSelector",
    cut = cms.string('pt > 170'),
    src = cms.InputTag("updatedJetsAK8WithUserData")
)


process.finalJetsPuppi = cms.EDFilter("PATJetRefSelector",
    cut = cms.string('pt > 15'),
    src = cms.InputTag("updatedJetsPuppiWithUserData")
)


process.finalLooseMuons = cms.EDFilter("PATMuonRefSelector",
    cut = cms.string('pt > 3 && track.isNonnull && isLooseMuon'),
    src = cms.InputTag("slimmedMuonsWithUserData")
)


process.finalLowPtElectrons = cms.EDFilter("PATElectronRefSelector",
    cut = cms.string("pt > 1. && electronID(\'ID\') > -0.25"),
    src = cms.InputTag("updatedLowPtElectronsWithUserData")
)


process.finalMuons = cms.EDFilter("PATMuonRefSelector",
    cut = cms.string("pt > 15 || (pt > 3 && (passed(\'CutBasedIdLoose\') || passed(\'SoftCutBasedId\') || passed(\'SoftMvaId\') || passed(\'CutBasedIdGlobalHighPt\') || passed(\'CutBasedIdTrkHighPt\')))"),
    src = cms.InputTag("slimmedMuonsWithUserData")
)


process.finalPhotons = cms.EDFilter("PATPhotonRefSelector",
    cut = cms.string('pt > 5 '),
    src = cms.InputTag("slimmedPhotonsWithUserData")
)


process.finalTaus = cms.EDFilter("PATTauRefSelector",
    cut = cms.string("pt > 18 && ((tauID(\'decayModeFindingNewDMs\') > 0.5 && (tauID(\'byLooseCombinedIsolationDeltaBetaCorr3Hits\') || (tauID(\'chargedIsoPtSumdR03\')+max(0.,tauID(\'neutralIsoPtSumdR03\')-0.072*tauID(\'puCorrPtSum\'))<2.5))) || (?isTauIDAvailable(\'byUTagCHSVSjetraw\')?tauID(\'byUTagCHSVSjetraw\'):-1) > 0.05 || (?isTauIDAvailable(\'byUTagPUPPIVSjetraw\')?tauID(\'byUTagPUPPIVSjetraw\'):-1) > 0.05)"),
    src = cms.InputTag("slimmedTaus")
)


process.genParticlesForJetsCharged = cms.EDFilter("CandPtrSelector",
    cut = cms.string('charge != 0 && pt > 0.3 && status == 1 && abs(pdgId) != 12 && abs(pdgId) != 14 && abs(pdgId) != 16'),
    src = cms.InputTag("prunedGenParticles")
)


process.jetSelectorForMetPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('pt>15 && abs(eta)<9.9'),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("basicJetsForMetPuppi")
)


process.pfCHS = cms.EDFilter("CandPtrSelector",
    cut = cms.string('fromPV(0)>0 || (vertexRef().key<=2 && abs(dz(0))<0.2)'),
    src = cms.InputTag("packedPFCandidates")
)


process.pfElectronsPuppi = cms.EDFilter("CandPtrSelector",
    cut = cms.string("pt > 5 && isPF && gsfTrack.isAvailable() && gsfTrack.hitPattern().numberOfLostHits(\'MISSING_INNER_HITS\') < 2"),
    src = cms.InputTag("slimmedElectrons")
)


process.pfMuonsPuppi = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 5.0 && isPFMuon && abs(eta) < 2.4'),
    src = cms.InputTag("slimmedMuons")
)


process.pfNoPileUpPuppi = cms.EDFilter("CandPtrSelector",
    cut = cms.string(''),
    src = cms.InputTag("packedPFCandidates")
)


process.pfPhotonsPuppi = cms.EDFilter("CandPtrSelector",
    cut = cms.string('abs(pdgId) = 22'),
    src = cms.InputTag("packedPFCandidates")
)


process.pfTausPuppi = cms.EDFilter("PATTauRefSelector",
    cut = cms.string('pt > 18.0 & abs(eta) < 2.6 & (? isTauIDAvailable("decayModeFinding") ? tauID("decayModeFinding") : -1) > 0.5 & isPFTau'),
    src = cms.InputTag("slimmedTaus")
)


process.pfTrk = cms.EDFilter("CandPtrSelector",
    cut = cms.string('charge()!=0 && pvAssociationQuality()>=4 && vertexRef().key()==0'),
    src = cms.InputTag("packedPFCandidates")
)


process.selectedFinalJetsAK8PFConstituents = cms.EDFilter("PATPackedCandidatePtrSelector",
    cut = cms.string(''),
    src = cms.InputTag("finalJetsAK8PFConstituents","constituents")
)


process.selectedPatJetsAK8PFPuppiSoftDrop = cms.EDFilter("PATJetSelector",
    cut = cms.string(''),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("patJetsAK8PFPuppiSoftDrop")
)


process.selectedPatJetsAK8PFPuppiSoftDropSubjets = cms.EDFilter("PATJetSelector",
    cut = cms.string(''),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("patJetsAK8PFPuppiSoftDropSubjets")
)


process.selectedPatJetsAK8Puppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('pt > 100'),
    cutLoose = cms.string('pt > 30'),
    nLoose = cms.uint32(3),
    src = cms.InputTag("patJetsAK8Puppi")
)


process.selectedPatJetsForMetT1T2Corr = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) < 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patJets")
)


process.selectedPatJetsForMetT1T2CorrPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) < 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patJets")
)


process.selectedPatJetsForMetT1T2SmearCorr = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) < 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patSmearedJets")
)


process.selectedPatJetsForMetT1T2SmearCorrPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) < 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patSmearedJetsPuppi")
)


process.selectedPatJetsForMetT2Corr = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) > 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patJets")
)


process.selectedPatJetsForMetT2CorrPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) > 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patJets")
)


process.selectedPatJetsForMetT2SmearCorr = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) > 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patSmearedJets")
)


process.selectedPatJetsForMetT2SmearCorrPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('abs(eta) > 9.9'),
    filter = cms.bool(False),
    src = cms.InputTag("patSmearedJetsPuppi")
)


process.selectedPatJetsPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string('pt > 10'),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("patJetsPuppi")
)


process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0 = cms.EDFilter("PATSingleVertexSelector",
    filter = cms.bool(False),
    mode = cms.string('firstVertex'),
    vertices = cms.InputTag("selectedVerticesForPFMEtCorrType0")
)


process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0Puppi = cms.EDFilter("PATSingleVertexSelector",
    filter = cms.bool(False),
    mode = cms.string('firstVertex'),
    vertices = cms.InputTag("selectedVerticesForPFMEtCorrType0Puppi")
)


process.selectedUpdatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour = cms.EDFilter("PATJetSelector",
    cut = cms.string(''),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("updatedPatJetsTransientCorrectedAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour")
)


process.selectedVerticesForPFMEtCorrType0 = cms.EDFilter("VertexSelector",
    cut = cms.string('isValid & ndof >= 4 & chi2 > 0 & tracksSize > 0 & abs(z) < 24 & abs(position.Rho) < 2.'),
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.selectedVerticesForPFMEtCorrType0Puppi = cms.EDFilter("VertexSelector",
    cut = cms.string('isValid & ndof >= 4 & chi2 > 0 & tracksSize > 0 & abs(z) < 24 & abs(position.Rho) < 2.'),
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.slimmedJetsAK8 = cms.EDFilter("PATJetSelector",
    cut = cms.string(''),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("updatedPatJetsTransientCorrectedSlimmedAK8DeepTags")
)


process.slimmedJetsPuppi = cms.EDFilter("PATJetSelector",
    cut = cms.string(''),
    cutLoose = cms.string(''),
    nLoose = cms.uint32(0),
    src = cms.InputTag("updatedPatJetsTransientCorrectedSlimmedDeepFlavour")
)


process.softActivityJets10 = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt>10'),
    src = cms.InputTag("softActivityJets")
)


process.softActivityJets2 = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt>2'),
    src = cms.InputTag("softActivityJets")
)


process.softActivityJets5 = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt>5'),
    src = cms.InputTag("softActivityJets")
)


process.tauGenJetsSelectorAllHadrons = cms.EDFilter("TauGenJetDecayModeSelector",
    filter = cms.bool(False),
    select = cms.vstring(
        'oneProng0Pi0',
        'oneProng1Pi0',
        'oneProng2Pi0',
        'oneProngOther',
        'threeProng0Pi0',
        'threeProng1Pi0',
        'threeProngOther',
        'rare'
    ),
    src = cms.InputTag("tauGenJets")
)


process.tauGenJetsSelectorAllHadronsForNano = cms.EDFilter("TauGenJetDecayModeSelector",
    filter = cms.bool(False),
    select = cms.vstring(
        'oneProng0Pi0',
        'oneProng1Pi0',
        'oneProng2Pi0',
        'oneProngOther',
        'threeProng0Pi0',
        'threeProng1Pi0',
        'threeProngOther',
        'rare'
    ),
    src = cms.InputTag("tauGenJetsForNano")
)


process.NANOAODoutput = cms.OutputModule("NanoAODOutputModule",
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('NANOAOD'),
        filterName = cms.untracked.string('')
    ),
    fileName = cms.untracked.string('file:BPH_test_data.root'),
    outputCommands = cms.untracked.vstring(
        'drop *',
        'keep nanoaodFlatTable_*Table_*_*',
        'keep edmTriggerResults_*_*_*',
        'keep String_*_genModel_*',
        'keep nanoaodMergeableCounterTable_*Table_*_*',
        'keep nanoaodUniqueString_nanoMetadata_*_*'
    )
)


process.DQMStore = cms.Service("DQMStore")


process.MessageLogger = cms.Service("MessageLogger",
    cerr = cms.untracked.PSet(
        FwkReport = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            reportEvery = cms.untracked.int32(1)
        ),
        FwkSummary = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            reportEvery = cms.untracked.int32(1)
        ),
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        enable = cms.untracked.bool(True),
        enableStatistics = cms.untracked.bool(False),
        lineLength = cms.optional.untracked.int32,
        noLineBreaks = cms.optional.untracked.bool,
        noTimeStamps = cms.untracked.bool(False),
        resetStatistics = cms.untracked.bool(False),
        statisticsThreshold = cms.untracked.string('WARNING'),
        threshold = cms.untracked.string('INFO'),
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            limit = cms.optional.untracked.int32,
            reportEvery = cms.untracked.int32(1),
            timespan = cms.optional.untracked.int32
        )
    ),
    cout = cms.untracked.PSet(
        enable = cms.untracked.bool(False),
        enableStatistics = cms.untracked.bool(False),
        lineLength = cms.optional.untracked.int32,
        noLineBreaks = cms.optional.untracked.bool,
        noTimeStamps = cms.optional.untracked.bool,
        resetStatistics = cms.untracked.bool(False),
        statisticsThreshold = cms.optional.untracked.string,
        threshold = cms.optional.untracked.string,
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            limit = cms.optional.untracked.int32,
            reportEvery = cms.untracked.int32(1),
            timespan = cms.optional.untracked.int32
        )
    ),
    debugModules = cms.untracked.vstring(),
    default = cms.untracked.PSet(
        limit = cms.optional.untracked.int32,
        lineLength = cms.untracked.int32(80),
        noLineBreaks = cms.untracked.bool(False),
        noTimeStamps = cms.untracked.bool(False),
        reportEvery = cms.untracked.int32(1),
        statisticsThreshold = cms.untracked.string('INFO'),
        threshold = cms.untracked.string('INFO'),
        timespan = cms.optional.untracked.int32,
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            limit = cms.optional.untracked.int32,
            reportEvery = cms.untracked.int32(1),
            timespan = cms.optional.untracked.int32
        )
    ),
    files = cms.untracked.PSet(
        allowAnyLabel_=cms.optional.untracked.PSetTemplate(
            enableStatistics = cms.untracked.bool(False),
            extension = cms.optional.untracked.string,
            filename = cms.optional.untracked.string,
            lineLength = cms.optional.untracked.int32,
            noLineBreaks = cms.optional.untracked.bool,
            noTimeStamps = cms.optional.untracked.bool,
            output = cms.optional.untracked.string,
            resetStatistics = cms.untracked.bool(False),
            statisticsThreshold = cms.optional.untracked.string,
            threshold = cms.optional.untracked.string,
            allowAnyLabel_=cms.optional.untracked.PSetTemplate(
                limit = cms.optional.untracked.int32,
                reportEvery = cms.untracked.int32(1),
                timespan = cms.optional.untracked.int32
            )
        )
    ),
    suppressDebug = cms.untracked.vstring(),
    suppressFwkInfo = cms.untracked.vstring(),
    suppressInfo = cms.untracked.vstring(),
    suppressWarning = cms.untracked.vstring(),
    allowAnyLabel_=cms.optional.untracked.PSetTemplate(
        limit = cms.optional.untracked.int32,
        reportEvery = cms.untracked.int32(1),
        timespan = cms.optional.untracked.int32
    )
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    CTPPSFastRecHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1357987)
    ),
    LHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    MuonSimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(987346)
    ),
    RPSiDetDigitizer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(137137)
    ),
    RPixDetDigitizer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(137137)
    ),
    VtxSmeared = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(98765432)
    ),
    ecalPreshowerRecHit = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(6541321)
    ),
    ecalRecHit = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(654321)
    ),
    externalLHEProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(234567)
    ),
    famosPileUp = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    fastSimProducer = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(13579)
    ),
    fastTrackerRecHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(24680)
    ),
    g4SimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11)
    ),
    generator = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hbhereco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hfreco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hiSignal = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hiSignalG4SimHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11)
    ),
    hiSignalLHCTransport = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(88776655)
    ),
    horeco = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    l1ParamMuons = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(6453209)
    ),
    mix = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixData = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixGenPU = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixRecoTracks = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixSimCaloHits = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    paramMuons = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(54525)
    ),
    saveFileName = cms.untracked.string(''),
    simBeamSpotFilter = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    simMuonCSCDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(11223344)
    ),
    simMuonDTDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonGEMDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonRPCDigis = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simSiStripDigiSimLink = cms.PSet(
        engineName = cms.untracked.string('MixMaxRng'),
        initialSeed = cms.untracked.uint32(1234567)
    )
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    debugV = cms.untracked.bool(False),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring(
        'HCAL',
        'ZDC',
        'EcalBarrel',
        'EcalEndcap',
        'EcalPreshower',
        'TOWER'
    )
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerGeometryFromDBEP = cms.ESProducer("CaloTowerGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.CaloTowerTopologyEP = cms.ESProducer("CaloTowerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.CastorDbProducer = cms.ESProducer("CastorDbProducer",
    appendToDataLabel = cms.string(''),
    dump = cms.untracked.vstring(),
    file = cms.untracked.string('')
)


process.CastorGeometryFromDBEP = cms.ESProducer("CastorGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    DDDetector = cms.ESInputTag("",""),
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    attribute = cms.string('MuStructure'),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(False),
    value = cms.string('MuonBarrelDT')
)


process.EcalBarrelGeometryFromDBEP = cms.ESProducer("EcalBarrelGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryFromDBEP = cms.ESProducer("EcalEndcapGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService",
    maxExtrapolationTimeInSec = cms.uint32(0)
)


process.EcalLaserCorrectionServiceMC = cms.ESProducer("EcalLaserCorrectionServiceMC",
    appendToDataLabel = cms.string('')
)


process.EcalPreshowerGeometryFromDBEP = cms.ESProducer("EcalPreshowerGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.GEMGeometryESModule = cms.ESProducer("GEMGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.HcalAlignmentEP = cms.ESProducer("HcalAlignmentEP")


process.HcalGeometryFromDBEP = cms.ESProducer("HcalGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.ParabolicParametrizedMagneticFieldProducer = cms.ESProducer("AutoParametrizedMagneticFieldProducer",
    label = cms.untracked.string('ParabolicMf'),
    valueOverride = cms.int32(-1),
    version = cms.string('Parabolic')
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    fromDD4hep = cms.untracked.bool(False),
    fromDDD = cms.untracked.bool(False)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0),
    PreFilter = cms.bool(False)
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    appendToDataLabel = cms.string(''),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        maxChgOneMIP = cms.double(6000.0),
        useLegacyError = cms.bool(False)
    )
)


process.TrackerAdditionalParametersPerDet = cms.ESProducer("TrackerAdditionalParametersPerDetESModule",
    appendToDataLabel = cms.string('')
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer",
    usePhase2Stacks = cms.bool(False)
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder'),
    appendToDataLabel = cms.string('')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("DD4hep_VolumeBasedMagneticFieldESProducerFromDB",
    debugBuilder = cms.untracked.bool(False),
    label = cms.untracked.string(''),
    valueOverride = cms.int32(-1)
)


process.ZdcGeometryFromDBEP = cms.ESProducer("ZdcGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.candidateBoostedDoubleSecondaryVertexAK8Computer = cms.ESProducer("CandidateBoostedDoubleSecondaryVertexESProducer",
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_AK8_BDT_PhaseI_v1.weights.xml.gz')
)


process.candidateBoostedDoubleSecondaryVertexCA15Computer = cms.ESProducer("CandidateBoostedDoubleSecondaryVertexESProducer",
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SecondaryVertex/data/BoostedDoubleSV_CA15_BDT_v3.weights.xml.gz')
)


process.candidateChargeBTagComputer = cms.ESProducer("CandidateChargeBTagESProducer",
    gbrForestLabel = cms.string(''),
    jetChargeExp = cms.double(0.8),
    svChargeExp = cms.double(0.5),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/ChargeBTag_4sep_2016.weights.xml.gz')
)


process.candidateCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    gbrForestLabel = cms.string('btag_CombinedMVAv2_BDT'),
    jetTagComputers = cms.vstring(
        'candidateJetProbabilityComputer',
        'candidateJetBProbabilityComputer',
        'candidateCombinedSecondaryVertexV2Computer',
        'softPFMuonComputer',
        'softPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV',
        'Jet_CSVIVF',
        'Jet_JP',
        'Jet_JBP',
        'Jet_SoftMu',
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.candidateCombinedSecondaryVertexSoftLeptonComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVRecoVertexNoSoftLepton',
        'CombinedSVPseudoVertexNoSoftLepton',
        'CombinedSVNoVertexNoSoftLepton',
        'CombinedSVRecoVertexSoftMuon',
        'CombinedSVPseudoVertexSoftMuon',
        'CombinedSVNoVertexSoftMuon',
        'CombinedSVRecoVertexSoftElectron',
        'CombinedSVPseudoVertexSoftElectron',
        'CombinedSVNoVertexSoftElectron'
    ),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexSoftLeptonCvsLComputer = cms.ESProducer("CandidateCombinedSecondaryVertexSoftLeptonCvsLESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVRecoVertexNoSoftLeptonCvsL',
        'CombinedSVPseudoVertexNoSoftLeptonCvsL',
        'CombinedSVNoVertexNoSoftLeptonCvsL',
        'CombinedSVRecoVertexSoftMuonCvsL',
        'CombinedSVPseudoVertexSoftMuonCvsL',
        'CombinedSVNoVertexSoftMuonCvsL',
        'CombinedSVRecoVertexSoftElectronCvsL',
        'CombinedSVPseudoVertexSoftElectronCvsL',
        'CombinedSVNoVertexSoftElectronCvsL'
    ),
    categoryVariableName = cms.string('vertexLeptonCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex',
        'CombinedSVIVFV2PseudoVertex',
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidateGhostTrackComputer = cms.ESProducer("CandidateGhostTrackESProducer",
    calibrationRecords = cms.vstring(
        'GhostTrackRecoVertex',
        'GhostTrackPseudoVertex',
        'GhostTrackNoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    recordLabel = cms.string(''),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True)
)


process.candidateJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    gbrForestLabel = cms.string('btag_CombinedMVAv2_BDT'),
    jetTagComputers = cms.vstring(
        'candidateNegativeOnlyJetProbabilityComputer',
        'candidateNegativeOnlyJetBProbabilityComputer',
        'candidateNegativeCombinedSecondaryVertexV2Computer',
        'negativeSoftPFMuonComputer',
        'negativeSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV',
        'Jet_CSVIVF',
        'Jet_JP',
        'Jet_JBP',
        'Jet_SoftMu',
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.candidateNegativeCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex',
        'CombinedSVIVFV2PseudoVertex',
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.candidateNegativeOnlyJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeOnlyJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeTrackCounting3D2ndComputer = cms.ESProducer("CandidateNegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidateNegativeTrackCounting3D3rdComputer = cms.ESProducer("CandidateNegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidatePositiveCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    gbrForestLabel = cms.string('btag_CombinedMVAv2_BDT'),
    jetTagComputers = cms.vstring(
        'candidatePositiveOnlyJetProbabilityComputer',
        'candidatePositiveOnlyJetBProbabilityComputer',
        'candidatePositiveCombinedSecondaryVertexV2Computer',
        'negativeSoftPFMuonComputer',
        'negativeSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(True),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV',
        'Jet_CSVIVF',
        'Jet_JP',
        'Jet_JBP',
        'Jet_SoftMu',
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.candidatePositiveCombinedSecondaryVertexV2Computer = cms.ESProducer("CandidateCombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex',
        'CombinedSVIVFV2PseudoVertex',
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.candidatePositiveOnlyJetBProbabilityComputer = cms.ESProducer("CandidateJetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidatePositiveOnlyJetProbabilityComputer = cms.ESProducer("CandidateJetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.candidateSimpleSecondaryVertex2TrkComputer = cms.ESProducer("CandidateSimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.candidateSimpleSecondaryVertex3TrkComputer = cms.ESProducer("CandidateSimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.candidateTrackCounting3D2ndComputer = cms.ESProducer("CandidateTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.candidateTrackCounting3D3rdComputer = cms.ESProducer("CandidateTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.charmTagsComputerCvsB = cms.ESProducer("CharmTaggerESProducer",
    defaultValueNoTracks = cms.bool(True),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton',
            'CombinedSVPseudoVertexNoSoftLepton',
            'CombinedSVNoVertexNoSoftLepton',
            'CombinedSVRecoVertexSoftMuon',
            'CombinedSVPseudoVertexSoftMuon',
            'CombinedSVNoVertexSoftMuon',
            'CombinedSVRecoVertexSoftElectron',
            'CombinedSVPseudoVertexSoftElectron',
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ),
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_b_PhaseI.xml')
)


process.charmTagsComputerCvsL = cms.ESProducer("CharmTaggerESProducer",
    defaultValueNoTracks = cms.bool(True),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton',
            'CombinedSVPseudoVertexNoSoftLepton',
            'CombinedSVNoVertexNoSoftLepton',
            'CombinedSVRecoVertexSoftMuon',
            'CombinedSVPseudoVertexSoftMuon',
            'CombinedSVNoVertexSoftMuon',
            'CombinedSVRecoVertexSoftElectron',
            'CombinedSVPseudoVertexSoftElectron',
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ),
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_udsg_PhaseI.xml')
)


process.charmTagsNegativeComputerCvsB = cms.ESProducer("CharmTaggerESProducer",
    defaultValueNoTracks = cms.bool(True),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(True),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton',
            'CombinedSVPseudoVertexNoSoftLepton',
            'CombinedSVNoVertexNoSoftLepton',
            'CombinedSVRecoVertexSoftMuon',
            'CombinedSVPseudoVertexSoftMuon',
            'CombinedSVNoVertexSoftMuon',
            'CombinedSVRecoVertexSoftElectron',
            'CombinedSVPseudoVertexSoftElectron',
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(True),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(-2.0),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(True)
    ),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ),
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_b_PhaseI.xml')
)


process.charmTagsNegativeComputerCvsL = cms.ESProducer("CharmTaggerESProducer",
    defaultValueNoTracks = cms.bool(True),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(True),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton',
            'CombinedSVPseudoVertexNoSoftLepton',
            'CombinedSVNoVertexNoSoftLepton',
            'CombinedSVRecoVertexSoftMuon',
            'CombinedSVPseudoVertexSoftMuon',
            'CombinedSVNoVertexSoftMuon',
            'CombinedSVRecoVertexSoftElectron',
            'CombinedSVPseudoVertexSoftElectron',
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(True),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(-2.0),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(0),
            sip3dSigMin = cms.double(-99999.9),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(True)
    ),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ),
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_udsg_PhaseI.xml')
)


process.charmTagsPositiveComputerCvsB = cms.ESProducer("CharmTaggerESProducer",
    defaultValueNoTracks = cms.bool(True),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton',
            'CombinedSVPseudoVertexNoSoftLepton',
            'CombinedSVNoVertexNoSoftLepton',
            'CombinedSVRecoVertexSoftMuon',
            'CombinedSVPseudoVertexSoftMuon',
            'CombinedSVNoVertexSoftMuon',
            'CombinedSVRecoVertexSoftElectron',
            'CombinedSVPseudoVertexSoftElectron',
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ),
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_b_PhaseI.xml')
)


process.charmTagsPositiveComputerCvsL = cms.ESProducer("CharmTaggerESProducer",
    defaultValueNoTracks = cms.bool(True),
    gbrForestLabel = cms.string(''),
    mvaName = cms.string('BDT'),
    slComputerCfg = cms.PSet(
        SoftLeptonFlip = cms.bool(False),
        calibrationRecords = cms.vstring(
            'CombinedSVRecoVertexNoSoftLepton',
            'CombinedSVPseudoVertexNoSoftLepton',
            'CombinedSVNoVertexNoSoftLepton',
            'CombinedSVRecoVertexSoftMuon',
            'CombinedSVPseudoVertexSoftMuon',
            'CombinedSVNoVertexSoftMuon',
            'CombinedSVRecoVertexSoftElectron',
            'CombinedSVPseudoVertexSoftElectron',
            'CombinedSVNoVertexSoftElectron'
        ),
        categoryVariableName = cms.string('vertexLeptonCategory'),
        charmCut = cms.double(1.5),
        correctVertexMass = cms.bool(True),
        minimumTrackWeight = cms.double(0.5),
        pseudoMultiplicityMin = cms.uint32(2),
        pseudoVertexV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        recordLabel = cms.string(''),
        trackFlip = cms.bool(False),
        trackMultiplicityMin = cms.uint32(2),
        trackPairV0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.03)
        ),
        trackPseudoSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(2.0),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSelection = cms.PSet(
            a_dR = cms.double(-0.001053),
            a_pT = cms.double(0.005263),
            b_dR = cms.double(0.6263),
            b_pT = cms.double(0.3684),
            jetDeltaRMax = cms.double(0.3),
            maxDecayLen = cms.double(5),
            maxDistToAxis = cms.double(0.07),
            max_pT = cms.double(500),
            max_pT_dRcut = cms.double(0.1),
            max_pT_trackPTcut = cms.double(3),
            min_pT = cms.double(120),
            min_pT_dRcut = cms.double(0.5),
            normChi2Max = cms.double(99999.9),
            pixelHitsMin = cms.uint32(0),
            ptMin = cms.double(0.0),
            qualityClass = cms.string('any'),
            sip2dSigMax = cms.double(99999.9),
            sip2dSigMin = cms.double(-99999.9),
            sip2dValMax = cms.double(99999.9),
            sip2dValMin = cms.double(-99999.9),
            sip3dSigMax = cms.double(99999.9),
            sip3dSigMin = cms.double(0),
            sip3dValMax = cms.double(99999.9),
            sip3dValMin = cms.double(-99999.9),
            totalHitsMin = cms.uint32(0),
            useVariableJTA = cms.bool(False)
        ),
        trackSort = cms.string('sip2dSig'),
        useCategories = cms.bool(True),
        useTrackWeights = cms.bool(True),
        vertexFlip = cms.bool(False)
    ),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.VPSet(
        cms.PSet(
            default = cms.double(-1),
            name = cms.string('vertexLeptonCategory'),
            taggingVarName = cms.string('vertexLeptonCategory')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSig_0'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip2dSig_1'),
            taggingVarName = cms.string('trackSip2dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSig_0'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-100),
            idx = cms.int32(1),
            name = cms.string('trackSip3dSig_1'),
            taggingVarName = cms.string('trackSip3dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPtRel_0'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPtRel_1'),
            taggingVarName = cms.string('trackPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackPPar_0'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackPPar_1'),
            taggingVarName = cms.string('trackPPar')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('trackEtaRel_0'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('trackEtaRel_1'),
            taggingVarName = cms.string('trackEtaRel')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDeltaR_0'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDeltaR_1'),
            taggingVarName = cms.string('trackDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackPtRatio_0'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackPtRatio_1'),
            taggingVarName = cms.string('trackPtRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(0),
            name = cms.string('trackPParRatio_0'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(1.1),
            idx = cms.int32(1),
            name = cms.string('trackPParRatio_1'),
            taggingVarName = cms.string('trackPParRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackJetDist_0'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackJetDist_1'),
            taggingVarName = cms.string('trackJetDist')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('trackDecayLenVal_0'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(1),
            name = cms.string('trackDecayLenVal_1'),
            taggingVarName = cms.string('trackDecayLenVal')
        ),
        cms.PSet(
            default = cms.double(0),
            name = cms.string('jetNSecondaryVertices'),
            taggingVarName = cms.string('jetNSecondaryVertices')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('jetNTracks'),
            taggingVarName = cms.string('jetNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetEtRatio'),
            taggingVarName = cms.string('trackSumJetEtRatio')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            name = cms.string('trackSumJetDeltaR'),
            taggingVarName = cms.string('trackSumJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexMass_0'),
            taggingVarName = cms.string('vertexMass')
        ),
        cms.PSet(
            default = cms.double(-10),
            idx = cms.int32(0),
            name = cms.string('vertexEnergyRatio_0'),
            taggingVarName = cms.string('vertexEnergyRatio')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip2dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip2dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-999),
            idx = cms.int32(0),
            name = cms.string('trackSip3dSigAboveCharm_0'),
            taggingVarName = cms.string('trackSip3dSigAboveCharm')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance2dSig_0'),
            taggingVarName = cms.string('flightDistance2dSig')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('flightDistance3dSig_0'),
            taggingVarName = cms.string('flightDistance3dSig')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexJetDeltaR_0'),
            taggingVarName = cms.string('vertexJetDeltaR')
        ),
        cms.PSet(
            default = cms.double(0),
            idx = cms.int32(0),
            name = cms.string('vertexNTracks_0'),
            taggingVarName = cms.string('vertexNTracks')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('massVertexEnergyFraction_0'),
            taggingVarName = cms.string('massVertexEnergyFraction')
        ),
        cms.PSet(
            default = cms.double(-0.1),
            idx = cms.int32(0),
            name = cms.string('vertexBoostOverSqrtJetPt_0'),
            taggingVarName = cms.string('vertexBoostOverSqrtJetPt')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonPtRel_0'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonPtRel_1'),
            taggingVarName = cms.string('leptonPtRel')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(0),
            name = cms.string('leptonSip3d_0'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-10000),
            idx = cms.int32(1),
            name = cms.string('leptonSip3d_1'),
            taggingVarName = cms.string('leptonSip3d')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonDeltaR_0'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonDeltaR_1'),
            taggingVarName = cms.string('leptonDeltaR')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatioRel_0'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatioRel_1'),
            taggingVarName = cms.string('leptonRatioRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonEtaRel_0'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonEtaRel_1'),
            taggingVarName = cms.string('leptonEtaRel')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(0),
            name = cms.string('leptonRatio_0'),
            taggingVarName = cms.string('leptonRatio')
        ),
        cms.PSet(
            default = cms.double(-1),
            idx = cms.int32(1),
            name = cms.string('leptonRatio_1'),
            taggingVarName = cms.string('leptonRatio')
        )
    ),
    weightFile = cms.FileInPath('RecoBTag/CTagging/data/c_vs_udsg_PhaseI.xml')
)


process.combinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    jetTagComputers = cms.vstring(
        'jetProbabilityComputer',
        'jetBProbabilityComputer',
        'combinedSecondaryVertexV2Computer',
        'softPFMuonComputer',
        'softPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV',
        'Jet_CSVIVF',
        'Jet_JP',
        'Jet_JBP',
        'Jet_SoftMu',
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.combinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex',
        'CombinedSVIVFV2PseudoVertex',
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.ctppsBeamParametersFromLHCInfoESSource = cms.ESProducer("CTPPSBeamParametersFromLHCInfoESSource",
    appendToDataLabel = cms.string(''),
    beamDivX45 = cms.double(0.1),
    beamDivX56 = cms.double(0.1),
    beamDivY45 = cms.double(0.1),
    beamDivY56 = cms.double(0.1),
    lhcInfoLabel = cms.string(''),
    lhcInfoPerFillLabel = cms.string(''),
    lhcInfoPerLSLabel = cms.string(''),
    useNewLHCInfo = cms.bool(True),
    vtxOffsetX45 = cms.double(0.01),
    vtxOffsetX56 = cms.double(0.01),
    vtxOffsetY45 = cms.double(0.01),
    vtxOffsetY56 = cms.double(0.01),
    vtxOffsetZ45 = cms.double(0.01),
    vtxOffsetZ56 = cms.double(0.01),
    vtxStddevX = cms.double(0.02),
    vtxStddevY = cms.double(0.02),
    vtxStddevZ = cms.double(0.02)
)


process.ctppsInterpolatedOpticalFunctionsESSource = cms.ESProducer("CTPPSInterpolatedOpticalFunctionsESSource",
    appendToDataLabel = cms.string(''),
    lhcInfoLabel = cms.string(''),
    lhcInfoPerFillLabel = cms.string(''),
    lhcInfoPerLSLabel = cms.string(''),
    opticsLabel = cms.string(''),
    useNewLHCInfo = cms.bool(True)
)


process.doubleVertex2TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    minVertices = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.ghostTrackComputer = cms.ESProducer("GhostTrackESProducer",
    calibrationRecords = cms.vstring(
        'GhostTrackRecoVertex',
        'GhostTrackPseudoVertex',
        'GhostTrackNoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    minimumTrackWeight = cms.double(0.5),
    recordLabel = cms.string(''),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True)
)


process.hcalDDDRecConstants = cms.ESProducer("HcalDDDRecConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalDDDSimConstants = cms.ESProducer("HcalDDDSimConstantsESModule",
    appendToDataLabel = cms.string('')
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    MergePosition = cms.untracked.bool(False),
    appendToDataLabel = cms.string('')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    dump = cms.untracked.vstring(''),
    file = cms.untracked.string('')
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    debugV = cms.untracked.bool(False),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    DDDetector = cms.ESInputTag("",""),
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    attribute = cms.string('MuStructure'),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(False),
    value = cms.string('MuonBarrelDT')
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.impactParameterMVAComputer = cms.ESProducer("GenericMVAJetTagESProducer",
    calibrationRecord = cms.string('ImpactParameterMVA'),
    recordLabel = cms.string(''),
    useCategories = cms.bool(False)
)


process.jetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.jetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.multipleScatteringParametrisationMakerESProducer = cms.ESProducer("MultipleScatteringParametrisationMakerESProducer",
    appendToDataLabel = cms.string('')
)


process.muonGeometryConstants = cms.ESProducer("MuonGeometryConstantsESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(True)
)


process.negativeCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    jetTagComputers = cms.vstring(
        'negativeOnlyJetProbabilityComputer',
        'negativeOnlyJetBProbabilityComputer',
        'negativeCombinedSecondaryVertexV2Computer',
        'negativeSoftPFMuonComputer',
        'negativeSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV',
        'Jet_CSVIVF',
        'Jet_JP',
        'Jet_JBP',
        'Jet_SoftMu',
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.negativeCombinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex',
        'CombinedSVIVFV2PseudoVertex',
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(True),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(True)
)


process.negativeOnlyJetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.negativeOnlyJetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(-1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.negativeSoftPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(False)
)


process.negativeSoftPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(True)
)


process.negativeSoftPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    ipSign = cms.string('negative'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.negativeSoftPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(False)
)


process.negativeSoftPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('negative'),
    use3d = cms.bool(True)
)


process.negativeSoftPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    ipSign = cms.string('negative'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.negativeTrackCounting3D2ndComputer = cms.ESProducer("NegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.negativeTrackCounting3D3rdComputer = cms.ESProducer("NegativeTrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.positiveCombinedMVAV2Computer = cms.ESProducer("CombinedMVAV2JetTagESProducer",
    jetTagComputers = cms.vstring(
        'positiveOnlyJetProbabilityComputer',
        'positiveOnlyJetBProbabilityComputer',
        'positiveCombinedSecondaryVertexV2Computer',
        'positiveSoftPFMuonComputer',
        'positiveSoftPFElectronComputer'
    ),
    mvaName = cms.string('bdt'),
    spectators = cms.vstring(),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    variables = cms.vstring(
        'Jet_CSV',
        'Jet_CSVIVF',
        'Jet_JP',
        'Jet_JBP',
        'Jet_SoftMu',
        'Jet_SoftEl'
    ),
    weightFile = cms.FileInPath('RecoBTag/Combined/data/CombinedMVAV2_13_07_2015.weights.xml.gz')
)


process.positiveCombinedSecondaryVertexV2Computer = cms.ESProducer("CombinedSecondaryVertexESProducer",
    SoftLeptonFlip = cms.bool(False),
    calibrationRecords = cms.vstring(
        'CombinedSVIVFV2RecoVertex',
        'CombinedSVIVFV2PseudoVertex',
        'CombinedSVIVFV2NoVertex'
    ),
    categoryVariableName = cms.string('vertexCategory'),
    charmCut = cms.double(1.5),
    correctVertexMass = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    pseudoMultiplicityMin = cms.uint32(2),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    recordLabel = cms.string(''),
    trackFlip = cms.bool(False),
    trackMultiplicityMin = cms.uint32(2),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackPseudoSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSelection = cms.PSet(
        a_dR = cms.double(-0.001053),
        a_pT = cms.double(0.005263),
        b_dR = cms.double(0.6263),
        b_pT = cms.double(0.3684),
        jetDeltaRMax = cms.double(0.3),
        maxDecayLen = cms.double(5),
        maxDistToAxis = cms.double(0.07),
        max_pT = cms.double(500),
        max_pT_dRcut = cms.double(0.1),
        max_pT_trackPTcut = cms.double(3),
        min_pT = cms.double(120),
        min_pT_dRcut = cms.double(0.5),
        normChi2Max = cms.double(99999.9),
        pixelHitsMin = cms.uint32(0),
        ptMin = cms.double(0.0),
        qualityClass = cms.string('any'),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip2dValMax = cms.double(99999.9),
        sip2dValMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        sip3dSigMin = cms.double(0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        totalHitsMin = cms.uint32(0),
        useVariableJTA = cms.bool(False)
    ),
    trackSort = cms.string('sip2dSig'),
    useCategories = cms.bool(True),
    useTrackWeights = cms.bool(True),
    vertexFlip = cms.bool(False)
)


process.positiveOnlyJetBProbabilityComputer = cms.ESProducer("JetBProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.positiveOnlyJetProbabilityComputer = cms.ESProducer("JetProbabilityESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(0.3),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumProbability = cms.double(0.005),
    trackIpSign = cms.int32(1),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False)
)


process.positiveSoftPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(False)
)


process.positiveSoftPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(True)
)


process.positiveSoftPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    ipSign = cms.string('positive'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.positiveSoftPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(False)
)


process.positiveSoftPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('positive'),
    use3d = cms.bool(True)
)


process.positiveSoftPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    ipSign = cms.string('positive'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiPixelQualityFromDbRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ), 
        template = cms.PSetTemplate(
            record = cms.string('SiPixelQualityFromDbRcd'),
            tag = cms.string('')
        )
    ),
    appendToDataLabel = cms.string(''),
    siPixelQualityFromDbLabel = cms.string('')
)


process.siStripBackPlaneCorrectionDepESProducer = cms.ESProducer("SiStripBackPlaneCorrectionDepESProducer",
    BackPlaneCorrectionDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    BackPlaneCorrectionPeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    appendToDataLabel = cms.string('')
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    APVGain = cms.VPSet(
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGainRcd')
        ),
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGain2Rcd')
        )
    ),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    LorentzAnglePeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    appendToDataLabel = cms.string('')
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(
        cms.PSet(
            record = cms.string('SiStripDetVOffRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ),
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        )
    ),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('')
)


process.simpleSecondaryVertex2TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.simpleSecondaryVertex3TrkComputer = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    use3d = cms.bool(True),
    useSignificance = cms.bool(True)
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.softPFElectronByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(False)
)


process.softPFElectronByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(True)
)


process.softPFElectronByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFElectronComputer = cms.ESProducer("ElectronTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFElectron_BDT'),
    ipSign = cms.string('any'),
    useAdaBoost = cms.bool(False),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFElectron_BDT.weights.xml.gz')
)


process.softPFMuonByIP2dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(False)
)


process.softPFMuonByIP3dComputer = cms.ESProducer("LeptonTaggerByIPESProducer",
    ipSign = cms.string('any'),
    use3d = cms.bool(True)
)


process.softPFMuonByPtComputer = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFMuonComputer = cms.ESProducer("MuonTaggerESProducer",
    gbrForestLabel = cms.string('btag_SoftPFMuon_BDT'),
    ipSign = cms.string('any'),
    useAdaBoost = cms.bool(True),
    useCondDB = cms.bool(False),
    useGBRForest = cms.bool(True),
    weightFile = cms.FileInPath('RecoBTag/SoftLepton/data/SoftPFMuon_BDT.weights.xml.gz')
)


process.stripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('stripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    appendToDataLabel = cms.string(''),
    parameters = cms.PSet(

    )
)


process.trackCounting3D2ndComputer = cms.ESProducer("TrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(2),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.trackCounting3D3rdComputer = cms.ESProducer("TrackCountingESProducer",
    a_dR = cms.double(-0.001053),
    a_pT = cms.double(0.005263),
    b_dR = cms.double(0.6263),
    b_pT = cms.double(0.3684),
    deltaR = cms.double(-1.0),
    impactParameterType = cms.int32(0),
    max_pT = cms.double(500),
    max_pT_dRcut = cms.double(0.1),
    max_pT_trackPTcut = cms.double(3),
    maximumDecayLength = cms.double(5.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    min_pT = cms.double(120),
    min_pT_dRcut = cms.double(0.5),
    minimumImpactParameter = cms.double(-1),
    nthTrack = cms.int32(3),
    trackQualityClass = cms.string('any'),
    useSignedImpactParameterSig = cms.bool(True),
    useVariableJTA = cms.bool(False)
)


process.trackerGeometryDB = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False)
)


process.trackerNumberingGeometryDB = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDD4hep = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.trackerTopology = cms.ESProducer("TrackerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.zdcTopologyEP = cms.ESProducer("ZdcTopologyEP",
    appendToDataLabel = cms.string('')
)


process.BTagRecord = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('JetTagComputerRecord')
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionTimeout = cms.untracked.int32(0),
        messageLevel = cms.untracked.int32(0),
        security = cms.untracked.string('')
    ),
    DumpStat = cms.untracked.bool(False),
    JsonDumpFileName = cms.untracked.string(''),
    ReconnectEachRun = cms.untracked.bool(False),
    RefreshAlways = cms.untracked.bool(False),
    RefreshEachRun = cms.untracked.bool(False),
    RefreshOpenIOVs = cms.untracked.bool(False),
    appendToDataLabel = cms.string(''),
    connect = cms.string('frontier://FrontierProd/CMS_CONDITIONS'),
    frontierKey = cms.untracked.string(''),
    globaltag = cms.string('140X_dataRun3_Prompt_v4'),
    pfnPostfix = cms.untracked.string(''),
    pfnPrefix = cms.untracked.string(''),
    recordsToDebug = cms.untracked.vstring(),
    snapshotTime = cms.string(''),
    toGet = cms.VPSet(template = cms.PSetTemplate(
        connect = cms.string(''),
        label = cms.untracked.string(''),
        record = cms.string(''),
        refreshTime = cms.uint64(18446744073709551615),
        snapshotTime = cms.string(''),
        tag = cms.string('')
    ))
)


process.HcalTimeSlewEP = cms.ESSource("HcalTimeSlewEP",
    appendToDataLabel = cms.string('HBHE'),
    timeSlewParametersM2 = cms.VPSet(
        cms.PSet(
            slope = cms.double(-3.178648),
            tmax = cms.double(16.0),
            tzero = cms.double(23.960177)
        ),
        cms.PSet(
            slope = cms.double(-1.5610227),
            tmax = cms.double(10.0),
            tzero = cms.double(11.977461)
        ),
        cms.PSet(
            slope = cms.double(-1.075824),
            tmax = cms.double(6.25),
            tzero = cms.double(9.109694)
        )
    ),
    timeSlewParametersM3 = cms.VPSet(
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        ),
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(15.5),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-3.2),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(32.0),
            tspar2_siPM = cms.double(0.0)
        ),
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        ),
        cms.PSet(
            cap = cms.double(6.0),
            tspar0 = cms.double(12.2999),
            tspar0_siPM = cms.double(0.0),
            tspar1 = cms.double(-2.19142),
            tspar1_siPM = cms.double(0.0),
            tspar2 = cms.double(0.0),
            tspar2_siPM = cms.double(0.0)
        )
    )
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.eegeom = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd')
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    GainWidthsForTrigPrims = cms.bool(False),
    HBRecalibration = cms.bool(False),
    HBmeanenergies = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/meanenergiesHB.txt'),
    HBreCalibCutoff = cms.double(100.0),
    HERecalibration = cms.bool(False),
    HEmeanenergies = cms.FileInPath('CalibCalorimetry/HcalPlugins/data/meanenergiesHE.txt'),
    HEreCalibCutoff = cms.double(100.0),
    HFRecalParameterBlock = cms.PSet(
        HFdepthOneParameterA = cms.vdouble(
            0.004123, 0.00602, 0.008201, 0.010489, 0.013379,
            0.016997, 0.021464, 0.027371, 0.034195, 0.044807,
            0.058939, 0.125497
        ),
        HFdepthOneParameterB = cms.vdouble(
            -4e-06, -2e-06, 0.0, 4e-06, 1.5e-05,
            2.6e-05, 6.3e-05, 8.4e-05, 0.00016, 0.000107,
            0.000425, 0.000209
        ),
        HFdepthTwoParameterA = cms.vdouble(
            0.002861, 0.004168, 0.0064, 0.008388, 0.011601,
            0.014425, 0.018633, 0.023232, 0.028274, 0.035447,
            0.051579, 0.086593
        ),
        HFdepthTwoParameterB = cms.vdouble(
            -2e-06, -0.0, -7e-06, -6e-06, -2e-06,
            1e-06, 1.9e-05, 3.1e-05, 6.7e-05, 1.2e-05,
            0.000157, -3e-06
        )
    ),
    HFRecalibration = cms.bool(False),
    SiPMCharacteristics = cms.VPSet(
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(36000)
        ),
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(2500)
        ),
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ),
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ),
        cms.PSet(
            crosstalk = cms.double(0.17),
            nonlin1 = cms.double(1.00985),
            nonlin2 = cms.double(7.84089e-06),
            nonlin3 = cms.double(2.86282e-10),
            pixels = cms.int32(27370)
        ),
        cms.PSet(
            crosstalk = cms.double(0.196),
            nonlin1 = cms.double(1.00546),
            nonlin2 = cms.double(6.40239e-06),
            nonlin3 = cms.double(1.27011e-10),
            pixels = cms.int32(38018)
        ),
        cms.PSet(
            crosstalk = cms.double(0.0),
            nonlin1 = cms.double(1.0),
            nonlin2 = cms.double(0.0),
            nonlin3 = cms.double(0.0),
            pixels = cms.int32(0)
        )
    ),
    hb = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.19),
        gainWidth = cms.vdouble(0.0),
        mcShape = cms.int32(125),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(3.285),
        pedestalWidth = cms.double(0.809),
        photoelectronsToAnalog = cms.double(0.3305),
        qieOffset = cms.vdouble(-0.49, 1.8, 7.2, 37.9),
        qieSlope = cms.vdouble(0.912, 0.917, 0.922, 0.923),
        qieType = cms.int32(0),
        recoShape = cms.int32(105),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(8)
    ),
    hbUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        doRadiationDamage = cms.bool(True),
        gain = cms.vdouble(0.0006252),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(206),
        noiseCorrelation = cms.vdouble(0.26, 0.254),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(40.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        radiationDamage = cms.PSet(
            depVsNeutrons = cms.vdouble(5.543e-10, 8.012e-10),
            depVsTemp = cms.double(0.0631),
            intlumiOffset = cms.double(150),
            intlumiToNeutrons = cms.double(367000000.0),
            temperatureBase = cms.double(20),
            temperatureNew = cms.double(-5)
        ),
        recoShape = cms.int32(208),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(16)
    ),
    he = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.23),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(125),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(3.163),
        pedestalWidth = cms.double(0.9698),
        photoelectronsToAnalog = cms.double(0.3305),
        qieOffset = cms.vdouble(-0.38, 2.0, 7.6, 39.6),
        qieSlope = cms.vdouble(0.912, 0.916, 0.92, 0.922),
        qieType = cms.int32(0),
        recoShape = cms.int32(105),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(9)
    ),
    heUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.01, 0.015),
        doRadiationDamage = cms.bool(True),
        gain = cms.vdouble(0.0006252),
        gainWidth = cms.vdouble(0),
        mcShape = cms.int32(206),
        noiseCorrelation = cms.vdouble(0.26, 0.254),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(17.3),
        pedestalWidth = cms.double(1.5),
        photoelectronsToAnalog = cms.double(40.0),
        qieOffset = cms.vdouble(0.0, 0.0, 0.0, 0.0),
        qieSlope = cms.vdouble(0.05376, 0.05376, 0.05376, 0.05376),
        qieType = cms.int32(2),
        radiationDamage = cms.PSet(
            depVsNeutrons = cms.vdouble(5.543e-10, 8.012e-10),
            depVsTemp = cms.double(0.0631),
            intlumiOffset = cms.double(75),
            intlumiToNeutrons = cms.double(29200000.0),
            temperatureBase = cms.double(20),
            temperatureNew = cms.double(5)
        ),
        recoShape = cms.int32(208),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(16)
    ),
    hf = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(9.354),
        pedestalWidth = cms.double(2.516),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(-0.87, 1.4, 7.8, -29.6),
        qieSlope = cms.vdouble(0.359, 0.358, 0.36, 0.367),
        qieType = cms.int32(0),
        recoShape = cms.int32(301),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(-9999)
    ),
    hfUpgrade = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.14, 0.135),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(301),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(13.33),
        pedestalWidth = cms.double(3.33),
        photoelectronsToAnalog = cms.double(0.0),
        qieOffset = cms.vdouble(0.0697, -0.7405, 12.38, -671.9),
        qieSlope = cms.vdouble(0.297, 0.298, 0.298, 0.313),
        qieType = cms.int32(1),
        recoShape = cms.int32(301),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(-9999)
    ),
    ho = cms.PSet(
        darkCurrent = cms.vdouble(0.0),
        doRadiationDamage = cms.bool(False),
        gain = cms.vdouble(0.006, 0.0087),
        gainWidth = cms.vdouble(0.0, 0.0),
        mcShape = cms.int32(201),
        noiseCorrelation = cms.vdouble(0.0),
        noiseThreshold = cms.double(0.0),
        pedestal = cms.double(12.06),
        pedestalWidth = cms.double(0.6285),
        photoelectronsToAnalog = cms.double(4.0),
        qieOffset = cms.vdouble(-0.44, 1.4, 7.1, 38.5),
        qieSlope = cms.vdouble(0.907, 0.915, 0.92, 0.921),
        qieType = cms.int32(0),
        recoShape = cms.int32(201),
        seedThreshold = cms.double(0.1),
        zsThreshold = cms.int32(24)
    ),
    iLumi = cms.double(-1.0),
    killHE = cms.bool(False),
    testHEPlan1 = cms.bool(False),
    testHFQIE10 = cms.bool(False),
    toGet = cms.untracked.vstring('GainWidths'),
    useHBUpgrade = cms.bool(True),
    useHEUpgrade = cms.bool(True),
    useHFUpgrade = cms.bool(True),
    useHOUpgrade = cms.bool(True),
    useIeta18depth1 = cms.bool(False),
    useLayer0Weight = cms.bool(True)
)


process.prefer("es_hardcode")

process.boostedTauMCTask = cms.Task(process.boostedTauMCTable, process.boostedTausMCMatchHadTauForTable, process.boostedTausMCMatchLepTauForTable)


process.boostedTauTablesTask = cms.Task(process.boostedTauTable)


process.chsJetUpdateTask = cms.Task(process.jetCorrFactorsNano, process.updatedJets)


process.electronMCTask = cms.Task(process.electronMCTable, process.electronsMCMatchForTable, process.electronsMCMatchForTableAlt, process.matchingElecPhoton, process.tautaggerForMatching)


process.extraFlagsProducersTask = cms.Task()


process.extraFlagsTableTask = cms.Task()


process.fsrTablesTask = cms.Task(process.fsrTable, process.leptonFSRphotons)


process.genParticleTablesTask = cms.Task(process.genParticleTable)


process.genParticleTask = cms.Task(process.finalGenParticles, process.genIso)


process.genProtonTablesTask = cms.Task(process.genProtonTable)


process.genTauTask = cms.Task(process.genVisTauTable, process.genVisTaus, process.tauGenJetsForNano, process.tauGenJetsSelectorAllHadronsForNano)


process.genVertexTablesTask = cms.Task(process.genVertexT0Table, process.genVertexTable)


process.genWeightsTableTask = cms.Task(process.genWeightsTable)


process.globalTablesMCTask = cms.Task(process.genFilterTable, process.genTable, process.puTable)


process.globalTablesTask = cms.Task(process.beamSpotTable, process.rhoTable)


process.isoTrackTablesTask = cms.Task(process.isoTrackTable)


process.isoTrackTask = cms.Task(process.finalIsolatedTracks, process.isFromLostTrackForIsoTk, process.isoForIsoTk)


process.jetAK8LepTask = cms.Task(process.lepInAK8JetVars)


process.jetAK8TablesTask = cms.Task(process.fatJetTable, process.subJetTable)


process.jetAK8UserDataTask = cms.Task()


process.jetConstituentsTablesTask = cms.Task(process.finalJetsAK8ConstituentsTable, process.finalPFCandidates, process.pfCandidatesTable)


process.jetConstituentsTask = cms.Task(process.finalJetsAK8PFConstituents, process.selectedFinalJetsAK8PFConstituents)


process.jetForMETTask = cms.Task(process.basicJetsForMetForT1METNano, process.corrT1METJetTable)


process.jetMCTaskak4 = cms.Task(process.ak4GenJetsChargedOnly, process.genJetFlavourTable, process.genJetTable, process.genParticlesForJetsCharged, process.jetMCTable, process.patJetPartonsNano, process.trackGenJetAK4Table)


process.jetMCTaskak8 = cms.Task(process.fatJetMCTable, process.genJetAK8FlavourAssociation, process.genJetAK8FlavourTable, process.genJetAK8Table, process.genSubJetAK8Table, process.subjetMCTable)


process.jetPuppiForMETTask = cms.Task(process.basicJetsPuppiForMetForT1METNano, process.corrT1METJetPuppiTable)


process.jetPuppiTablesTask = cms.Task(process.jetPuppiTable)


process.jetPuppiUserDataTask = cms.Task(process.hfJetPuppiShowerShapeforNanoAOD)


process.jetTablesTask = cms.Task(process.bjetNN, process.cjetNN, process.jetTable)


process.jetUserDataTask = cms.Task(process.bJetVars, process.jercVars, process.pileupJetIdNano, process.qgtagger)


process.lowPtElectronMCTask = cms.Task(process.lowPtElectronMCTable, process.lowPtElectronsMCMatchForTable, process.lowPtElectronsMCMatchForTableAlt, process.matchingLowPtElecPhoton)


process.lowPtElectronTablesTask = cms.Task(process.lowPtElectronTable)


process.lowPtElectronTask = cms.Task(process.finalLowPtElectrons, process.isoForLowPtEle, process.modifiedLowPtElectrons, process.updatedLowPtElectrons, process.updatedLowPtElectronsWithUserData)


process.metMCTask = cms.Task(process.metMCTable)


process.metTablesTask = cms.Task(process.caloMetTable, process.deepMetResolutionTuneTable, process.deepMetResponseTuneTable, process.pfmetTable, process.puppiMetTable, process.rawMetTable, process.rawPuppiMetTable, process.trkMetTable)


process.muonMCTask = cms.Task(process.muonMCTable, process.muonsMCMatchForTable)


process.muonTask = cms.Task(process.finalLooseMuons, process.finalMuons, process.isoForMu, process.ptRatioRelForMu, process.slimmedMuonsUpdated, process.slimmedMuonsWithUserData)


process.particleLevelTablesTask = cms.Task(process.HTXSCategoryTable, process.lheInfoTable, process.rivetLeptonTable, process.rivetMetTable, process.rivetPhotonTable)


process.particleLevelTask = cms.Task(process.genParticles2HepMC, process.genParticles2HepMCHiggsVtx, process.mergedGenParticles, process.particleLevel, process.rivetProducerHTXS, process.tautagger)


process.photonMCTask = cms.Task(process.photonMCTable, process.photonsMCMatchForTable)


process.photonTablesTask = cms.Task(process.photonTable)


process.protonTablesTask = cms.Task(process.multiRPTable, process.protonTable, process.singleRPTable)


process.softActivityTablesTask = cms.Task(process.saJetTable, process.saTable)


process.softActivityTask = cms.Task(process.chsForSATkJets, process.softActivityJets, process.softActivityJets10, process.softActivityJets2, process.softActivityJets5)


process.tauMCTask = cms.Task(process.genTauTask, process.tauMCTable, process.tausMCMatchHadTauForTable, process.tausMCMatchLepTauForTable)


process.tauSignalCandsTask = cms.Task(process.tauSignalCands, process.tauSignalCandsTable)


process.tauSpinnerTableTask = cms.Task(process.tauSpinnerTable)


process.tauTask = cms.Task(process.chsJetUpdateTask, process.finalTaus, process.slimmedTaus, process.slimmedTausWithPNetCHS)


process.triggerObjectTablesTask = cms.Task(process.l1bits, process.triggerObjectTable, process.unpackedPatTrigger)


process.ttbarCatMCProducersTask = cms.Task(process.categorizeGenTtbar, process.matchGenBHadron, process.matchGenCHadron)


process.ttbarCategoryTableTask = cms.Task(process.ttbarCategoryTable)


process.vertexTask = cms.Task()


process.egmGsfElectronIDTask = cms.Task(process.egmGsfElectronIDs, process.electronMVAValueMapProducer)


process.egmPhotonIDTask = cms.Task(process.egmPhotonIDs, process.photonMVAValueMapProducer)


process.pileUpJetIDPuppiTask = cms.Task(process.pileupJetIdPuppi)


process.pileUpJetIDTask = cms.Task(process.pileupJetId, process.pileupJetIdCalculator, process.pileupJetIdEvaluator)


process.ak4CaloL1FastL2L3CorrectorTask = cms.Task(process.ak4CaloL1FastL2L3Corrector, process.ak4CaloL1FastjetCorrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector)


process.ak4CaloL1FastL2L3L6CorrectorTask = cms.Task(process.ak4CaloL1FastL2L3L6Corrector, process.ak4CaloL1FastjetCorrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector, process.ak4CaloL6SLBCorrector)


process.ak4CaloL1FastL2L3ResidualCorrectorTask = cms.Task(process.ak4CaloL1FastL2L3ResidualCorrector, process.ak4CaloL1FastjetCorrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector, process.ak4CaloResidualCorrector)


process.ak4CaloL1L2L3CorrectorTask = cms.Task(process.ak4CaloL1L2L3Corrector, process.ak4CaloL1OffsetCorrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector)


process.ak4CaloL1L2L3ResidualCorrectorTask = cms.Task(process.ak4CaloL1L2L3ResidualCorrector, process.ak4CaloL1OffsetCorrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector, process.ak4CaloResidualCorrector)


process.ak4CaloL2L3CorrectorTask = cms.Task(process.ak4CaloL2L3Corrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector)


process.ak4CaloL2L3L6CorrectorTask = cms.Task(process.ak4CaloL2L3L6Corrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector, process.ak4CaloL6SLBCorrector)


process.ak4CaloL2L3ResidualCorrectorTask = cms.Task(process.ak4CaloL2L3ResidualCorrector, process.ak4CaloL2RelativeCorrector, process.ak4CaloL3AbsoluteCorrector, process.ak4CaloResidualCorrector)


process.ak4L1JPTFastjetCorrectorTask = cms.Task(process.ak4CaloL1FastjetCorrector, process.ak4L1JPTFastjetCorrector)


process.ak4L1JPTOffsetCorrectorTask = cms.Task(process.ak4CaloL1OffsetCorrector, process.ak4L1JPTOffsetCorrector)


process.ak4PFCHSL1FastL2L3CorrectorTask = cms.Task(process.ak4PFCHSL1FastL2L3Corrector, process.ak4PFCHSL1FastjetCorrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector)


process.ak4PFCHSL1FastL2L3ResidualCorrectorTask = cms.Task(process.ak4PFCHSL1FastL2L3ResidualCorrector, process.ak4PFCHSL1FastjetCorrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector, process.ak4PFCHSResidualCorrector)


process.ak4PFCHSL1L2L3CorrectorTask = cms.Task(process.ak4PFCHSL1L2L3Corrector, process.ak4PFCHSL1OffsetCorrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector)


process.ak4PFCHSL1L2L3ResidualCorrectorTask = cms.Task(process.ak4PFCHSL1L2L3ResidualCorrector, process.ak4PFCHSL1OffsetCorrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector, process.ak4PFCHSResidualCorrector)


process.ak4PFCHSL2L3CorrectorTask = cms.Task(process.ak4PFCHSL2L3Corrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector)


process.ak4PFCHSL2L3ResidualCorrectorTask = cms.Task(process.ak4PFCHSL2L3ResidualCorrector, process.ak4PFCHSL2RelativeCorrector, process.ak4PFCHSL3AbsoluteCorrector, process.ak4PFCHSResidualCorrector)


process.ak4PFL1FastL2L3CorrectorTask = cms.Task(process.ak4PFL1FastL2L3Corrector, process.ak4PFL1FastjetCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector)


process.ak4PFL1FastL2L3L6CorrectorTask = cms.Task(process.ak4PFL1FastL2L3L6Corrector, process.ak4PFL1FastjetCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector, process.ak4PFL6SLBCorrector)


process.ak4PFL1FastL2L3ResidualCorrectorTask = cms.Task(process.ak4PFL1FastL2L3ResidualCorrector, process.ak4PFL1FastjetCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector, process.ak4PFResidualCorrector)


process.ak4PFL1L2L3CorrectorTask = cms.Task(process.ak4PFL1L2L3Corrector, process.ak4PFL1OffsetCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector)


process.ak4PFL1L2L3ResidualCorrectorTask = cms.Task(process.ak4PFL1L2L3ResidualCorrector, process.ak4PFL1OffsetCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector, process.ak4PFResidualCorrector)


process.ak4PFL2L3CorrectorTask = cms.Task(process.ak4PFL2L3Corrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector)


process.ak4PFL2L3L6CorrectorTask = cms.Task(process.ak4PFL2L3L6Corrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector, process.ak4PFL6SLBCorrector)


process.ak4PFL2L3ResidualCorrectorTask = cms.Task(process.ak4PFL2L3ResidualCorrector, process.ak4PFL2RelativeCorrector, process.ak4PFL3AbsoluteCorrector, process.ak4PFResidualCorrector)


process.ak4PFPuppiL1FastL2L3CorrectorTask = cms.Task(process.ak4PFPuppiL1FastL2L3Corrector, process.ak4PFPuppiL1FastjetCorrector, process.ak4PFPuppiL2RelativeCorrector, process.ak4PFPuppiL3AbsoluteCorrector)


process.ak4PFPuppiL1FastL2L3ResidualCorrectorTask = cms.Task(process.ak4PFPuppiL1FastL2L3ResidualCorrector, process.ak4PFPuppiL1FastjetCorrector, process.ak4PFPuppiL2RelativeCorrector, process.ak4PFPuppiL3AbsoluteCorrector, process.ak4PFPuppiResidualCorrector)


process.ak4PFPuppiL1L2L3CorrectorTask = cms.Task(process.ak4PFPuppiL1L2L3Corrector, process.ak4PFPuppiL1OffsetCorrector, process.ak4PFPuppiL2RelativeCorrector, process.ak4PFPuppiL3AbsoluteCorrector)


process.ak4PFPuppiL1L2L3ResidualCorrectorTask = cms.Task(process.ak4PFPuppiL1L2L3ResidualCorrector, process.ak4PFPuppiL1OffsetCorrector, process.ak4PFPuppiL2RelativeCorrector, process.ak4PFPuppiL3AbsoluteCorrector, process.ak4PFPuppiResidualCorrector)


process.ak4PFPuppiL2L3CorrectorTask = cms.Task(process.ak4PFPuppiL2L3Corrector, process.ak4PFPuppiL2RelativeCorrector, process.ak4PFPuppiL3AbsoluteCorrector)


process.ak4PFPuppiL2L3ResidualCorrectorTask = cms.Task(process.ak4PFPuppiL2L3ResidualCorrector, process.ak4PFPuppiL2RelativeCorrector, process.ak4PFPuppiL3AbsoluteCorrector, process.ak4PFPuppiResidualCorrector)


process.ak4TrackL2L3CorrectorTask = cms.Task(process.ak4TrackL2L3Corrector, process.ak4TrackL2RelativeCorrector, process.ak4TrackL3AbsoluteCorrector)


process.correctionTermsCaloMetTask = cms.Task(process.ak4CaloL2L3CorrectorTask, process.ak4CaloL2L3ResidualCorrectorTask, process.corrCaloMetType1, process.corrCaloMetType2, process.muCaloMetCorr)


process.correctionTermsPfMetType1Type2Task = cms.Task(process.ak4PFCHSL1FastL2L3CorrectorTask, process.ak4PFCHSL1FastL2L3ResidualCorrectorTask, process.corrPfMetType1, process.corrPfMetType2, process.particleFlowPtrs, process.pfCandMETcorr, process.pfCandsNotInJetsForMetCorr, process.pfCandsNotInJetsPtrForMetCorr, process.pfJetsPtrForMetCorr)


process.patMETCorrectionsTask = cms.Task(process.caloMetT1, process.caloMetT1T2, process.correctionTermsCaloMetTask, process.correctionTermsPfMetType1Type2Task, process.pfMetT1, process.pfMetT1T2)


process.ak4JetReclustering_taskPuppi = cms.Task()


process.jetCleaning_taskPuppi = cms.Task(process.cleanedPatJetsPuppi)


process.getJetCollectionForCorsAndUncs_taskPuppi = cms.Task(process.basicJetsForMetPuppi, process.jetSelectorForMetPuppi)


process.extractMET_taskPuppi = cms.Task(process.metrawCaloPuppi)


process.miniAODConfigurationPre_taskPuppi = cms.Task(process.extractMET_taskPuppi, process.patCHSMet, process.patCaloMet, process.patTrkMet, process.pfCHS, process.pfMetCHS, process.pfMetTrk, process.pfTrk)


process.patPFMetSmearCorrTask = cms.Task(process.patPFMetT1T2SmearCorr, process.patSmearedJets, process.selectedPatJetsForMetT1T2SmearCorr)


process.patPFMetT1T2CorrTask = cms.Task(process.patPFMetT1T2Corr, process.selectedPatJetsForMetT1T2Corr)


process.patPFMetT2CorrTask = cms.Task(process.patPFMetT2Corr)


process.patPFMetT2SmearCorrTask = cms.Task(process.patPFMetT1T2SmearCorr, process.patPFMetT2SmearCorr, process.patSmearedJets, process.selectedPatJetsForMetT1T2SmearCorr, process.selectedPatJetsForMetT2SmearCorr)


process.patPFMetTxyCorrTask = cms.Task(process.patPFMetTxyCorr)


process.type0PFMEtCorrectionPFCandToVertexAssociationTask = cms.Task(process.particleFlowDisplacedVertex, process.pfCandidateToVertexAssociation, process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0, process.selectedVerticesForPFMEtCorrType0)


process.type0PFMEtCorrectionTask = cms.Task(process.pfMETcorrType0, process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.producePatPFMETCorrectionsTaskPuppi = cms.Task(process.particleFlowDisplacedVertex, process.patPFMetPuppi, process.patPFMetT0CorrPuppi, process.patPFMetT0pcT1Puppi, process.patPFMetT0pcT1T2Puppi, process.patPFMetT1Puppi, process.patPFMetT1T2CorrPuppi, process.patPFMetT1T2Puppi, process.patPFMetT2CorrPuppi, process.pfCandMETcorrPuppi, process.pfCandidateToVertexAssociation, process.pfCandsNotInJetsForMetCorrPuppi, process.selectedPatJetsForMetT1T2CorrPuppi, process.selectedPatJetsForMetT2CorrPuppi, process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0Puppi, process.selectedVerticesForPFMEtCorrType0Puppi)


process.miniAODConfiguration_taskPuppi = cms.Task(process.slimmedMETsPuppi)


process.patPFMetT0CorrTaskPuppi = cms.Task(process.particleFlowDisplacedVertex, process.patPFMetT0CorrPuppi, process.pfCandidateToVertexAssociation, process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0Puppi, process.selectedVerticesForPFMEtCorrType0Puppi)


process.patPFMetT1T2CorrTaskPuppi = cms.Task(process.patPFMetT1T2CorrPuppi, process.selectedPatJetsForMetT1T2CorrPuppi)


process.patPFMetT2CorrTaskPuppi = cms.Task(process.patPFMetT2CorrPuppi)


process.patPFMetTxyCorrTaskPuppi = cms.Task(process.patPFMetTxyCorrPuppi)


process.patPFMetSmearCorrTaskPuppi = cms.Task(process.patPFMetT1T2SmearCorrPuppi, process.patSmearedJetsPuppi, process.selectedPatJetsForMetT1T2SmearCorrPuppi)


process.patPFMetT2SmearCorrTaskPuppi = cms.Task(process.patPFMetT1T2SmearCorrPuppi, process.patPFMetT2SmearCorrPuppi, process.patSmearedJetsPuppi, process.selectedPatJetsForMetT1T2SmearCorrPuppi, process.selectedPatJetsForMetT2SmearCorrPuppi)


process.getCorrectedMET_taskPuppi = cms.Task(process.corrPfMetType1Puppi, process.patPFMetSmearCorrTaskPuppi, process.patPFMetT0CorrTaskPuppi, process.patPFMetT1Puppi, process.patPFMetT1SmearPuppi, process.patPFMetT1T2CorrTaskPuppi, process.patPFMetT1TxyPuppi, process.patPFMetT2CorrTaskPuppi, process.patPFMetT2SmearCorrTaskPuppi, process.patPFMetTxyCorrTaskPuppi, process.patPFMetTxyPuppi)


process.createShiftedModules_taskPuppi = cms.Task(process.shiftedPatElectronEnDownPuppi, process.shiftedPatElectronEnUpPuppi, process.shiftedPatJetEnDownPuppi, process.shiftedPatJetEnUpPuppi, process.shiftedPatMETCorrElectronEnDownPuppi, process.shiftedPatMETCorrElectronEnUpPuppi, process.shiftedPatMETCorrJetEnDownPuppi, process.shiftedPatMETCorrJetEnUpPuppi, process.shiftedPatMETCorrMuonEnDownPuppi, process.shiftedPatMETCorrMuonEnUpPuppi, process.shiftedPatMETCorrPhotonEnDownPuppi, process.shiftedPatMETCorrPhotonEnUpPuppi, process.shiftedPatMETCorrTauEnDownPuppi, process.shiftedPatMETCorrTauEnUpPuppi, process.shiftedPatMETCorrUnclusteredEnDownPuppi, process.shiftedPatMETCorrUnclusteredEnUpPuppi, process.shiftedPatMuonEnDownPuppi, process.shiftedPatMuonEnUpPuppi, process.shiftedPatPhotonEnDownPuppi, process.shiftedPatPhotonEnUpPuppi, process.shiftedPatTauEnDownPuppi, process.shiftedPatTauEnUpPuppi, process.shiftedPatUnclusteredEnDownPuppi, process.shiftedPatUnclusteredEnUpPuppi)


process.getMETUncertainties_taskPuppi = cms.Task(process.patPFMetT1ElectronEnDownPuppi, process.patPFMetT1ElectronEnUpPuppi, process.patPFMetT1JetEnDownPuppi, process.patPFMetT1JetEnUpPuppi, process.patPFMetT1JetResDownPuppi, process.patPFMetT1JetResUpPuppi, process.patPFMetT1MuonEnDownPuppi, process.patPFMetT1MuonEnUpPuppi, process.patPFMetT1PhotonEnDownPuppi, process.patPFMetT1PhotonEnUpPuppi, process.patPFMetT1SmearElectronEnDownPuppi, process.patPFMetT1SmearElectronEnUpPuppi, process.patPFMetT1SmearJetEnDownPuppi, process.patPFMetT1SmearJetEnUpPuppi, process.patPFMetT1SmearJetResDownPuppi, process.patPFMetT1SmearJetResUpPuppi, process.patPFMetT1SmearMuonEnDownPuppi, process.patPFMetT1SmearMuonEnUpPuppi, process.patPFMetT1SmearPhotonEnDownPuppi, process.patPFMetT1SmearPhotonEnUpPuppi, process.patPFMetT1SmearTauEnDownPuppi, process.patPFMetT1SmearTauEnUpPuppi, process.patPFMetT1SmearUnclusteredEnDownPuppi, process.patPFMetT1SmearUnclusteredEnUpPuppi, process.patPFMetT1TauEnDownPuppi, process.patPFMetT1TauEnUpPuppi, process.patPFMetT1UnclusteredEnDownPuppi, process.patPFMetT1UnclusteredEnUpPuppi, process.pfCandsForUnclusteredUncPuppi, process.pfCandsNoJetsNoEleNoMuNoTauPuppi, process.pfCandsNoJetsNoEleNoMuPuppi, process.pfCandsNoJetsNoElePuppi, process.pfCandsNoJetsPuppi, process.pfElectronsPuppi, process.pfMuonsPuppi, process.pfNoPileUpPuppi, process.pfPhotonsPuppi, process.pfTausPuppi)


process.patMetCorrectionTaskPuppi = cms.Task(process.getCorrectedMET_taskPuppi)


process.patMetUncertaintyTaskPuppi = cms.Task(process.ak4PFPuppiL1FastL2L3CorrectorTask, process.ak4PFPuppiL1FastL2L3ResidualCorrectorTask, process.createShiftedModules_taskPuppi, process.getMETUncertainties_taskPuppi)


process.patShiftedModuleTaskPuppi = cms.Task()


process.patMETCorrectionsTaskPuppi = cms.Task(process.ak4CaloL2L3CorrectorPuppi, process.ak4CaloL2L3ResidualCorrectorPuppi, process.ak4CaloL2RelativeCorrectorPuppi, process.ak4CaloL3AbsoluteCorrectorPuppi, process.ak4CaloResidualCorrectorPuppi, process.ak4PFCHSL1FastL2L3CorrectorPuppi, process.ak4PFCHSL1FastL2L3ResidualCorrectorPuppi, process.ak4PFCHSL1FastjetCorrectorPuppi, process.ak4PFCHSL2RelativeCorrectorPuppi, process.ak4PFCHSL3AbsoluteCorrectorPuppi, process.ak4PFCHSResidualCorrectorPuppi, process.caloMetT1Puppi, process.caloMetT1T2Puppi, process.corrCaloMetType1Puppi, process.corrCaloMetType2Puppi, process.corrPfMetType1Puppi, process.corrPfMetType2Puppi, process.muCaloMetCorrPuppi, process.particleFlowPtrsPuppi, process.pfCandMETcorrPuppi, process.pfCandsNotInJetsForMetCorrPuppi, process.pfCandsNotInJetsPtrForMetCorrPuppi, process.pfJetsPtrForMetCorrPuppi, process.pfMetT1Puppi, process.pfMetT1T2Puppi)


process.rerunMvaIsolationTaskBoostedForNano = cms.Task(process.boostedDeepTau20161718v2p0BoostedForNano)


process.electronTimeLifeInfoTask = cms.Task(process.electronTimeLifeInfoTable, process.electronTimeLifeInfos)


process.muonTimeLifeInfoTask = cms.Task(process.muonTimeLifeInfoTable, process.muonTimeLifeInfos)


process.tauTimeLifeInfoTask = cms.Task(process.tauTimeLifeInfoTable, process.tauTimeLifeInfos)


process.pvbsTableTask = cms.Task(process.pvbsTable)


process.boostedTauTask = cms.Task(process.finalBoostedTaus, process.rerunMvaIsolationTaskBoostedForNano, process.slimmedTausBoosted)


process.electronTablesTask = cms.Task(process.electronPROMPTMVA, process.electronTable, process.electronTimeLifeInfoTask)


process.electronTask = cms.Task(process.bitmapVIDForEle, process.bitmapVIDForEleFall17V2, process.bitmapVIDForEleHEEP, process.calibratedPatElectronsNano, process.egmGsfElectronIDTask, process.finalElectrons, process.isoForEle, process.isoForEleFall17V2, process.ptRatioRelForEle, process.seedGainEle, process.slimmedElectronsWithUserData)


process.jetAK8Task = cms.Task(process.finalJetsAK8, process.jetAK8UserDataTask, process.jetCorrFactorsAK8, process.updatedJetsAK8, process.updatedJetsAK8WithUserData)


process.jetMCTask = cms.Task(process.ak4GenJetsChargedOnly, process.genJetFlavourTable, process.genJetTable, process.genParticlesForJetsCharged, process.jetMCTable, process.jetMCTaskak8, process.patJetPartonsNano, process.trackGenJetAK4Table)


process.jetPuppiTask = cms.Task(process.finalJetsPuppi, process.jetPuppiCorrFactorsNano, process.jetPuppiUserDataTask, process.updatedJetsPuppi, process.updatedJetsPuppiWithUserData)


process.jetTask = cms.Task(process.finalJets, process.jetCorrFactorsNano, process.jetUserDataTask, process.updatedJets, process.updatedJetsWithUserData)


process.muonTablesTask = cms.Task(process.muonBSConstrain, process.muonMVAID, process.muonMVALowPt, process.muonPNetScores, process.muonPNetVariables, process.muonPROMPTMVA, process.muonTable, process.muonTimeLifeInfoTask)


process.nanoTableTaskFS = cms.Task(process.boostedTauMCTask, process.electronMCTask, process.genParticleTablesTask, process.genParticleTask, process.genProtonTablesTask, process.genVertexTablesTask, process.genWeightsTableTask, process.globalTablesMCTask, process.jetMCTask, process.lowPtElectronMCTask, process.metMCTable, process.muonMCTask, process.particleLevelTablesTask, process.particleLevelTask, process.photonMCTask, process.tauMCTask, process.tauSpinnerTableTask, process.ttbarCatMCProducersTask, process.ttbarCategoryTableTask)


process.photonTask = cms.Task(process.bitmapVIDForPho, process.bitmapVIDForPhoRun2, process.egmPhotonIDTask, process.finalPhotons, process.hOverEForPho, process.isoForPho, process.isoForPhoFall17V2, process.seedGainPho, process.slimmedPhotonsWithUserData)


process.tauTablesTask = cms.Task(process.tauSignalCandsTask, process.tauTable, process.tauTimeLifeInfoTask)


process.vertexTablesTask = cms.Task(process.pvbsTableTask, process.svCandidateTable, process.vertexTable)


process.ak4JPTL1FastL2L3CorrectorTask = cms.Task(process.ak4JPTL1FastL2L3Corrector, process.ak4JPTL2RelativeCorrector, process.ak4JPTL3AbsoluteCorrector, process.ak4L1JPTFastjetCorrectorTask)


process.ak4JPTL1FastL2L3ResidualCorrectorTask = cms.Task(process.ak4JPTL1FastL2L3ResidualCorrector, process.ak4JPTL2RelativeCorrector, process.ak4JPTL3AbsoluteCorrector, process.ak4JPTResidualCorrector, process.ak4L1JPTFastjetCorrectorTask)


process.ak4JPTL1L2L3CorrectorTask = cms.Task(process.ak4JPTL1L2L3Corrector, process.ak4JPTL2RelativeCorrector, process.ak4JPTL3AbsoluteCorrector, process.ak4L1JPTOffsetCorrectorTask)


process.ak4JPTL1L2L3ResidualCorrectorTask = cms.Task(process.ak4JPTL1L2L3ResidualCorrector, process.ak4JPTL2RelativeCorrector, process.ak4JPTL3AbsoluteCorrector, process.ak4JPTResidualCorrector, process.ak4L1JPTOffsetCorrectorTask)


process.ak4JPTL2L3CorrectorTask = cms.Task(process.ak4JPTL2L3Corrector, process.ak4JPTL2RelativeCorrector, process.ak4JPTL3AbsoluteCorrector, process.ak4L1JPTOffsetCorrectorTask)


process.ak4JPTL2L3ResidualCorrectorTask = cms.Task(process.ak4JPTL2L3ResidualCorrector, process.ak4JPTL2RelativeCorrector, process.ak4JPTL3AbsoluteCorrector, process.ak4JPTResidualCorrector, process.ak4L1JPTOffsetCorrectorTask)


process.jetCorrectorsTask = cms.Task(process.ak4CaloL1FastL2L3CorrectorTask, process.ak4CaloL1FastL2L3L6CorrectorTask, process.ak4CaloL1FastL2L3ResidualCorrectorTask, process.ak4CaloL1L2L3CorrectorTask, process.ak4CaloL1L2L3ResidualCorrectorTask, process.ak4CaloL2L3CorrectorTask, process.ak4CaloL2L3L6CorrectorTask, process.ak4CaloL2L3ResidualCorrectorTask, process.ak4JPTL1FastL2L3CorrectorTask, process.ak4JPTL1FastL2L3ResidualCorrectorTask, process.ak4JPTL1L2L3CorrectorTask, process.ak4JPTL1L2L3ResidualCorrectorTask, process.ak4JPTL2L3CorrectorTask, process.ak4JPTL2L3ResidualCorrectorTask, process.ak4L1JPTFastjetCorrectorTask, process.ak4L1JPTOffsetCorrectorTask, process.ak4PFCHSL1FastL2L3CorrectorTask, process.ak4PFCHSL1FastL2L3ResidualCorrectorTask, process.ak4PFCHSL1L2L3CorrectorTask, process.ak4PFCHSL1L2L3ResidualCorrectorTask, process.ak4PFCHSL2L3CorrectorTask, process.ak4PFCHSL2L3ResidualCorrectorTask, process.ak4PFL1FastL2L3CorrectorTask, process.ak4PFL1FastL2L3L6CorrectorTask, process.ak4PFL1FastL2L3ResidualCorrectorTask, process.ak4PFL1L2L3CorrectorTask, process.ak4PFL1L2L3ResidualCorrectorTask, process.ak4PFL2L3CorrectorTask, process.ak4PFL2L3L6CorrectorTask, process.ak4PFL2L3ResidualCorrectorTask, process.ak4PFPuppiL1FastL2L3CorrectorTask, process.ak4PFPuppiL1FastL2L3ResidualCorrectorTask, process.ak4PFPuppiL1L2L3CorrectorTask, process.ak4PFPuppiL1L2L3ResidualCorrectorTask, process.ak4PFPuppiL2L3CorrectorTask, process.ak4PFPuppiL2L3ResidualCorrectorTask, process.ak4TrackL2L3CorrectorTask)


process.makePatMETsTask = cms.Task(process.patMETCorrectionsTask, process.patMETs)


process.recomputeRawMetFromPfcs_taskPuppi = cms.Task(process.ak4CaloL2L3CorrectorPuppi, process.ak4CaloL2L3ResidualCorrectorPuppi, process.ak4CaloL2RelativeCorrectorPuppi, process.ak4CaloL3AbsoluteCorrectorPuppi, process.ak4CaloResidualCorrectorPuppi, process.ak4PFCHSL1FastL2L3CorrectorPuppi, process.ak4PFCHSL1FastL2L3ResidualCorrectorPuppi, process.ak4PFCHSL1FastjetCorrectorPuppi, process.ak4PFCHSL2RelativeCorrectorPuppi, process.ak4PFCHSL3AbsoluteCorrectorPuppi, process.ak4PFCHSResidualCorrectorPuppi, process.caloMetT1Puppi, process.caloMetT1T2Puppi, process.corrCaloMetType1Puppi, process.corrCaloMetType2Puppi, process.corrPfMetType1Puppi, process.corrPfMetType2Puppi, process.makePatMETsTask, process.muCaloMetCorrPuppi, process.particleFlowPtrsPuppi, process.pfCandMETcorrPuppi, process.pfCandsNotInJetsForMetCorrPuppi, process.pfCandsNotInJetsPtrForMetCorrPuppi, process.pfJetsPtrForMetCorrPuppi, process.pfMetPuppi, process.pfMetT1Puppi, process.pfMetT1T2Puppi)


process.patPFMetT0CorrTask = cms.Task(process.patPFMetT0Corr, process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.producePatPFMETCorrectionsTask = cms.Task(process.patPFMet, process.patPFMetT0Corr, process.patPFMetT0pcT1, process.patPFMetT0pcT1T2, process.patPFMetT1, process.patPFMetT1T2, process.patPFMetT1T2Corr, process.patPFMetT2Corr, process.pfCandMETcorr, process.pfCandsNotInJetsForMetCorr, process.selectedPatJetsForMetT1T2Corr, process.selectedPatJetsForMetT2Corr, process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.producePatPFMETCorrectionsUncTask = cms.Task(process.patPFMet, process.patPFMetT0Corr, process.patPFMetT1T2Corr, process.patPFMetT2Corr, process.pfCandMETcorr, process.pfCandsNotInJetsForMetCorr, process.selectedPatJetsForMetT1T2Corr, process.selectedPatJetsForMetT2Corr, process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.produceMET_taskPuppi = cms.Task(process.jetCorrectorsTask, process.patPFMetPuppi, process.patPFMetT2SmearCorrTask, process.patPFMetTxyCorrTask, process.producePatPFMETCorrectionsTask, process.producePatPFMETCorrectionsTaskPuppi)


process.patMetModuleTaskPuppi = cms.Task(process.ak4JetReclustering_taskPuppi, process.getJetCollectionForCorsAndUncs_taskPuppi, process.jetCleaning_taskPuppi, process.miniAODConfigurationPre_taskPuppi, process.miniAODConfiguration_taskPuppi, process.produceMET_taskPuppi, process.recomputeRawMetFromPfcs_taskPuppi)


process.fullPatMetTaskPuppi = cms.Task(process.patCaloMet, process.patMetCorrectionTaskPuppi, process.patMetModuleTaskPuppi, process.patMetUncertaintyTaskPuppi, process.patShiftedModuleTaskPuppi, process.slimmedMETsPuppi)


process.nanoTableTaskCommon = cms.Task(process.boostedTauTablesTask, process.boostedTauTask, process.electronTablesTask, process.electronTask, process.extraFlagsProducersTask, process.extraFlagsTableTask, process.fsrTablesTask, process.globalTablesTask, process.isoTrackTablesTask, process.isoTrackTask, process.jetAK8LepTask, process.jetAK8TablesTask, process.jetAK8Task, process.jetConstituentsTablesTask, process.jetConstituentsTask, process.jetPuppiForMETTask, process.jetPuppiTablesTask, process.jetPuppiTask, process.linkedObjects, process.lowPtElectronTablesTask, process.lowPtElectronTask, process.metTablesTask, process.muonTablesTask, process.muonTask, process.nanoMetadata, process.photonTablesTask, process.photonTask, process.softActivityTablesTask, process.softActivityTask, process.tauTablesTask, process.tauTask, process.vertexTablesTask, process.vertexTask)


process.patAlgosToolsTask = cms.Task(process.NjettinessAK8Puppi, process.NjettinessAK8Subjets, process.ak4CaloL2L3CorrectorPuppi, process.ak4CaloL2L3ResidualCorrectorPuppi, process.ak4CaloL2RelativeCorrectorPuppi, process.ak4CaloL3AbsoluteCorrectorPuppi, process.ak4CaloResidualCorrectorPuppi, process.ak4JetReclustering_taskPuppi, process.ak4PFCHSL1FastL2L3CorrectorPuppi, process.ak4PFCHSL1FastL2L3ResidualCorrectorPuppi, process.ak4PFCHSL1FastjetCorrectorPuppi, process.ak4PFCHSL2RelativeCorrectorPuppi, process.ak4PFCHSL3AbsoluteCorrectorPuppi, process.ak4PFCHSResidualCorrectorPuppi, process.ak4PFJetsPuppi, process.ak4PFJetsPuppiTracksAssociatorAtVertex, process.ak4PFPuppiL1FastL2L3CorrectorTask, process.ak4PFPuppiL1FastL2L3ResidualCorrectorTask, process.ak8PFJetsPuppi, process.ak8PFJetsPuppiConstituents, process.ak8PFJetsPuppiSoftDrop, process.ak8PFJetsPuppiSoftDropMass, process.basicJetsForMetPuppi, process.caloMetT1Puppi, process.caloMetT1T2Puppi, process.cleanedPatJetsPuppi, process.corrCaloMetType1Puppi, process.corrCaloMetType2Puppi, process.corrPfMetType1Puppi, process.corrPfMetType2Puppi, process.createShiftedModules_taskPuppi, process.fullPatMetTaskPuppi, process.jetCorrectorsTask, process.jetSelectorForMetPuppi, process.makePatMETsTask, process.metrawCaloPuppi, process.miniAODConfiguration_taskPuppi, process.muCaloMetCorrPuppi, process.nb1AK8PuppiSoftDrop, process.nb1AK8PuppiSoftDropSubjets, process.nb2AK8PuppiSoftDrop, process.nb2AK8PuppiSoftDropSubjets, process.packedPatJetsAK8, process.packedpuppi, process.packedpuppiNoLep, process.particleFlowDisplacedVertex, process.particleFlowPtrsPuppi, process.patCHSMet, process.patCaloMet, process.patJetCorrFactorsAK8PFPuppiSoftDrop, process.patJetCorrFactorsAK8PFPuppiSoftDropSubjets, process.patJetCorrFactorsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.patJetCorrFactorsAK8Puppi, process.patJetCorrFactorsPuppi, process.patJetCorrFactorsSlimmedAK8DeepTags, process.patJetCorrFactorsSlimmedDeepFlavour, process.patJetCorrFactorsTransientCorrectedAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.patJetCorrFactorsTransientCorrectedSlimmedAK8DeepTags, process.patJetCorrFactorsTransientCorrectedSlimmedDeepFlavour, process.patJetFlavourAssociationAK8PFPuppiSoftDropSubjets, process.patJetFlavourAssociationLegacyAK8PFPuppiSoftDropSubjets, process.patJetGenJetMatchAK8PFPuppiSoftDrop, process.patJetGenJetMatchAK8PFPuppiSoftDropSubjets, process.patJetGenJetMatchAK8Puppi, process.patJetGenJetMatchPuppi, process.patJetPartonAssociationLegacyAK8PFPuppiSoftDropSubjets, process.patJetPartonMatchAK8PFPuppiSoftDrop, process.patJetPartonMatchAK8PFPuppiSoftDropSubjets, process.patJetPartonMatchAK8Puppi, process.patJetPartonMatchPuppi, process.patJetPartons, process.patJetPartonsLegacy, process.patJetsAK8PFPuppiSoftDrop, process.patJetsAK8PFPuppiSoftDropSubjets, process.patJetsAK8Puppi, process.patJetsPuppi, process.patPFMetPuppi, process.patPFMetSmearCorrTaskPuppi, process.patPFMetT0CorrPuppi, process.patPFMetT0CorrTaskPuppi, process.patPFMetT0pcT1Puppi, process.patPFMetT0pcT1T2Puppi, process.patPFMetT1ElectronEnDownPuppi, process.patPFMetT1ElectronEnUpPuppi, process.patPFMetT1JetEnDownPuppi, process.patPFMetT1JetEnUpPuppi, process.patPFMetT1JetResDownPuppi, process.patPFMetT1JetResUpPuppi, process.patPFMetT1MuonEnDownPuppi, process.patPFMetT1MuonEnUpPuppi, process.patPFMetT1PhotonEnDownPuppi, process.patPFMetT1PhotonEnUpPuppi, process.patPFMetT1Puppi, process.patPFMetT1T2CorrPuppi, process.patPFMetT1T2CorrTaskPuppi, process.patPFMetT1T2Puppi, process.patPFMetT1TauEnDownPuppi, process.patPFMetT1TauEnUpPuppi, process.patPFMetT1TxyPuppi, process.patPFMetT1UnclusteredEnDownPuppi, process.patPFMetT1UnclusteredEnUpPuppi, process.patPFMetT2CorrPuppi, process.patPFMetT2CorrTaskPuppi, process.patPFMetT2SmearCorrTask, process.patPFMetT2SmearCorrTaskPuppi, process.patPFMetTxyCorrTask, process.patPFMetTxyCorrTaskPuppi, process.patPFMetTxyPuppi, process.patShiftedModuleTaskPuppi, process.patTrkMet, process.pfCHS, process.pfCandMETcorrPuppi, process.pfCandidateToVertexAssociation, process.pfCandsForUnclusteredUncPuppi, process.pfCandsNoJetsNoEleNoMuNoTauPuppi, process.pfCandsNoJetsNoEleNoMuPuppi, process.pfCandsNoJetsNoElePuppi, process.pfCandsNoJetsPuppi, process.pfCandsNotInJetsForMetCorrPuppi, process.pfCandsNotInJetsPtrForMetCorrPuppi, process.pfDeepCSVTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfDeepCSVTagInfosSlimmedDeepFlavour, process.pfDeepFlavourJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfDeepFlavourJetTagsSlimmedDeepFlavour, process.pfDeepFlavourTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfDeepFlavourTagInfosSlimmedDeepFlavour, process.pfElectronsPuppi, process.pfGlobalParticleTransformerAK8JetTagsSlimmedAK8DeepTags, process.pfGlobalParticleTransformerAK8TagInfosSlimmedAK8DeepTags, process.pfImpactParameterTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfImpactParameterTagInfosSlimmedDeepFlavour, process.pfInclusiveSecondaryVertexFinderTagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfInclusiveSecondaryVertexFinderTagInfosSlimmedDeepFlavour, process.pfJetsPtrForMetCorrPuppi, process.pfMassDecorrelatedParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags, process.pfMassDecorrelatedParticleNetJetTagsSlimmedAK8DeepTags, process.pfMetCHS, process.pfMetPuppi, process.pfMetT1Puppi, process.pfMetT1T2Puppi, process.pfMetTrk, process.pfMuonsPuppi, process.pfNoPileUpPuppi, process.pfParticleNetDiscriminatorsJetTagsSlimmedAK8DeepTags, process.pfParticleNetFromMiniAODAK4PuppiCentralDiscriminatorsJetTagsSlimmedDeepFlavour, process.pfParticleNetFromMiniAODAK4PuppiCentralJetTagsSlimmedDeepFlavour, process.pfParticleNetFromMiniAODAK4PuppiCentralTagInfosSlimmedDeepFlavour, process.pfParticleNetFromMiniAODAK4PuppiForwardDiscriminatorsJetTagsSlimmedDeepFlavour, process.pfParticleNetFromMiniAODAK4PuppiForwardJetTagsSlimmedDeepFlavour, process.pfParticleNetFromMiniAODAK4PuppiForwardTagInfosSlimmedDeepFlavour, process.pfParticleNetFromMiniAODAK8DiscriminatorsJetTagsSlimmedAK8DeepTags, process.pfParticleNetFromMiniAODAK8JetTagsSlimmedAK8DeepTags, process.pfParticleNetFromMiniAODAK8TagInfosSlimmedAK8DeepTags, process.pfParticleNetJetTagsSlimmedAK8DeepTags, process.pfParticleNetMassRegressionJetTagsSlimmedAK8DeepTags, process.pfParticleNetTagInfosSlimmedAK8DeepTags, process.pfPhotonsPuppi, process.pfTausPuppi, process.pfTrk, process.pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4DiscriminatorsJetTagsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4JetTagsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4TagInfosSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4V1DiscriminatorsJetTagsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4V1JetTagsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4V1JetTagsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4V1TagInfosAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.pfUnifiedParticleTransformerAK4V1TagInfosSlimmedDeepFlavour, process.pileUpJetIDPuppiTask, process.producePatPFMETCorrectionsTask, process.selectedPatJetsAK8PFPuppiSoftDrop, process.selectedPatJetsAK8PFPuppiSoftDropSubjets, process.selectedPatJetsAK8Puppi, process.selectedPatJetsForMetT1T2CorrPuppi, process.selectedPatJetsForMetT2CorrPuppi, process.selectedPatJetsPuppi, process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0Puppi, process.selectedUpdatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.selectedVerticesForPFMEtCorrType0Puppi, process.slimmedJetsAK8, process.slimmedJetsAK8NoDeepTags, process.slimmedJetsAK8PFPuppiSoftDropPacked, process.slimmedJetsAK8PFPuppiSoftDropSubjetsNoDeepTags, process.slimmedJetsPuppi, process.slimmedJetsPuppiNoDeepTags, process.slimmedMETsPuppi, process.updatedPatJetsAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.updatedPatJetsSlimmedAK8DeepTags, process.updatedPatJetsSlimmedDeepFlavour, process.updatedPatJetsTransientCorrectedAK8PFPuppiSoftDropSubjetsSlimmedDeepFlavour, process.updatedPatJetsTransientCorrectedSlimmedAK8DeepTags, process.updatedPatJetsTransientCorrectedSlimmedDeepFlavour)


process.nanoSequenceCommon = cms.Sequence(process.nanoTableTaskCommon)


process.nanoSequenceFS = cms.Sequence(process.nanoSequenceCommon+cms.Sequence(process.nanoTableTaskFS))


process.nanoSequenceOnlyData = cms.Sequence(cms.Sequence(process.protonTablesTask)+process.lhcInfoTable)


process.nanoSequenceOnlyFullSim = cms.Sequence(process.triggerObjectTablesTask)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.muonBPHSequence = cms.Sequence(process.muonBPH)


process.muonBPHSequenceMC = cms.Sequence(process.muonBPH+process.muonBPHMCMatch)


process.muonBPHTables = cms.Sequence(process.TrgMatchMuonTable)


process.muonBPHTablesMC = cms.Sequence(process.TrgMatchMuonTable+process.MCMuonTable)


process.MuMuSequence = cms.Sequence(process.MuMu)


process.MuMuTables = cms.Sequence(process.MuMuTable)


process.tracksBPHSequence = cms.Sequence(process.tracksBPH)


process.tracksBPHSequenceMC = cms.Sequence(process.tracksBPH+process.tracksBPHMCMatch)


process.tracksBPHTables = cms.Sequence(process.trackBPHTable)


process.tracksBPHTablesMC = cms.Sequence(process.trackBPHTable+process.tracksBPHMCTable)


process.DiTrackSequence = cms.Sequence(process.DiTrack)


process.BToTrkTrkMuMuSequence = cms.Sequence(process.BToTrkTrkMuMu)


process.BToTrkTrkMuMuTables = cms.Sequence(process.BToTrkTrkMuMuTable+process.DiTrackTable)


process.nanoSequence = cms.Sequence(((((process.nanoSequenceCommon+process.nanoSequenceOnlyData+process.nanoSequenceOnlyFullSim)+process.muonBPHSequence+process.muonBPHTables)+process.MuMuSequence+process.MuMuTables)+process.tracksBPHSequence+process.tracksBPHTables)+process.DiTrackSequence+process.BToTrkTrkMuMuSequence+process.BToTrkTrkMuMuTables)


process.egmGsfElectronIDSequence = cms.Sequence(process.egmGsfElectronIDTask)


process.egmPhotonIDSequence = cms.Sequence(process.egmPhotonIDTask)


process.ak4CaloL1FastL2L3CorrectorChain = cms.Sequence(process.ak4CaloL1FastL2L3CorrectorTask)


process.ak4CaloL1FastL2L3L6CorrectorChain = cms.Sequence(process.ak4CaloL1FastL2L3L6CorrectorTask)


process.ak4CaloL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4CaloL1FastL2L3ResidualCorrectorTask)


process.ak4CaloL1L2L3CorrectorChain = cms.Sequence(process.ak4CaloL1L2L3CorrectorTask)


process.ak4CaloL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4CaloL1L2L3ResidualCorrectorTask)


process.ak4CaloL2L3CorrectorChain = cms.Sequence(process.ak4CaloL2L3CorrectorTask)


process.ak4CaloL2L3L6CorrectorChain = cms.Sequence(process.ak4CaloL2L3L6CorrectorTask)


process.ak4CaloL2L3ResidualCorrectorChain = cms.Sequence(process.ak4CaloL2L3ResidualCorrectorTask)


process.ak4JPTL1FastL2L3CorrectorChain = cms.Sequence(process.ak4JPTL1FastL2L3CorrectorTask)


process.ak4JPTL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4JPTL1FastL2L3ResidualCorrectorTask)


process.ak4JPTL1L2L3CorrectorChain = cms.Sequence(process.ak4JPTL1L2L3CorrectorTask)


process.ak4JPTL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4JPTL1L2L3ResidualCorrectorTask)


process.ak4JPTL2L3CorrectorChain = cms.Sequence(process.ak4JPTL2L3CorrectorTask)


process.ak4JPTL2L3ResidualCorrectorChain = cms.Sequence(process.ak4JPTL2L3ResidualCorrectorTask)


process.ak4L1JPTFastjetCorrectorChain = cms.Sequence(process.ak4L1JPTFastjetCorrectorTask)


process.ak4L1JPTOffsetCorrectorChain = cms.Sequence(process.ak4L1JPTOffsetCorrectorTask)


process.ak4PFCHSL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL1FastL2L3CorrectorTask)


process.ak4PFCHSL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFCHSL1FastL2L3ResidualCorrectorTask)


process.ak4PFCHSL1L2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL1L2L3CorrectorTask)


process.ak4PFCHSL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFCHSL1L2L3ResidualCorrectorTask)


process.ak4PFCHSL2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL2L3CorrectorTask)


process.ak4PFCHSL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFCHSL2L3ResidualCorrectorTask)


process.ak4PFL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFL1FastL2L3CorrectorTask)


process.ak4PFL1FastL2L3L6CorrectorChain = cms.Sequence(process.ak4PFL1FastL2L3L6CorrectorTask)


process.ak4PFL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFL1FastL2L3ResidualCorrectorTask)


process.ak4PFL1L2L3CorrectorChain = cms.Sequence(process.ak4PFL1L2L3CorrectorTask)


process.ak4PFL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFL1L2L3ResidualCorrectorTask)


process.ak4PFL2L3CorrectorChain = cms.Sequence(process.ak4PFL2L3CorrectorTask)


process.ak4PFL2L3L6CorrectorChain = cms.Sequence(process.ak4PFL2L3L6CorrectorTask)


process.ak4PFL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFL2L3ResidualCorrectorTask)


process.ak4PFPuppiL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFPuppiL1FastL2L3CorrectorTask)


process.ak4PFPuppiL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFPuppiL1FastL2L3ResidualCorrectorTask)


process.ak4PFPuppiL1L2L3CorrectorChain = cms.Sequence(process.ak4PFPuppiL1L2L3CorrectorTask)


process.ak4PFPuppiL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFPuppiL1L2L3ResidualCorrectorTask)


process.ak4PFPuppiL2L3CorrectorChain = cms.Sequence(process.ak4PFPuppiL2L3CorrectorTask)


process.ak4PFPuppiL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFPuppiL2L3ResidualCorrectorTask)


process.ak4TrackL2L3CorrectorChain = cms.Sequence(process.ak4TrackL2L3CorrectorTask)


process.correctionTermsCaloMet = cms.Sequence(process.correctionTermsCaloMetTask)


process.correctionTermsPfMetType1Type2 = cms.Sequence(process.correctionTermsPfMetType1Type2Task)


process.makePatMETs = cms.Sequence(process.makePatMETsTask)


process.patMETCorrections = cms.Sequence(process.patMETCorrectionsTask)


process.type0PFMEtCorrection = cms.Sequence(process.type0PFMEtCorrectionTask)


process.type0PFMEtCorrectionPFCandToVertexAssociation = cms.Sequence(process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.type0PFMEtCorrectionPFCandToVertexAssociationForValidation = cms.Sequence(process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.type0PFMEtCorrectionPFCandToVertexAssociationForValidationMiniAOD = cms.Sequence(process.type0PFMEtCorrectionPFCandToVertexAssociationTask)


process.rerunMvaIsolationSequenceBoostedForNano = cms.Sequence(process.boostedDeepTau20161718v2p0BoostedForNano)


process.nanoSequenceMC = cms.Sequence(process.nanoSequenceCommon+process.nanoSequenceOnlyFullSim+cms.Sequence(process.nanoTableTaskFS))


process.nanoAOD_step = cms.Path(process.nanoSequence)


process.endjob_step = cms.EndPath(process.endOfProcess)


process.NANOAODoutput_step = cms.EndPath(process.NANOAODoutput)


process.schedule = cms.Schedule(*[ process.nanoAOD_step, process.endjob_step, process.NANOAODoutput_step ], tasks=[process.patAlgosToolsTask])
